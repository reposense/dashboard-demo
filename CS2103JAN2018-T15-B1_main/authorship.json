[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d Retail Analytics"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "https://ci.appveyor.com/project/damithc/addressbook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* This is a desktop Retail Analytics application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* It is a Java application intended for retails who carry our hundreds to thousands of item deliveries a month who require customer analytics."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4], https://www.cs.waikato.ac.nz/ml/weka/[WEKA]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* https://github.com/se-edu/[AddressBook-Level4 project] created by SE-EDU initiative"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 4,
      "-": 25
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " * Gradle Configuration File"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.kt3k.coveralls\" version \"2.4.0\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \u00271.2.3\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination \"${buildDir}/jacocoHtml\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.7-alpha\u0027"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027javax.xml.bind\u0027, name: \u0027jaxb-api\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.sun.xml.bind\u0027, name: \u0027jaxb-impl\u0027, version: \u00272.3.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.glassfish.jaxb\u0027, name: \u0027jaxb-runtime\u0027, version: \u00272.2.10\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027javax.activation\u0027, name: \u0027activation\u0027, version: \u00271.1.1\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.fxmisc.easybind\u0027, name: \u0027easybind\u0027, version: \u00271.0.3\u0027"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.9.5\u0027"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.9.5\u0027"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    compile group: \u0027nz.ac.waikato.cms.weka\u0027, name: \u0027weka-stable\u0027, version: \u00273.8.0\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    compile group: \u0027nz.ac.waikato.cms.weka\u0027, name: \u0027chiSquaredAttributeEval\u0027, version: \u00271.0.2\u0027"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-legacy\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027junit\u0027, module: \u0027junit\u0027"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u00271.8.0_20\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "jar {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    manifest {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        attributes("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                \"Class-Path\": configurations.compile.collect { it.getName() }.join(\u0027 \u0027)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        )"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \"addressbook.jar\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00272.12\u0027"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(allprojects.sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(allprojects.sourceSets.main.output)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(allprojects.jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d allprojects.sourceSets.main.allSource.srcDirs.flatten()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * stalling the build."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        beforeTest { descriptor -\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.lifecycle(\u0027Running test: \u0027 + descriptor)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "task headless \u003c\u003c {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    println \"Setting headless mode properties.\""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027java.awt.robot\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.robot\u0027, \u0027glass\u0027"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.headless\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.order\u0027, \u0027sw\u0027"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.text\u0027, \u0027t2k\u0027"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes linkcss: true,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "               stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "               \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "               icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "               experimental: true,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "               sectlinks: true,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "               idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "               idseparator: \u0027-\u0027"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": " * Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": " * Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": " * This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027UserGuide.html\u0027"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 2,
      "-": 220
    }
  },
  {
    "path": "collated/functional/Sivalavida.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "# Sivalavida"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\RenderMapEvent.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Indicates a request to render the locations of querried people on map"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class RenderMapEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final List\u003cPerson\u003e selectedPersons;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public RenderMapEvent(List\u003cPerson\u003e selectedPersons) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.selectedPersons \u003d selectedPersons;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public List\u003cPerson\u003e getSelectedPersons() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return selectedPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\MapCommand.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Displays the geographic distribution of queried customers in Retail Analytics."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class MapCommand extends Command {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"map\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //query words"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String ALL_PERSONS_QUERY_WORD \u003d \"all\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String NAME_CONTAINS_KEYWORDS_QUERY_WORD \u003d \"name\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String WITHIN_AGE_RANGE_QUERY_WORD \u003d \"age\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String GENDER_QUERY_WORD \u003d \"gen\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String CONTAINS_TAG_QUERY_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //number of parameters (including query word) for respective query words"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int ALL_PERSONS_QUERY_NUM_PARAMETERS \u003d 0;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int NAME_CONTAINS_KEYWORDS_QUERY_MIN_NUM_PARAMETERS \u003d 1; //min"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int WITHIN_AGE_RANGE_QUERY_NUM_PARAMETERS \u003d 2;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int IS_GENDER_QUERY_NUM_PARAMETERS \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int CONTAINS_TAG_QUERY_NUM_PARAMETERS \u003d 1; //min"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \": Displays the geographic distribution of queried customers in Retail Analytics with clustering.\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 1) \" + ALL_PERSONS_QUERY_WORD + \": Select all customers - Parameters: none \\n\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + ALL_PERSONS_QUERY_WORD + \"\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 2) \" + NAME_CONTAINS_KEYWORDS_QUERY_WORD + \": Select customer if keyword in name  - Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + NAME_CONTAINS_KEYWORDS_QUERY_WORD + \" Alex Bernice\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 3) \" + WITHIN_AGE_RANGE_QUERY_WORD + \": Select customer if age within age range - Parameters: MIN_AGE MAX_AGE\\n\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + WITHIN_AGE_RANGE_QUERY_WORD + \" 15 56\\n\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 4) \" + GENDER_QUERY_WORD + \": Select customers of specified gender - Parameters: GENDER\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + GENDER_QUERY_WORD + \" M\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 5) \" + CONTAINS_TAG_QUERY_WORD + \": Select customer with any of the specified tags - Parameters: TAG\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + CONTAINS_TAG_QUERY_WORD + \" friends\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_MAP_PERSON_SUCCESS \u003d \"Number of customers displayed on map: %1$s\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public MapCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        List\u003cPerson\u003e updatedPersonList \u003d model.getFilteredPersonList();//see find command when using query"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        EventsCenter.getInstance().post(new RenderMapEvent(updatedPersonList));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        //Get emails of filtered people"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for(Person person : updatedPersonList) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            emails.add(person.getEmail().toString());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        //Create predicate to filter order list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderBelongsToPeoplePredicate orderBelongsToPeoplePredicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update order list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredOrderList(orderBelongsToPeoplePredicate);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MAP_PERSON_SUCCESS, updatedPersonList.size()));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof MapCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((MapCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        case MapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            return new MapCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\MapCommandParser.java"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Parses input arguments and creates a new MapCommand object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class MapCommandParser implements Parser\u003cMapCommand\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MapCommand"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * and returns an MapCommand object for execution."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public MapCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String[] queryKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String queryWord \u003d queryKeywords[0];"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String[] queryParameters \u003d Arrays.copyOfRange(queryKeywords, 1, queryKeywords.length);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if(!isValidQueryType(queryWord) || !isValidQueryParameters(queryWord, queryParameters)){"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Predicate\u003cPerson\u003e predicate \u003d getPredicate(queryWord, queryParameters);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new MapCommand(predicate);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *Checks if the given queryParameters are conform to the format of the queryWord"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private boolean isValidQueryParameters(String queryWord, String[] queryParameters) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        int queryParametersLength \u003d queryParameters.length;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        switch (queryWord){"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case ALL_PERSONS_QUERY_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return queryParametersLength \u003d\u003d ALL_PERSONS_QUERY_NUM_PARAMETERS;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case NAME_CONTAINS_KEYWORDS_QUERY_WORD:"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return queryParametersLength \u003e\u003d NAME_CONTAINS_KEYWORDS_QUERY_MIN_NUM_PARAMETERS ;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case WITHIN_AGE_RANGE_QUERY_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return (queryParametersLength \u003d\u003d WITHIN_AGE_RANGE_QUERY_NUM_PARAMETERS\u0026\u0026"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        isValidAge(queryParameters[0])\u0026\u0026"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        isValidAge(queryParameters[1]));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case GENDER_QUERY_WORD:"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return queryParametersLength \u003d\u003d IS_GENDER_QUERY_NUM_PARAMETERS \u0026\u0026"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        isValidGender(queryParameters[0]);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case CONTAINS_TAG_QUERY_WORD:"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return queryParametersLength \u003e\u003d CONTAINS_TAG_QUERY_NUM_PARAMETERS;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return false;//unknown query"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Assumes that the queryWord and queryParameters are valid and returns the corresponding"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * predicate"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Predicate getPredicate(String queryWord, String[] queryParameters) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        switch (queryWord){"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case ALL_PERSONS_QUERY_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case NAME_CONTAINS_KEYWORDS_QUERY_WORD:"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return new NameContainsKeywordsPredicate(Arrays.asList(queryParameters)) ;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case WITHIN_AGE_RANGE_QUERY_WORD:"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return new AgeWithinRangePredicate(new Age(queryParameters[0]), new Age(queryParameters[1]));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case GENDER_QUERY_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return new GenderPredicate(new Gender(queryParameters[0]));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case CONTAINS_TAG_QUERY_WORD:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return new ContainsTagPredicate(Arrays.asList(queryParameters));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return null;//unknown query"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private boolean isValidQueryType(String queryWord) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return queryWord.equals(ALL_PERSONS_QUERY_WORD) ||"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                queryWord.equals(NAME_CONTAINS_KEYWORDS_QUERY_WORD) ||"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                queryWord.equals(WITHIN_AGE_RANGE_QUERY_WORD) ||"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                queryWord.equals(GENDER_QUERY_WORD) ||"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                queryWord.equals(CONTAINS_TAG_QUERY_WORD);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ParserUtil.java"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @throws IllegalValueException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Gender parseGender(String gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e gender} into an {@code Optional\u003cGender\u003e} if {@code gender} is present."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Optional\u003cGender\u003e parseGender(Optional\u003cString\u003e gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return gender.isPresent() ? Optional.of(parseGender(gender.get())) : Optional.empty();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @throws IllegalValueException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Age parseAge(String age) throws IllegalValueException {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Age.MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e age} into an {@code Optional\u003cAge\u003e} if {@code age} is present."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Optional\u003cAge\u003e parseAge(Optional\u003cString\u003e age) throws IllegalValueException {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return age.isPresent() ? Optional.of(parseAge(age.get())) : Optional.empty();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code String latitude} into a {@code Latitude}."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @throws IllegalValueException if the given {@code latitude} is invalid."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Latitude parseLatitude(String latitude) throws IllegalValueException {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(latitude);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String trimmedLatitude \u003d latitude.trim();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Latitude.isValidLatitude(trimmedLatitude)) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Latitude.MESSAGE_LATITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Latitude(trimmedLatitude);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e latitude} into an {@code Optional\u003cLatitude\u003e} if {@code latitude} is present."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Optional\u003cLatitude\u003e parseLatitude(Optional\u003cString\u003e latitude) throws IllegalValueException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(latitude);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return latitude.isPresent() ? Optional.of(parseLatitude(latitude.get())) : Optional.empty();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code String longitude} into a {@code Longitude}."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @throws IllegalValueException if the given {@code longitude} is invalid."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Longitude parseLongitude(String longitude) throws IllegalValueException {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(longitude);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String trimmedLongitude \u003d longitude.trim();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Longitude.isValidLongitude(trimmedLongitude)) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Longitude.MESSAGE_LONGITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Longitude(trimmedLongitude);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e longitude} into an {@code Optional\u003cLongitude\u003e} if {@code longitude} is present."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Optional\u003cLongitude\u003e parseLongitude(Optional\u003cString\u003e longitude) throws IllegalValueException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(longitude);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return longitude.isPresent() ? Optional.of(parseLongitude(longitude.get())) : Optional.empty();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\order\\ContainsItemPredicate.java"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Tests that a {@code Order} contains {@code } matches any of the keywords given."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class ContainsItemPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final List\u003cInteger\u003e productIds;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public ContainsItemPredicate(List\u003cInteger\u003e productIds) {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.productIds \u003d productIds;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        for(SubOrder suborder:order.getSubOrders()){"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            for(int productId: productIds){"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                if (suborder.getProductID() \u003d\u003d productId){"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof ContainsItemPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.productIds.equals(((ContainsItemPredicate) other).productIds)); // state check"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\Age.java"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Represents a Person\u0027s age in Retail Analytics."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class Age implements Comparable\u003cAge\u003e{"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The minimum allowed age"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static int MIN_AGE \u003d 1;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The maximum allowed age"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static int MAX_AGE \u003d 120;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_AGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            String.format(\"Age must be an integer between %d and %d\", MIN_AGE, MAX_AGE);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String AGE_VALIDATION_REGEX \u003d \"\\\\d{1,3}\";"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param age A valid age of a person."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.value \u003d age;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Returns true if a given string is a valid age of a person"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (test.matches(AGE_VALIDATION_REGEX)){"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            int age \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            if(age\u003e\u003dMIN_AGE \u0026\u0026 age\u003c\u003dMAX_AGE){"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Returns the int value of the persons Age"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private int getNumericalAge() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.value.equals(((Age) other).value)); // state check"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public int compareTo(Age other) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return (other.getNumericalAge() - this.getNumericalAge());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\AgeWithinRangePredicate.java"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Age} is within the range given."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class AgeWithinRangePredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Age minimumAge;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Age maximumAge;"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public AgeWithinRangePredicate(Age mininumAge, Age maximumAge) {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.minimumAge \u003d mininumAge;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.maximumAge \u003d maximumAge;"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return (minimumAge.compareTo(person.getAge())\u003e\u003d0) \u0026\u0026"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                (maximumAge.compareTo(person.getAge())\u003c\u003d0);"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof AgeWithinRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.maximumAge \u003d\u003d ((AgeWithinRangePredicate) other).maximumAge"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.maximumAge \u003d\u003d ((AgeWithinRangePredicate) other).maximumAge); // state check"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\ContainsTagPredicate.java"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Tests if a {@code Person} contains a {@code Tag}\u0027s which"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * matches any of the  given tags."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class ContainsTagPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public ContainsTagPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        for(Tag tag:person.getTags()){"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            for(String keyword: keywords){"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                if (tag.tagName.equals(keyword)){"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof ContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((ContainsTagPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\Gender.java"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Represents a Person\u0027s gender in the retail analytics."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            \"Gender should only be \u0027M\u0027 or \u0027F\u0027, and it should not be blank\";"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MALE_SHORTFORM \u003d \"M\";"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String FEMALE_SHORTFORM \u003d \"F\";"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String value;//either MALE_SHORTFORM or FEMALE_SHORTFORM"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param gender A valid gender (ie \"M\" or \"F\") (case insensitive)."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        setGender(gender);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets {@code value} to the uppercase value of {@code gender}"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param gender a valid gender"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private void setGender(String gender) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assert isValidGender(gender);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String genderUpperCase \u003d gender.toUpperCase();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if(genderUpperCase.equals(MALE_SHORTFORM)){"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            value \u003d MALE_SHORTFORM;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        } else if(genderUpperCase.equals(FEMALE_SHORTFORM)){"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            value \u003d FEMALE_SHORTFORM;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Returns true if a given string is a valid person gender."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String testUpperCase \u003d test.toUpperCase();"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return testUpperCase.equals(MALE_SHORTFORM) || testUpperCase.equals(FEMALE_SHORTFORM);"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\GenderPredicate.java"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Age} is within the range given."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class GenderPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public GenderPredicate(Gender gender) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return (gender.equals(person.getGender()));"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof GenderPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.gender \u003d\u003d ((GenderPredicate) other).gender); // state check"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\Latitude.java"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Represents a Person\u0027s Latitude in the Retail Analytics."
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLatitude(String)}"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "public class Latitude {"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The minimum allowed latitude"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static float MIN_LATITUDE \u003d Float.valueOf(\"-90.0000\");"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The maximum allowed latitude"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static float MAX_LATITUDE \u003d Float.valueOf(\"90.0000\");"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_LATITUDE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            String.format(\"Latitude numbers must be a decimal value between %f and %f\", MIN_LATITUDE, MAX_LATITUDE);"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String LATITUDE_VALIDATION_REGEX \u003d \"-?\\\\d+\\\\.?\\\\d*\";"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final DecimalFormat format \u003d new DecimalFormat(\"00.000000\");"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Constructs a {@code Latitude}."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param latitude A valid latitude number."
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Latitude(String latitude) {"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(latitude);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        checkArgument(isValidLatitude(latitude), MESSAGE_LATITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.value \u003d format.format(Double.parseDouble(latitude));"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * A method to check if latitude value is valid"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param test the latitude to check is valid"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @return true if test is a decimal value and within the MIN and MAX latitude"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static boolean isValidLatitude(String test) {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (test.matches(LATITUDE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            Float latitude \u003d Float.parseFloat(test);"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            if (latitude \u003e\u003d MIN_LATITUDE \u0026\u0026 latitude \u003c\u003d MAX_LATITUDE) {"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof Latitude // instanceof handles nulls"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.value.equals(((Latitude) other).value)); // state check"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\Longitude.java"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Represents a Person\u0027s Latitude in the Retail Analytics."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLongitude(String)}"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class Longitude {"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The minimum allowed longitude"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static float MIN_LONGITUDE \u003d Float.valueOf(\"-180.0000\");"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The maximum allowed longitude"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static float MAX_LONGITUDE \u003d Float.valueOf(\"180.0000\");"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_LONGITUDE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            String.format(\"Latitude numbers must be a decimal value between %f and %f\", MIN_LONGITUDE, MAX_LONGITUDE);"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String LONGITUDE_VALIDATION_REGEX \u003d \"-?\\\\d+\\\\.?\\\\d*\";"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final DecimalFormat format \u003d new DecimalFormat(\"000.000000\");"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Constructs a {@code Longitude}."
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param longitude A valid longitude number."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Longitude(String longitude) {"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(longitude);"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        checkArgument(isValidLongitude(longitude), MESSAGE_LONGITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.value \u003d format.format(Double.parseDouble(longitude));"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * return true if {@code test} is a decimal value and within the MIN and MAX longitude"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static boolean isValidLongitude(String test) {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (test.matches(LONGITUDE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            Float longitude \u003d Float.parseFloat(test);"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            if (longitude \u003e\u003d MIN_LONGITUDE \u0026\u0026 longitude \u003c\u003d MAX_LONGITUDE) {"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof Longitude // instanceof handles nulls"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.value.equals(((Longitude) other).value)); // state check"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\Person.java"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Latitude getLatitude() {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return latitude;"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Longitude getLongitude() {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return longitude;"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "  "
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getGender().equals(this.getGender())"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAge().equals(this.getAge())"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getLatitude().equals(this.getLatitude())"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getLongitude().equals(this.getLongitude())"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, gender, tags);"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\BrowserPanel.java"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Loads location of person in Google Maps"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private void loadPersonLocationPage(Person person) {"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        loadPage(String.format(PERSON_LOCATION_PAGE_URL, person.getName().fullName, person.getLatitude().value,person.getLongitude().value));"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Loads location of selected persons in Google Maps"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private void loadSelectedPersonsLocationPage(List\u003cPerson\u003e selectedPersons) {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String completeUrl \u003d SELECTED_PERSON_LOCATION_PAGE_URL;"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        boolean firstPerson \u003d true;"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        for (Person person:selectedPersons){"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            if (!firstPerson){"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                completeUrl +\u003d \"\u0026\";"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                firstPerson \u003d false;"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            completeUrl +\u003d String.format(\"lat\u003d%s,%s\",person.getLatitude().value,person.getLongitude().value);"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(completeUrl);"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\BrowserPanel.java"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private void handleRenderMapEvent(RenderMapEvent event) {"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        loadSelectedPersonsLocationPage(event.getSelectedPersons());"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 627,
      "-": 191
    }
  },
  {
    "path": "collated/functional/YingxuH.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# YingxuH"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\OrderPanelSelectionChangedEvent.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a selection change in the Order List Panel"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final OrderCard newSelection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderPanelSelectionChangedEvent(OrderCard newSelection) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCard getNewSelection() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\ProductPanelSelectionChangedEvent.java"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a selection change in the Product List Panel"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final ProductCard newSelection;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductPanelSelectionChangedEvent(ProductCard newSelection) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCard getNewSelection() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddProductCommand.java"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Adds a product to the retail analytics."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddProductCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addproduct\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a product to retail analytics. \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_NAME + \"Egg \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRICE + \"SGD 2.5 \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New product: %1$s\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"This product already exists in the retail analytics\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Product toAdd;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Product}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public AddProductCommand(Product product) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        toAdd \u003d product;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            model.addProduct(toAdd);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (DuplicateProductException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProductCommand) other).toAdd));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddProductCommandParser.java"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parses input arguments and creates a new AddProductCommand object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddProductCommandParser implements Parser\u003cAddProductCommand\u003e {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProductCommand"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns an AddProductCommand object for execution."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public AddProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRICE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PRICE, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            ProductName name \u003d ParserUtil.parseProductName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Money price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).get();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY)).get();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Product product \u003d new Product(name, price, category);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddProductCommand(product);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(iae.getMessage(), iae);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (CurrencyUnknownException cue) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(cue.getMessage(), cue);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case AddProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setProducts(List\u003cProduct\u003e products) throws DuplicateProductException{"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.products.setProducts(products);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        this.orders.setOrders(orders);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Adds a product to the address book."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void addProduct(Product p) throws DuplicateProductException {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //Product product \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //Maybe need to synchronize with CategoryList in the future."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        products.add(p);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ProductNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean removeProduct(Product key) throws ProductNotFoundException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (products.remove(key)) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds new order to address book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateOrderException if this order already exists."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addOrder(Order o) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        orders.add(o);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateOrderException if updating the order\u0027s details causes the order to be equivalent to"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing order."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws OrderNotFoundException if {@code target} could not be found."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateOrder(Order target, Order editedOrder)"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicateOrderException, OrderNotFoundException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        orders.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws OrderNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removeOrder(Order key) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        if (orders.remove(key)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cProduct\u003e getProductList() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return products.asObservableList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        return orders.asObservableList();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\Model.java"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    Predicate\u003cProduct\u003e PREDICATE_SHOW_ALL_PRODUCTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\Model.java"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given product. */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void deleteProduct(Product target) throws ProductNotFoundException;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given product */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void addProduct(Product product) throws DuplicateProductException;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\Model.java"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered product list */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates the filter of the filtered product list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void updateFilteredProductList(Predicate\u003cProduct\u003e predicate);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public synchronized void deleteProduct(Product target) throws ProductNotFoundException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        addressBook.removeProduct(target);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public synchronized void addProduct(Product product) throws DuplicateProductException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        addressBook.addProduct(product);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Products} backed by the internal list of"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredProducts);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredProducts.setPredicate(predicate);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\money\\exceptions\\CurrencyUnknownException.java"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals that the money objects do not have matching currencies."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class CurrencyUnknownException extends RuntimeException {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CurrencyUnknownException(String aMessage){"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(aMessage);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\money\\exceptions\\MismatchedCurrencyException.java"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals that the money objects do not have matching currencies."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class MismatchedCurrencyException extends RuntimeException {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public MismatchedCurrencyException(String aMessage){"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(aMessage);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\money\\exceptions\\ObjectNotMoneyException.java"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals that the money objects do not have matching currencies."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ObjectNotMoneyException extends RuntimeException {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObjectNotMoneyException(String aMessage){"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(aMessage);"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\money\\Money.java"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represent an amount of money in any currency."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " *"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * This class assumes decimal currency, without funky divisions"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * like 1/5 and so on. Money objects are immutable."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Most operations involving more than one Money object will throw a"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * MismatchedCurrencyException if the currencies don\u0027t match."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " *"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Money implements Comparable\u003cMoney\u003e, Serializable {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MONEY_VALIDATION_REGEX_WITHOUT_CURRENCY \u003d \"\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MONEY_VALIDATION_REGEX_WITH_UNKNOWN_PREFIX \u003d \"(\\\\p{Alpha}+|\\\\p{Sc})\\\\s*\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MONEY_PREFIX \u003d \"(\\\\p{Alpha}+|\\\\p{Sc})\\\\s*\";"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MONEY_DIGITS \u003d \"\\\\s*\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_MONEY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String.format(\"price should only contains currency sy/mbol(optional) and digits,\" +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \" and it cannot be negative\");"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_MONEY_SYMBOL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String.format(\"currency code should be limited ISO 4277 code\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The money amount."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Never null."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private BigDecimal fAmount;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The currency of the money, such as US Dollars or Euros."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Never null."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Currency fCurrency;"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The rounding style to be used."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final RoundingMode fRounding;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static BigDecimal DEFAULT_AMOUNT \u003d new BigDecimal(0.00);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The default currency to be used if no currency is passed to the constructor."
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * To be initialized by the static init()."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Currency DEFAULT_CURRENCY \u003d Currency.getInstance(\"SGD\");"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The default rounding style to be used if no currency is passed to the constructor."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static RoundingMode DEFAULT_ROUNDING \u003d RoundingMode.HALF_EVEN;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * String representation for Money class."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final String repMoney;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private int fHashCode;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int HASH_SEED \u003d 23;"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int HASH_FACTOR \u003d 37;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Full constructor."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aAmount is required, can be positive or negative. The number of"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * decimals in the amount cannot exceed the maximum number of"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * decimals for the given Currency."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aCurrency"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aRoundingStyle is required, must match a rounding style used by"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * BigDecimal."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(BigDecimal aAmount, Currency aCurrency, RoundingMode aRoundingStyle){"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkNotNull(aAmount, aCurrency, aRoundingStyle);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        fAmount \u003d aAmount;"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        fCurrency \u003d aCurrency;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        fRounding \u003d aRoundingStyle;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        repMoney \u003d fCurrency.getSymbol() + \" \" + fAmount.toPlainString();"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructor taking only the money amount."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aAmount is required, can be positive or negative."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(BigDecimal aAmount){"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(aAmount, DEFAULT_CURRENCY, DEFAULT_ROUNDING);"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructor taking the money amount and currency."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The rounding style takes a default value."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aAmount is required, can be positive or negative."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aCurrency is required."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(BigDecimal aAmount, Currency aCurrency){"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(aAmount, aCurrency, DEFAULT_ROUNDING);"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructor taking the money amount and the rounding mode."
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aAmount is required, can be positive or negative."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(BigDecimal aAmount, RoundingMode aRoundingStyle){"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(aAmount, DEFAULT_CURRENCY, aRoundingStyle);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * empty constructor"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money() {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(DEFAULT_AMOUNT, DEFAULT_CURRENCY, DEFAULT_ROUNDING);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Return the amount passed to the constructor. */"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public BigDecimal getAmount() { return fAmount; }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Return the currency passed to the constructor, or the default currency. */"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Currency getCurrency() { return fCurrency; }"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Return the rounding style passed to the constructor, or the default rounding style. */"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public RoundingMode getRoundingStyle() { return fRounding; }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid Money."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidMoney(String test) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return isValidMoneyWithoutCurrency(test) || isValidMoneyWithUnknownPrefix(test);"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid Money with currency symbol code."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidMoneyWithUnknownPrefix(String test) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(MONEY_VALIDATION_REGEX_WITH_UNKNOWN_PREFIX);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return the currency that the symbol represents if the symbol is valid, otherwise returns the default"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * currency"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param symbol"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Currency parseCurrency(String symbol) {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (Currency currency: Currency.getAvailableCurrencies()) {"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String code \u003d currency.getSymbol();"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (symbol.equals(code)) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return currency;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        throw new CurrencyUnknownException(\"unknown currency: \" + symbol +\"\\n\"+ MESSAGE_MONEY_SYMBOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid Money without currency symbol."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidMoneyWithoutCurrency(String test) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(MONEY_VALIDATION_REGEX_WITHOUT_CURRENCY);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String price} into a {@code price}."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalValueException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Money parsePrice(String price) throws IllegalValueException {"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return ParserUtil.parsePrice(price);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return true only if aThat Money has the same currency"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * as this Money. For the public use."
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Assume the aThat is also a money object"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isSameCurrencyAs(Money aThat){"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( aThat !\u003d null ) {"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            result \u003d this.fCurrency.equals(aThat.fCurrency);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Return true only if the amount is positive. */"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isPlus(){"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fAmount.compareTo(ZERO) \u003e 0;"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isMinus(){"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fAmount.compareTo(ZERO) \u003c  0;"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isZero(){"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fAmount.compareTo(ZERO) \u003d\u003d  0;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Add aThat Money to this Money."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Currencies must match."
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money plus(Object aThat){"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(fAmount.add(that.fAmount), fCurrency, fRounding);"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Subtract aThat Money from this Money."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Currencies must match."
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money minus(Object aThat){"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(fAmount.subtract(that.fAmount), fCurrency, fRounding);"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sum a collection of Money objects."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Currencies must match."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aMoneys collection of Money objects, all of the same currency."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * If the collection is empty, then a zero value is returned."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Money sum(Collection\u003cMoney\u003e aMoneys){"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money sum \u003d new Money(ZERO);"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for(Money money : aMoneys){"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            sum \u003d sum.plus(money);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Equals (insensitive to scale)."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return true only if the amounts are equal."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Currencies must match. This method is not synonymous with the equals method."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean eq(Object aThat){"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003d\u003d 0;"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean gt(Object aThat){"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003e 0;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean gteq(Object aThat){"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003e\u003d 0;"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean lt(Object aThat){"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003c 0;"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean lteq(Object aThat){"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003c\u003d 0;"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Multiply this Money by an integral factor."
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The scale of the returned Money is equal to the scale of \u0027this\u0027"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Money."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money times(int aFactor){"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        BigDecimal factor \u003d new BigDecimal(aFactor);"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        BigDecimal newAmount \u003d fAmount.multiply(factor);"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(newAmount, fCurrency, fRounding);"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Multiply this Money by an non-integral factor (having a decimal point)."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money times(double aFactor){"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        BigDecimal newAmount \u003d fAmount.multiply(asBigDecimal(aFactor));"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        newAmount \u003d newAmount.setScale(getNumDecimalsForCurrency(), fRounding);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return  new Money(newAmount, fCurrency, fRounding);"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * getAmount().getPlainString() + space + getCurrency().getSymbol()."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The return value uses the default locale/currency, and will not"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * always be suitable for display to an end user."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString(){ return repMoney; }"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * This equal is sensitive to scale."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * For example, 10 is not equal to 10.00"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The eq method, on the other hand, is not"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * sensitive to scale."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object aThat){"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (this \u003d\u003d aThat) return true;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (! (aThat instanceof Money) ) return false;"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //the object fields are never null :"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        boolean result \u003d (this.fAmount.equals(that.fAmount) );"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        result \u003d result \u0026\u0026 (this.fCurrency.equals(that.fCurrency) );"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        result \u003d result \u0026\u0026 (this.fRounding \u003d\u003d that.fRounding);"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode(){"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( fHashCode \u003d\u003d 0 ) {"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fHashCode \u003d HASH_SEED;"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fHashCode \u003d HASH_FACTOR * fHashCode + fAmount.hashCode();"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fHashCode \u003d HASH_FACTOR * fHashCode + fCurrency.hashCode();"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fHashCode \u003d HASH_FACTOR * fHashCode + fRounding.hashCode();"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fHashCode;"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Compare by amount, then currency and rounding method."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aThat"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int compareTo(Money aThat) {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final int EQUAL \u003d 0;"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( this \u003d\u003d aThat ) return EQUAL;"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //the object fields are never null"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int comparison \u003d this.fAmount.compareTo(aThat.fAmount);"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( comparison !\u003d EQUAL ) return comparison;"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        comparison \u003d this.fCurrency.getCurrencyCode().compareTo("
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                aThat.fCurrency.getCurrencyCode()"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        );"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( comparison !\u003d EQUAL ) return comparison;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        comparison \u003d this.fRounding.compareTo(aThat.fRounding);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( comparison !\u003d EQUAL ) return comparison;"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return EQUAL;"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void checkNotNull(BigDecimal aAmount, Currency aCurrency, RoundingMode aRoundingStyle){"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if( aAmount \u003d\u003d null ) {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"Amount cannot be null\");"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if( aCurrency \u003d\u003d null ) {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"Currency cannot be null\");"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if( aRoundingStyle \u003d\u003d null) {"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"rounding style cannot be null\");"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( aAmount.scale() \u003e aCurrency.getDefaultFractionDigits() ) {"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \"Number of decimals is \" + aAmount.scale() + \", but currency only takes \" +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                            aCurrency.getDefaultFractionDigits() + \" decimals.\""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private int getNumDecimalsForCurrency(){"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fCurrency.getDefaultFractionDigits();"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * throw new exception if the other Monday is not the same currency."
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aThat"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void checkCurrenciesMatch(Money aThat){"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (! this.fCurrency.equals(aThat.getCurrency())) {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new MismatchedCurrencyException("
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    aThat.getCurrency() + \" doesn\u0027t match the expected currency : \" + fCurrency"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void checkObjectIsMoney(Object aThat) {"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (! (aThat instanceof Money) ) {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ObjectNotMoneyException("
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    aThat.getClass() + \" doesn\u0027t match with Money class\""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Ignores scale: 0 same as 0.00 */"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private int compareAmount(Money aThat){"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.fAmount.compareTo(aThat.fAmount);"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private BigDecimal asBigDecimal(double aDouble){"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String asString \u003d Double.toString(aDouble);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new BigDecimal(asString);"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "} "
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\Category.java"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * The unique categories of the product."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees:"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String CATEGORY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_CATEGORY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \"Category should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * String representation for the category class."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidCategory(categoryName), MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.value \u003d categoryName;"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(CATEGORY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() { return value.hashCode(); }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 this.value.equals(((Category) other).value)); // state check"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\exceptions\\ProductNotFoundException.java"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductNotFoundException extends Exception {"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductNotFoundException() {"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(\"Product not found!\");"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "};"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\Product.java"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * presents the product offered in the retail store."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Attributes: name, price, category"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Product {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int productCounter \u003d 0;"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final ProductName name;"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Money price;"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product(ProductName name, Money price, Category category) {"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireAllNonNull(name, price, category);"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d ++productCounter;"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a product with specified id. Used for regenerating product list from storage."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that this sets the productCounter to the maximum id added into the list, to ensure distinctness of"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "     * product ids."
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param price"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param category"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "    public Product(int id, ProductName name, Money price, Category category) {"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": "        productCounter \u003d Math.max(productCounter, id);"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int getId() { return id; }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductName getName() { return name; }"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money getPrice() { return price; }"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Category getCategory() { return category; }"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof Product)) {"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product otherPerson \u003d (Product) other;"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return otherPerson.getName().equals(this.getName());"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(getCategory());"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\ProductName.java"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a Person\u0027s ProductName in the address book."
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidProductName(String)}"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductName {"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_PRODUCT_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \"Product Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PRODUCT_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final String fullProductName;"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code ProductName}."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param ProductName A valid ProductName."
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductName(String ProductName) {"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(ProductName);"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidProductName(ProductName), MESSAGE_PRODUCT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.fullProductName \u003d ProductName;"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid person ProductName."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidProductName(String test) {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(PRODUCT_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fullProductName;"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof ProductName // instanceof handles nulls"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 this.fullProductName.equals(((ProductName) other).fullProductName)); // state check"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fullProductName.hashCode();"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\MainWindow.java"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private OrderListPanel orderListPanel;"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ProductListPanel productListPanel;"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\MainWindow.java"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane productListPanelPlaceholder;"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane orderListPanelPlaceholder;"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\MainWindow.java"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\MainWindow.java"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanel \u003d new ProductListPanel(logic.getFilteredProductList());"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanelPlaceholder.getChildren().add(productListPanel.getRoot());"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListPanel \u003d new OrderListPanel(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListPanelPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\MainWindow.java"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.show();"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.personListPanel;"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\OrderCard.java"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An UI component that displays information of a {@code Order}."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"OrderListCard.fxml\";"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final Order order;"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label personId;"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private FlowPane subOrders;"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label totalPrice;"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(Integer.toString(displayedIndex));"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        personId.setText(order.getPersonId());"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        id.setText(Integer.toString(order.getId()));"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "        time.setText(order.getTime().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)));"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "        order.getSubOrders().forEach(subOrder -\u003e"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                subOrders.getChildren().add("
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "                        createProductBox(subOrder)"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        subOrders.setHgap(10);"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "        totalPrice.setText(\"Total: \" + order.getOrderTotal());"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "    private VBox createProductBox (SubOrder subOrder) {"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        VBox box \u003d new VBox();"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ObservableList list \u003d box.getChildren();"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "        Label id \u003d new Label(subOrder.toString());"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(id);"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return box;"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof OrderCard)) {"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCard card \u003d (OrderCard) other;"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 order.equals(card.order);"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\OrderListPanel.java"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Panel containing the list of orders."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"OrderListPanel.fxml\";"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ListView\u003cOrderCard\u003e orderListView;"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setConnections(orderList);"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setConnections(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ObservableList\u003cOrderCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                orderList, (order) -\u003e new OrderCard(order, order.getId()));"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListView.setItems(mappedList);"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        logger.fine(\"Selection in order list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        raise(new OrderPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                });"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Scrolls to the {@code OrderCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            orderListView.scrollTo(index);"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            orderListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code OrderCard}."
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    class OrderListViewCell extends ListCell\u003cOrderCard\u003e {"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        protected void updateItem(OrderCard order, boolean empty) {"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(order.getRoot());"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ProductCard.java"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An UI component that displays information of a {@code Product}."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"ProductListCard.fxml\";"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final Product product;"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCard(Product product, int displayedIndex) {"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(Integer.toString(displayedIndex));"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        name.setText(product.getName().fullProductName);"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        price.setText(product.getPrice().repMoney);"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        category.setText(\"- \" + product.getCategory().value);"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof ProductCard)) {"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCard card \u003d (ProductCard) other;"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 product.equals(card.product);"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ProductListPanel.java"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Panel containing the list of products."
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"ProductListPanel.fxml\";"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProductListPanel.class);"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ListView\u003cProductCard\u003e productListView;"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductListPanel(ObservableList\u003cProduct\u003e productList) {"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setConnections(productList);"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setConnections(ObservableList\u003cProduct\u003e productList) {"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ObservableList\u003cProductCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                productList, (product) -\u003e new ProductCard(product, product.getId()));"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.setItems(mappedList);"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.setCellFactory(listView -\u003e new ProductListViewCell());"
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        logger.fine(\"Selection in product list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        raise(new ProductPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                });"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Scrolls to the {@code ProductCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            productListView.scrollTo(index);"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            productListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ProductCard}."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    class ProductListViewCell extends ListCell\u003cProductCard\u003e {"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        protected void updateItem(ProductCard product, boolean empty) {"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            super.updateItem(product, empty);"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (empty || product \u003d\u003d null) {"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(product.getRoot());"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 4,
      "-": 470,
      "YingxuH": 935
    }
  },
  {
    "path": "collated/functional/lowjiajin.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "# lowjiajin"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\FindProductByCategoryCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Lists all product from the specified category"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindProductByCategoryCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findproductbycategory\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose categories contain any of \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" food\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String message \u003d Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ProductCategoryContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindProductByCategoryCommand(ProductCategoryContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForListShownSummary(model.getFilteredProductList().size(), message));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindProductByCategoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindProductByCategoryCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\FindProductByNameCommand.java"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindProductByNameCommand extends Command {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findproductbyname\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose names contain any of \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" egg\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String message \u003d Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ProductNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindProductByNameCommand(ProductNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForListShownSummary(model.getFilteredProductList().size(), message));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindProductByNameCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindProductByNameCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\FindProductByPriceCommand.java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Lists all the products which prices lie within the specified interval."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindProductByPriceCommand extends Command {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findproductbyprice\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose price lies within \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified min/max (inclusive) interval and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: min/NUMBER max/NUMBER\\n\""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            + String.format(\"Example: %1$s %2$s10 %3$s15\","
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "                    COMMAND_WORD, PREFIX_MIN_PRICE.getPrefix(), PREFIX_MAX_PRICE.getPrefix());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String message \u003d Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ProductCostsBetweenPredicate predicate;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindProductByPriceCommand(ProductCostsBetweenPredicate predicate) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForListShownSummary(model.getFilteredProductList().size(), message));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindProductByPriceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindProductByPriceCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ListProductCommand.java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all products in the address book to the user."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListProductCommand extends Command {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listproduct\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all products\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\RecommendCommand.java"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Finds recommendations for which products a given person is likely to buy"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecommendCommand extends Command {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recommend\";"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Recommendations for: %1$s\\n\" +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            \"Output format: [\u003cproduct name, probability of buying\u003e...]\\n\" +"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            \"%2$s\";"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the products most likely to be bought by the \" +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            \"person identified by the index number used in the last person listing.\\n\" +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Parameters: INDEX (must be a positive integer)\\n\" +"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Example:\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ARFF_NAME \u003d \"data/Orders.arff\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ReadOnlyAddressBook addressBook;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Person personToRecommendFor;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecommendCommand(Index targetIndex, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        personToRecommendFor \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        RecommenderManager recommenderManager \u003d new RecommenderManager(ARFF_NAME, addressBook);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        String recommendations \u003d recommenderManager.getRecommendations(personToRecommendFor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, personToRecommendFor.getName(), recommendations));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindProductByCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindProductByCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindProductByNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindProductByNameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindProductByPriceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindProductByPriceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListProductCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        case RecommendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RecommendCommandParser(addressBook).parse(arguments);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\FindProductByCategoryCommandParser.java"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Parses input arguments and creates a new FindProductByCategoryCommand object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindProductByCategoryCommandParser implements Parser\u003cFindProductByCategoryCommand\u003e {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindProductByCategoryCommand"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * and returns a FindProductByCategoryCommand object for execution."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindProductByCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindProductByCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String[] categoryKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindProductByCategoryCommand("
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                new ProductCategoryContainsKeywordsPredicate(Arrays.asList(categoryKeywords)));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\FindProductByNameCommandParser.java"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindProductByNameCommandParser implements Parser\u003cFindProductByNameCommand\u003e {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindProductByNameCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindProductByNameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] categoryKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        return new FindProductByNameCommand("
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                new ProductNameContainsKeywordsPredicate(Arrays.asList(categoryKeywords)));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\FindProductByPriceCommandParser.java"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Parses input arguments and creates a new FindProductByPriceCommand object"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindProductByPriceCommandParser implements Parser\u003cFindProductByPriceCommand\u003e {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Parses the given {@code String} of arguments for the min and max price delimiters of the"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * FindProductByPriceCommand and returns a FindProductByPriceCommand object for execution."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindProductByPriceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MIN_PRICE, PREFIX_MAX_PRICE);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Ensures that the input conforms to the min and max price argument delimiters."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MIN_PRICE, PREFIX_MAX_PRICE)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindProductByPriceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "            Money minPrice \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_MIN_PRICE)).get();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            Money maxPrice \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_MAX_PRICE)).get();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindProductByPriceCommand(new ProductCostsBetweenPredicate(minPrice, maxPrice));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\RecommendCommandParser.java"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Parses input arguments and creates a new RecommendCommand object"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecommendCommandParser implements Parser\u003cRecommendCommand\u003e {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private ReadOnlyAddressBook addressBook;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecommendCommand"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * and returns a RecommendCommand object for execution."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecommendCommandParser(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecommendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RecommendCommand(index, addressBook);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecommendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\recommender\\ArffFormatter.java"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Controls how the training data is formatted into header and data entries of the .arff format."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ArffFormatter {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String PREFIX_NOT \u003d \"!\";"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String WEKA_DELIMITER \u003d \",\";"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final HashMap\u003cInteger, String\u003e productIdToNameMap;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    "
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ArffFormatter(HashMap\u003cInteger, String\u003e productIdToNameMap) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.productIdToNameMap \u003d productIdToNameMap;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * For the header, a product is converted into two distinct classes for prediction:"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * to buy the product, or not to buy the product."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public String convertProductToBinaryLabels(Product product) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return String.format(\"%1$s%3$s %2$s%1$s\", productIdToNameMap.get(product.getId()), PREFIX_NOT, WEKA_DELIMITER);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Concatenates the {@code person}\u0027s features and his class (i.e. has bought a product or not) into an .arff entry"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public String formatDataEntry(Person person, Product product, HashSet\u003cInteger\u003e productsBoughtByPerson) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return String.format(\"%1$s%2$s\","
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                formatPersonFeatures(person), getProductClassLabel(product.getId(), productsBoughtByPerson));"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return the delimited training features"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    private String formatPersonFeatures(Person person) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return String.format(\"\\n%1$s%3$s%2$s%3$s\", person.getAge().value, person.getGender(), WEKA_DELIMITER);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Checks if product has been bought by a person and formats it as either a positive or negative class entry."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getProductClassLabel(Integer productId, HashSet\u003cInteger\u003e productsBoughtByPerson) {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean hasBoughtProduct \u003d productsBoughtByPerson.contains(productId);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        if (hasBoughtProduct) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "            return productIdToNameMap.get(productId);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            return PREFIX_NOT.concat(productIdToNameMap.get(productId));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\recommender\\ArffWriter.java"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Handles the writing of {@code addressBook}\u0027s data into an .arff file for recommender training."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ArffWriter {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    "
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String ARFF_HEADER \u003d \"@RELATION ConvertedOrders\\n\\n\""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"@ATTRIBUTE age NUMERIC\\n\""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"@ATTRIBUTE gender {M, F}\\n\""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"@ATTRIBUTE class {%s}\\n\\n\""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"@DATA\";"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ARFF_HEADER_WRITE_FAIL \u003d \"Failed to write .arff header information\""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" while building recommender training set.\";"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ARFF_DATA_WRITE_FAIL \u003d \"Failed to write .arff data entries\""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" while building recommender training set.\";"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ARFF_CREATION_FAIL \u003d \"Failed to create .arff\""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" while building recommender training set.\";"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ARFF_MAKE_CANNOT_CLOSE \u003d \"Failed to close .arff\""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" while building recommender training set.\";"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_WRITE \u003d \"Cannot write to .arff file.\";"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cProduct\u003e products;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cOrder\u003e orders;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final File arff;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ArffFormatter formatter;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ArffWriter(File arff, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.arff \u003d arff;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        products \u003d addressBook.getProductList();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        orders \u003d addressBook.getOrderList();"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        formatter \u003d new ArffFormatter(getProductIdToNameMap());"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Writes orders to file located at {@code arff}."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    public void makeArffFromOrders() {        "
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            BufferedWriter writer \u003d makeWriter();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "            writeArffHeader(writer);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            writeArffData(writer);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            closeArffFile(writer);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(String.format(\"%1$s.\\n%2$s\", MESSAGE_CANNOT_WRITE, ioe.getMessage()));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return HashMap which allows retrieval of a {@code product}\u0027s name with its numerical id as key."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private HashMap\u003cInteger, String\u003e getProductIdToNameMap() {"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        HashMap\u003cInteger, String\u003e productIdToNameMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Product product : products) {"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "            productIdToNameMap.put(product.getId(), product.getName().fullProductName);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "        "
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return productIdToNameMap;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Makes a directory for the .arff file if it doesn\u0027t already exist, then,"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return the new writer in erstwhile directory."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private BufferedWriter makeWriter() throws IOException {"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        arff.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return new BufferedWriter(new FileWriter(arff));"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new IOException(MESSAGE_ARFF_CREATION_FAIL);"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Writes both the positive and negative purchase decisions as classes to be predicted, for every product."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void writeArffHeader(BufferedWriter writer) throws IOException {"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "        String classLabels \u003d products.stream()"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                .map(formatter::convertProductToBinaryLabels).collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "            writer.write(String.format(ARFF_HEADER, classLabels));"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new IOException(MESSAGE_ARFF_HEADER_WRITE_FAIL);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void writeArffData(BufferedWriter writer) throws IOException {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap \u003d makeProductsBoughtMap();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            writeOrdersOfPersonToArff(person, productsBoughtMap, writer);"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return Map which allows retrieval of a set of all products a {@code person} has bought, "
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * keyed by {@code person}\u0027s id."
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Map\u003cString, HashSet\u003cInteger\u003e\u003e makeProductsBoughtMap() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "            recordWhichPersonBoughtWhichProduct(productsBoughtMap, order);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return productsBoughtMap;"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * For a given order, records the {@code person} as having bought the {@code product},"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * via {@code productsBoughtMap}."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    private void recordWhichPersonBoughtWhichProduct(Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap, Order order) {"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "        String personId \u003d order.getPersonId();"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        for (SubOrder suborder : order.getSubOrders()) {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "            if (productsBoughtMap.get(personId) \u003d\u003d null) {"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "                productsBoughtMap.put(personId, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "            productsBoughtMap.get(personId).add(suborder.getProductID());"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Write whether a {@code person} has purchased a {@code product} as a data entry in the .arff file,"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * for every {@code product} in the {@code addressBook}."
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    private void writeOrdersOfPersonToArff ("
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            Person person, Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap, BufferedWriter writer) throws IOException {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Product product : products) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                writer.write(formatter.formatDataEntry(person, product, "
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                        getProductsBoughtByPerson(person, productsBoughtMap)));"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new IOException(MESSAGE_ARFF_DATA_WRITE_FAIL);"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public HashSet\u003cInteger\u003e getProductsBoughtByPerson(Person person, Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Defaults to an empty set in cases where a {@code person} has never bought anything."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return productsBoughtMap.getOrDefault(person.getEmail().value, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void closeArffFile(BufferedWriter writer) throws IOException {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new IOException(MESSAGE_ARFF_MAKE_CANNOT_CLOSE);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\recommender\\BuyDecision.java"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Represents the confidence in the decision of whether to buy a given product, referenced by its {@code productName}."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Package private to Recommender."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "class BuyDecision implements Comparable\u003cBuyDecision\u003e {"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_COMPARING_NULL \u003d \"Cannot compare a BuyDecision with a null.\";"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private String productName;"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private double buyProb;"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    BuyDecision(String productName, double buyProb) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.buyProb \u003d buyProb;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private String getProductName() {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return productName;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private double getBuyProb() {"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return buyProb;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Used in sorting the recommendations by probability of purchase,"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * so the most confident recommendations are presented first."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public int compareTo(BuyDecision other) {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (!(other instanceof BuyDecision)) {"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_COMPARING_NULL);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return compare(other.getBuyProb(), buyProb);"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Controls how the each product\u0027s recommendation is displayed in the CLI output."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * {@code productName} and {@code buyProb} delimited with a colon and space."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return String.format(\"%1$s: %2$f\", productName, buyProb);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\recommender\\ProductTrainer.java"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Trains a classifier to predict whether or not one specific product will be bought."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ProductTrainer {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_ISOLATE_PRODUCT \u003d \"{@code isolator} has invalid settings for orders. \""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Error when isolating orders of a given product.\";"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_BUILD_CLASSIFIER \u003d \"{@code orders} format is invalid. \""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Error building classifier.\";"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_EVALUATE_CLASSIFIER \u003d \"Invalid parameters for \""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"{@code crossValidateModel()} method, or orders modified after classifier built. \""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Error evaluating classifier.\";"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final int WEKA_NUM_FEATURES_USED \u003d 2;"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int WEKA_MIN_ORDERS \u003d 5;"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final boolean WEKA_EVALUATE_CLASSIFIER \u003d false; // Flag to print evaluation data for debugging"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Instances orders;"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private AttributeSelectedClassifier attrSelClassifier;"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Evaluation evaluation;"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private boolean canBuild;"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ProductTrainer (Instances trainingOrders, RemoveWithValues isolator) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        orders \u003d trainingOrders;"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        isolateOrdersOfAProduct(isolator);"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        trainClassifier();"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean hasTrained() {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return canBuild;"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public AttributeSelectedClassifier getClassifier() {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assert attrSelClassifier !\u003d null; // Should not ever get the classifier before training it."
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return attrSelClassifier;"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Remove all orders not involving a given product from the training dataset."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Allows a binary decision on whether or not to buy a given product."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void isolateOrdersOfAProduct(RemoveWithValues isolator) {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            isolator.setInputFormat(orders);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            orders \u003d Filter.useFilter(orders, isolator);"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_ISOLATE_PRODUCT);"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    "
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void trainClassifier() {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (hasEnoughOrdersToTrain()) {"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            initClassifier();"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            buildClassifier();"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (WEKA_EVALUATE_CLASSIFIER) {"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            evaluateClassifier();"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Ensures that noise is suppressed by not recommending products with too few {@code orders}"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * to provide a reliable Recommender prediction."
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private boolean hasEnoughOrdersToTrain() {"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return orders.numInstances() \u003e\u003d WEKA_MIN_ORDERS;"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void initClassifier() {"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        attrSelClassifier \u003d new AttributeSelectedClassifier();"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Set classifier type"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        NaiveBayes bayes \u003d new NaiveBayes();"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        attrSelClassifier.setClassifier(bayes);"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Set feature evaluation criteria for classifier"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ChiSquaredAttributeEval chiEval \u003d new ChiSquaredAttributeEval();"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        attrSelClassifier.setEvaluator(chiEval);"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Set feature search criteria for classifier"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Ranker ranker \u003d new Ranker();"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ranker.setNumToSelect(WEKA_NUM_FEATURES_USED);"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        attrSelClassifier.setSearch(ranker);"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void buildClassifier() {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            attrSelClassifier.buildClassifier(orders);"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            canBuild \u003d true;"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            canBuild \u003d false;"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_BUILD_CLASSIFIER);"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void evaluateClassifier() {"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Should not ever evaluate classifier if it has failed to build, because there is no classifier to evaluate."
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assert canBuild;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            // Evaluates the classifier with a n-fold cross validation, where n \u003d {@code WEKA_MIN_ORDERS}"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            evaluation \u003d new Evaluation(orders);"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            evaluation.crossValidateModel(attrSelClassifier, orders, WEKA_MIN_ORDERS, new Random(1));"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "            System.out.println(orders.classAttribute());"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            System.out.println(evaluation.toSummaryString());"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_EVALUATE_CLASSIFIER);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\recommender\\Recommender.java"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * The logic that determines which products a person is most likely to buy for {@code RecommenderManager}."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class Recommender {"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Recommender theOne \u003d null;"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final int POSITIVE_CLASS_INDEX \u003d 0;"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_CLASSIFY_INSTANCE \u003d \"The attribute format has to match the classifier \""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"for the product to be classified.\";"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String AGE_ATTRIBUTE_NAME \u003d \"age\";"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String GENDER_ATTRIBUTE_NAME \u003d \"gender\";"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String CLASS_ATTRIBUTE_NAME \u003d \"class\";"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String INSTANCE_TYPE \u003d \"person\";"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final ArrayList\u003cString\u003e GENDER_NOMINALS \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"m\", \"f\"));"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "    private Recommender() {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "        // Empty constructor for singleton class"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Recommender createRecommender() {"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        if (theOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "            theOne \u003d new Recommender();"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        return theOne;"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Determines the likelihood of a person wanting to buy any product, assuming the product has a classifier,"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * and returns the decision as a string."
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public String getRecommendations("
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            ArrayList\u003cString\u003e productsWithClassifiers, Person person, HashMap\u003cString, Classifier\u003e classifierDict) {"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        Instance personInstance \u003d parsePerson(person);"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ArrayList\u003cBuyDecision\u003e productRecOfAPerson \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Goes through every product with enough orders to allow a recommendation and records the recommendation"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c productsWithClassifiers.size(); i++) {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "            String currentProductPredicted \u003d productsWithClassifiers.get(i);"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "            Classifier classifier \u003d classifierDict.get(currentProductPredicted);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            BuyDecision decision \u003d getBuyDecision(currentProductPredicted, classifier, personInstance);"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            productRecOfAPerson.add(decision);"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return getFormattedRecs(productRecOfAPerson);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts the feature data from a {@code person} and turns them into a {@code DenseInstance} for classification."
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "    private Instance parsePerson(Person person) {"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Set up the person as a Weka instance"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ArrayList\u003cAttribute\u003e attributes \u003d getAttributes();"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Instances persons \u003d new Instances(INSTANCE_TYPE, attributes, 1);"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Instance personInstance \u003d new DenseInstance(attributes.size());"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Assign values to the aforementioned instance"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": "        personInstance.setDataset(persons);"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "        personInstance.setValue(0, Double.parseDouble(person.getAge().value));"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "        personInstance.setValue(1, person.getGender().value.toLowerCase());"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "        return personInstance;"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Sets up the age and gender as classification features."
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return the ArrayList of features, with the class (i.e. whether person will buy) to be predicted."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ArrayList\u003cAttribute\u003e getAttributes() {"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Attribute ageAttribute \u003d new Attribute(AGE_ATTRIBUTE_NAME);"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Attribute genderAttribute \u003d new Attribute(GENDER_ATTRIBUTE_NAME, GENDER_NOMINALS);"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Attribute classAttribute \u003d new Attribute(CLASS_ATTRIBUTE_NAME, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new ArrayList\u003cAttribute\u003e(Arrays.asList(ageAttribute, genderAttribute, classAttribute));"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Uses Weka\u0027s {@code distributionForInstance} to obtain the probability of confidence in the buy decision."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private BuyDecision getBuyDecision(String currentProductPredicted, Classifier classifier, Instance personInstance) {"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        double buyProb \u003d 0;"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            buyProb \u003d classifier.distributionForInstance(personInstance)[POSITIVE_CLASS_INDEX];"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_CLASSIFY_INSTANCE);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new BuyDecision(currentProductPredicted, buyProb);"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Sorts the recommendations so the most confident recommendations come first."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return the recommendations as a String."
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private String getFormattedRecs(ArrayList\u003cBuyDecision\u003e productRecOfAPerson) {"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Collections.sort(productRecOfAPerson);"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return Arrays.toString(productRecOfAPerson.toArray());"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\recommender\\RecommenderManager.java"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages the training of the recommendations classifier, and its subsequent use on a new {@code person}."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "public class RecommenderManager {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_INVALID_ARFF_PATH \u003d \"%1$s does not refer to a valid ARFF file.\";"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ERROR_READING_ARFF \u003d \"File name or format invalid, error reading ARFF.\";"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_CLOSE_READER \u003d \"Cannot close ARFF reader, reader still in use.\";"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_BAD_REMOVER_SETTINGS \u003d \"{@code WEKA_REMOVER_SETTINGS} has invalid value.\";"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ORDERS_IS_NULL \u003d \"Cannot classify with a lack of orders in .arff.\""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" Check data entries in file.\";"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WEKA_REMOVER_SETTINGS \u003d \"-S 0.0 -C last -L %1$d-%2$d -V -H\";"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private File arff;"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Instances orders;"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private RemoveWithValues isolator;"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private HashMap\u003cString, Classifier\u003e classifierDict;"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e productsWithClassifiers;"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param arffPath the data folder where the .arff orders file is stored."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "    public RecommenderManager(String arffPath, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        setTrainerFile(arffPath);"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "        writeOrdersAsTraningData(addressBook);"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        parseOrdersFromFile();"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        trainRecommenderOnOrders();"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void setTrainerFile(String path) {"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        arff \u003d new File(path);"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sends previously computed {@code classifierDict} to the Recommender logic to obtain a list of recommended buys"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "     * for the given {@code person}, for all the products with sufficient {@code orders} to make a recommendation."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getRecommendations(Person person) {"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": "        Recommender recommender \u003d createRecommender();"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "        return recommender.getRecommendations(productsWithClassifiers, person, classifierDict);"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": "    private void writeOrdersAsTraningData(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ArffWriter arffWriter \u003d new ArffWriter(arff, addressBook);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": "        arffWriter.makeArffFromOrders();"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void parseOrdersFromFile() {"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        getReaderFromArff();"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        getOrdersFromReader();"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        closeReader();"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a binary classifier (i.e. a yes/no recommender) for every product to {@code classifierDict}"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "     * iff a given {@code trainer} can successfully perform the classifier training."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void trainRecommenderOnOrders() {"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "            if (orders \u003d\u003d null) {"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_ORDERS_IS_NULL);"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "        classifierDict \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": "        productsWithClassifiers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Obtain distinct classifiers for each product to determine if a customer would buy that specific product"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        int numOfProducts \u003d orders.classAttribute().numValues();"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int productNum \u003d 0; productNum \u003c numOfProducts; productNum +\u003d 2) {"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            initOrderIsolator(productNum);"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            ProductTrainer trainer \u003d new ProductTrainer(orders, isolator);"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            if (trainer.hasTrained()) {"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                addClassifier(productNum, trainer);"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "    private void getReaderFromArff() {"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(arff));"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(String.format(MESSAGE_INVALID_ARFF_PATH, arff));"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void getOrdersFromReader() {"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            orders \u003d new Instances(reader);"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            orders.setClassIndex(orders.numAttributes() - 1);"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_ERROR_READING_ARFF);"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void closeReader() {"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_CLOSE_READER);"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "     * Subsamples from our {@code orders}, only including orders from a given product, for binary classification use."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param productNum index referring to a specific product in Weka\u0027s Instances."
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void initOrderIsolator(int productNum) {"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assert productNum \u003c orders.classAttribute().numValues();"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        isolator \u003d new RemoveWithValues();"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": "            isolator.setOptions(weka.core.Utils.splitOptions(String.format("
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "                    WEKA_REMOVER_SETTINGS, productNum + 1, productNum + 2)));"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_BAD_REMOVER_SETTINGS);"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds the new classifier in {@code trainer} to {@code classifierDict} and"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "     * records this addition in {@code productsWithClassifiers}"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void addClassifier(int productNum, ProductTrainer trainer) {"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String productId \u003d orders.classAttribute().value(productNum);"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Classifier classifier \u003d trainer.getClassifier();"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Every classifier should never overwrite an existing one in each training cycle, as productID is primary key."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assert classifierDict.get(productId) \u003d\u003d null;"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        classifierDict.put(productId, classifier);"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "        productsWithClassifiers.add(productId);"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBook.java"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": "            setProducts(newData.getProductList());"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateProductException dpe) {"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": "            setOrders(newData.getOrderList());"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateOrderException doe) {"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\order\\exceptions\\DuplicateOrderException.java"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Order objects."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicateOrderException extends DuplicateDataException {"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicateOrderException() {"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate orders\");"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\order\\UniqueOrderList.java"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of products that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Order#equals(Object)"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an order"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Order toCheck) {"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a new order to the list"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toAdd unique new order to be added. It shouldn\u0027t exist in list."
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Order toAdd) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws OrderNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean remove(Order toRemove) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean orderFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!orderFoundAndDeleted) {"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "        return orderFoundAndDeleted;"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets an order list to a new one."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param replacement the new list"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setOrders(UniqueOrderList replacement) {"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a new order list based on a list of distinct order objects."
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param orders list of orders"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(orders);"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueOrderList replacement \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "        for (final Order order : orders) {"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "            replacement.add(order);"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "        setOrders(replacement);"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateOrderException if the replacement is equivalent to another existing order in the list."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws OrderNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setOrder(Order target, Order editedOrder)"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicateOrderException, OrderNotFoundException {"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.equals(editedOrder) \u0026\u0026 internalList.contains(editedOrder)) {"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedOrder);"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cOrder\u003e asObservableList() {"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\exceptions\\DuplicateProductException.java"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": " * Signals that the operation will result in duplicate Person objects."
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "public class DuplicateProductException extends DuplicateDataException {"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "    public DuplicateProductException() {"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": "        super(\"Operation would result in duplicate products\");"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\ProductCategoryContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "public class ProductCategoryContainsKeywordsPredicate implements Predicate\u003cProduct\u003e {"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "    public ProductCategoryContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Product product) {"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(product.getCategory().value, keyword));"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ProductCategoryContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((ProductCategoryContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\ProductCostsBetweenPredicate.java"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "public class ProductCostsBetweenPredicate implements Predicate\u003cProduct\u003e {"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Money minPrice;"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Money maxPrice;"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "    public ProductCostsBetweenPredicate(Money minPrice, Money maxPrice) {"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "        this.minPrice \u003d minPrice;"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "        this.maxPrice \u003d maxPrice;"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Product product) {"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": "        return product.getPrice().compareTo(minPrice) \u003e\u003d 0 \u0026\u0026 product.getPrice().compareTo(maxPrice) \u003c\u003d 0;"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ProductCostsBetweenPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.minPrice.equals(((ProductCostsBetweenPredicate) other).minPrice)"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.maxPrice.equals(((ProductCostsBetweenPredicate) other).maxPrice)); // state check"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\ProductNameContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "public class ProductNameContainsKeywordsPredicate implements Predicate\u003cProduct\u003e {"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "    public ProductNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Product product) {"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(product.getName().fullProductName, keyword));"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ProductNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((ProductNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\UniqueProductList.java"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of products that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Product#equals(Object)"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueProductList implements Iterable\u003cProduct\u003e {"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cProduct\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent product as the given argument."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Product toCheck) {"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a product to the list."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateProductException if the product to add is a duplicate of an existing product in the list."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Product toAdd) throws DuplicateProductException {"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateProductException if the replacement is equivalent to another existing product in the list."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ProductNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setProduct(Product target, Product editedProduct)"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicateProductException, ProductNotFoundException {"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedProduct);"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!target.equals(editedProduct) \u0026\u0026 internalList.contains(editedProduct)) {"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.set(index, editedProduct);"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the equivalent product from the list."
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ProductNotFoundException if no such product could be found in the list."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean remove(Product toRemove) throws ProductNotFoundException {"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": "        final boolean productFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!productFoundAndDeleted) {"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "        return productFoundAndDeleted;"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setProducts(UniqueProductList replacement) {"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setProducts(List\u003cProduct\u003e products) throws DuplicateProductException {"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(products);"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueProductList replacement \u003d new UniqueProductList();"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "        for (final Product product : products) {"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "            replacement.add(product);"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "        setProducts(replacement);"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cProduct\u003e asObservableList() {"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cProduct\u003e iterator() {"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueProductList // instanceof handles nulls"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueProductList) other).internalList));"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\util\\SampleDataUtil.java"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alex@example.com\"),"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Gender(\"M\"), new Age(\"15\"),"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new Latitude(\"1.339160\"), new Longitude(\"103.745133\"),getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"bernice@example.com\"),"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Gender(\"F\"), new Age(\"15\"),"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new Latitude(\"1.389889\"), new Longitude(\"103.726903\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Gender(\"F\"),new Age(\"56\"),"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new Latitude(\"1.379932\"), new Longitude(\"103.852374\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"david@example.com\"),"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Gender(\"M\"), new Age(\"23\"),"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new Latitude(\"1.363222\"), new Longitude(\"103.883062\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Gender(\"M\"), new Age(\"77\"),"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new Latitude(\"1.357340\"), new Longitude(\"103.890084\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"roy@example.com\"),"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Gender(\"M\"), new Age(\"48\"),"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new Latitude(\"1.327898\"), new Longitude(\"103.907420\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Tan Roo Yang\"), new Phone(\"97776590\"), new Email(\"rooyang@example.com\"),"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Blk 55 Tiong Bahru Lorong 4, #03-10\"), new Gender(\"M\"), new Age(\"23\"),"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new Latitude(\"1.250828\"), new Longitude(\"103.832659\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Linda Gao\"), new Phone(\"81226734\"), new Email(\"linda@example.com\"),"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"Rio Casa, Punggol Avenue 8, #05-33\"), new Gender(\"F\"), new Age(\"22\"),"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "                new Latitude(\"1.339416\"), new Longitude(\"103.745100\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": "            new Person(new Name(\"Zelene Quek\"), new Phone(\"81226734\"), new Email(\"zelene@example.com\"),"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "                new Address(\"12D Philips Avenue\"), new Gender(\"F\"), new Age(\"61\"),"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new Latitude(\"1.357639\"), new Longitude(\"104.014221\"), getTagSet(\"family\"))"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Product[] getSampleProducts() {"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Product[] {"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "            new Product(new ProductName(\"TrendyShirt\"), new Money(new BigDecimal(12)),"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": "                new Category(\"Clothing\")),"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "            new Product(new ProductName(\"Dentures\"), new Money(new BigDecimal(200)),"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "                new Category(\"Healthcare\")),"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": "            new Product(new ProductName(\"Lipstick\"), new Money(new BigDecimal(30)),"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "                new Category(\"Cosmetics\")),"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": "            new Product(new ProductName(\"Toothbrush\"), new Money(new BigDecimal(5)),"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": "                new Category(\"Healthcare\"))"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Order[] getSampleOrders() {"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Order[] {"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": "            new Order(\"alex@example.com\", Stream.of("
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(12))),"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(4, 1, new Money(new BigDecimal(6)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "            new Order(\"bernice@example.com\", Stream.of("
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(12))),"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(3, 1, new Money(new BigDecimal(30)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": "            new Order(\"charlotte@example.com\", Stream.of("
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(2, 1, new Money(new BigDecimal(200))),"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(3, 1, new Money(new BigDecimal(29)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": "            new Order(\"david@example.com\", Stream.of("
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(12)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "            new Order(\"irfan@example.com\", Stream.of("
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(2, 1, new Money(new BigDecimal(200))),"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(4, 1, new Money(new BigDecimal(5)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": "            new Order(\"roy@example.com\", Stream.of("
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(4, 1, new Money(new BigDecimal(4)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": "            new Order(\"rooyang@example.com\", Stream.of("
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(13)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "            new Order(\"linda@example.com\", Stream.of("
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(12))),"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(3, 1, new Money(new BigDecimal(30))),"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(4, 1, new Money(new BigDecimal(5)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": "            new Order(\"zelene@example.com\", Stream.of("
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": "                    new SubOrder(2, 1, new Money(new BigDecimal(230)))).collect(Collectors.toList()))"
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": "        };"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Product sampleProduct : getSampleProducts()) {"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addProduct(sampleProduct);"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Order sampleOrder : getSampleOrders()) {"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addOrder(sampleOrder);"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateProductException e) {"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate products\", e);"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateOrderException e) {"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate orders\", e);"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 8,
      "lowjiajin": 583,
      "-": 764
    }
  },
  {
    "path": "collated/functional/qinghao1.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "# qinghao1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddOrderCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds an order to the address book"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddOrderCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addorder\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Creates new order given a person\u0027s email, and at least one (Product ID, Quantity, Price)\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL (Must be an existing person) \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_SUBORDER + \"Product ID, Quantity, Price\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"john@example.com \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_SUBORDER + \"1 5 $3.00 \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_SUBORDER + \"2 4 $2.50 \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_SUBORDER + \"3 1 $100 \";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New order added.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the app.\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER \u003d \"The order is invalid. Check that the person and products exist.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Order toAdd;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an {@code AddOrderCommand} to add the specified {@code Order}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddOrderCommand(Order order) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d order;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that the {@code AddOrderCommand} is valid (i.e. {@code Order} to be created is valid)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook ab \u003d this.model.getAddressBook();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return toAdd.isValid(ab.getPersonList(), ab.getProductList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        //Check that order is valid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValid()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            //If order invalid, decrement order counter because it was incremented during creation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Order.decrementOrderCounter();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addOrder(toAdd);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicateOrderException e) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddOrderCommand) other).toAdd));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\DeleteOrderCommand.java"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Deletes a order identified using its id from the address book."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DeleteOrderCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteorder\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \": Deletes the order identified by its id.\\n\""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: ID (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER \u003d \"The order is invalid. Check that the order ID is correct.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final int targetID;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Order orderToDelete;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeleteOrderCommand(int targetID) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.targetID \u003d targetID;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(orderToDelete);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            model.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (OrderNotFoundException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"The target order cannot be missing.\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderToDelete \u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOrdersMatching \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        //There should only be one order that matches the ID, but we check anyway"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        for (Order order : lastShownList) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            if (order.getId() \u003d\u003d targetID) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                orderToDelete \u003d order;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                ++numberOrdersMatching;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (orderToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } else if (numberOrdersMatching \u003e 1) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            //There are more than 1 order in the list with same ID! This should never happen."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(\"More than 1 order with ID \" + targetID + \" found.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 this.targetID \u003d\u003d ((DeleteOrderCommand) other).targetID // state check"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 Objects.equals(this.orderToDelete, ((DeleteOrderCommand) other).orderToDelete));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\FindCommand.java"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        //Get emails of filtered people"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        for(Person person : this.model.getFilteredPersonList()) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            emails.add(person.getEmail().toString());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        //Create predicate to filter order list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderBelongsToPeoplePredicate orderBelongsToPeoplePredicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update order list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredOrderList(orderBelongsToPeoplePredicate);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForListShownSummary(model.getFilteredPersonList().size(), message));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ListCommand.java"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        //Get emails of filtered people"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        for(Person person : this.model.getFilteredPersonList()) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            emails.add(person.getEmail().toString());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        //Create predicate to filter order list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderBelongsToPeoplePredicate orderBelongsToPeoplePredicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update order list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredOrderList(orderBelongsToPeoplePredicate);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddOrderCommandParser.java"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddOrderCommand object"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EMAIL, PREFIX_SUBORDER);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EMAIL, PREFIX_SUBORDER)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "            //Note: We use email String as Order foreign key"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "            String email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get().toString();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cSubOrder\u003e subOrderList \u003d"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                    ParserUtil.parseSubOrders(argMultimap.getAllValues(PREFIX_SUBORDER));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "            Order order \u003d new Order(email, subOrderList);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddOrderCommand(order);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty values in the given"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\order\\Order.java"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a customer\u0027s order."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: field values are validated and immutable"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int orderCounter \u003d 0;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    private final String personId;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cSubOrder\u003e subOrders;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds order with personId(email) and list of suborders. Every field must be present and not null."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personId id of person (customer) who made the order. Can be thought of as a foreign key"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param subOrders ArrayList of triple(product id, number bought, price) to represent the order"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public Order(String personId, List\u003cSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d ++orderCounter;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds order with person object instead of email string. To be used for debugging, testing etc."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param subOrders"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public Order(Person person, List\u003cSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d ++orderCounter;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        this.personId \u003d person.getEmail().toString();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a order with specified id and time. Used for regenerating order list from storage."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that this sets the orderCounter to the maximum id added into the list, to ensure distinctness of"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * order ids."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param personId"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param subOrders"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public Order(int id, String personId, LocalDateTime time, List\u003cSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        orderCounter \u003d Math.max(orderCounter, id);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a order with specified id and time, using Person object instead of email string."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * For debugging, testing, etc."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param subOrders"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    public Order(int id, Person person, LocalDateTime time, List\u003cSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        this.personId \u003d person.getEmail().toString();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        orderCounter \u003d Math.max(orderCounter, id);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns ID(i.e. email) of person who made the order."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPersonId() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        return personId;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns order ID"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns time of order"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     * Gets the details of the products and prices for an order."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return List of (Product ID, Number bought, Price)"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cSubOrder\u003e getSubOrders() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        return subOrders;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calculates total price (sum) of an order"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return total price"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    public Money getOrderTotal() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        Money total \u003d new Money();"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        for (SubOrder subOrder : subOrders) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "            Money subOrderPrice \u003d subOrder.getTotalPrice();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            total \u003d total.plus(subOrderPrice);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs some basic checks to see if order is valid."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "     * - Checks that the order isn\u0027t empty"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "     * - Checks that customer email is valid"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     * - Checks that all product IDs exist"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     * - Checks that order price is non-negative"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param customers list of all customers to check email against"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param products list of all products to check product ID against"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return validity"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isValid(List\u003cPerson\u003e customers, List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean valid \u003d true;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "        //Check that SubOrder list is non-empty"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        valid \u003d !subOrders.isEmpty() \u0026\u0026 valid;  // Trip valid to false if list is empty"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        //Check that email is valid"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean foundEmail \u003d false;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person customer : customers) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            String email \u003d customer.getEmail().toString();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "            if (email.equals(personId)) {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "                foundEmail \u003d true;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        valid \u003d foundEmail \u0026\u0026 valid;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        //Check that productIDs are valid (using SubOrder class)"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean allSubOrdersValid \u003d true;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        for (SubOrder subOrder : subOrders) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!subOrder.isValid(products)) {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "                allSubOrdersValid \u003d false;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "        valid \u003d allSubOrdersValid \u0026\u0026 valid;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        // Check that total order price is non-negative"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean negativeOrderPrice \u003d this.getOrderTotal().isMinus();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        valid \u003d !negativeOrderPrice \u0026\u0026 valid;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        return valid;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "     * Decrements order counter. To be used when deleting invalid order."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void decrementOrderCounter() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        orderCounter \u003d Math.max(orderCounter - 1, 0);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a table in string format which is the order summary (product id, number bought, price, total price)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nOrder ID \");"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(id);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\" by \");"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(personId);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\" at \");"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(time.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)));"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\":\\n\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"-------------\\n\");"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        int subOrderCt \u003d 0;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        for (SubOrder so : subOrders) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(++subOrderCt);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(\"- \");"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(so.toString());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "            sb.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"-------------\\n\");"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Total: \");"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(getOrderTotal());"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\n-------------\\n\");"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this ||"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                ((other instanceof Order) \u0026\u0026"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "                        ((Order) other).getPersonId().equals(this.getPersonId()) \u0026\u0026"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                        ((Order) other).getId() \u003d\u003d this.getId() \u0026\u0026"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "                        ((Order) other).getSubOrders() \u003d\u003d this.getSubOrders()"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "                );"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\order\\OrderBelongsToPeoplePredicate.java"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": " * Predicate to filter orders that belong to people in a given list."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderBelongsToPeoplePredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cString\u003e emails;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    public OrderBelongsToPeoplePredicate(List\u003cString\u003e emails) {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emails \u003d emails;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "        //Returns true if the order\u0027s personId (i.e. email) is in the list of emails"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "-"
        },
        "content": "        return emails.stream()"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "                .anyMatch(email -\u003e email.equals(order.getPersonId()));"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof OrderBelongsToPeoplePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.emails.equals(((OrderBelongsToPeoplePredicate) other).emails)); // state check"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\order\\SubOrder.java"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "-"
        },
        "content": " * SubOrder class for each single product purchased in an Order. Should be composited with Order"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "-"
        },
        "content": " * (i.e. can\u0027t exist without Order object which has pointer to this SubOrder object)"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: field details are validated and immutable"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "-"
        },
        "content": "public class SubOrder {"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUBORDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Sub-Orders needs to have three elements, first two of which are integers representing product ID and\"+"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "                    \" number of that product bought, and the price of the product as purchased.\";"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int productID;"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "    private final int numProduct;"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Money productPrice;"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Every field must be present and non-null. */"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "    public SubOrder(int id, int num, Money price) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "        productID \u003d id;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": "        numProduct \u003d num;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "        productPrice \u003d price;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getProductID() {"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "        return productID;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getNumProduct() {"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": "        return numProduct;"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": "    public Money getProductPrice() {"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "        return productPrice;"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "    public Money getTotalPrice() {"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "        return productPrice.times(numProduct);"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "     * Checks that suborder is valid"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": "     * - product ID is in list of products"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": "     * - productPrice is non-negative"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param products list of products to check against (global list)"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return validity"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isValid(List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean valid \u003d true;"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean idFound \u003d false;"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Product product : products) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "            if (product.getId() \u003d\u003d productID) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "                idFound \u003d true;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "        valid \u003d idFound \u0026\u0026 valid; //Trip valid to false if product isn\u0027t found"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean negativeProductPrice \u003d productPrice.isMinus();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "        valid \u003d !negativeProductPrice \u0026\u0026 valid;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "        return valid;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"PdtID \");"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(productID);"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\tx\");"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(numProduct);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\t@\");"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(productPrice);"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlAdaptedOrder.java"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Order."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedOrder {"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time needs to be in ISO-8601 format.\";"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "    private String personId;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedSubOrder\u003e subOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedOrder."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedOrder() {}"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedOrder} with the given product details."
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedOrder(String id, String personId, String time, List\u003cXmlAdaptedSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Order into this class for JAXB use."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedOrder"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedOrder(Order source) {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "        id \u003d String.valueOf(source.getId());"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "        personId \u003d source.getPersonId();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": "        for (SubOrder so : source.getSubOrders())"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": "            subOrders.add(new XmlAdaptedSubOrder(so));"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted order object into the model\u0027s Order object."
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "    public Order toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.id \u003d\u003d null) {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        final int id \u003d Integer.parseInt(this.id);"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "        // Note that we are using email as personId (i.e. foreign key) here"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.personId \u003d\u003d null) {"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"personId\"));"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(this.personId)) {"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "        final String personId \u003d this.personId;"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Time\"));"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        final LocalDateTime time;"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "            time \u003d LocalDateTime.parse(this.time);"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cSubOrder\u003e soList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedSubOrder so : subOrders) {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "            soList.add(so.toModelType());"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Order(id, personId, time, soList);"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedOrder)) {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedOrder otherOrder \u003d (XmlAdaptedOrder) other;"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(id, otherOrder.id)"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(personId, otherOrder.personId)"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(time, otherOrder.time)"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 subOrders.equals(otherOrder.subOrders);"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlAdaptedProduct.java"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Product."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedProduct {"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Product\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "    private String price;"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedProduct."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedProduct() {}"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedProduct} with the given product details."
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedProduct(String id, String name, String price, String category) {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Product into this class for JAXB use."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedProduct"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedProduct(Product source) {"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "        id \u003d String.valueOf(source.getId());"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "        price \u003d source.getPrice().toString();"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "        category \u003d source.getCategory().toString();"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted product object into the model\u0027s Product object."
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted product"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "    public Product toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.id \u003d\u003d null) {"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "-"
        },
        "content": "        final int id \u003d Integer.parseInt(this.id);"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, ProductName.class.getSimpleName()));"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!ProductName.isValidProductName(this.name)) {"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(ProductName.MESSAGE_PRODUCT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "        final ProductName name \u003d new ProductName(this.name);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.price \u003d\u003d null) {"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Price\"));"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "-"
        },
        "content": "        final Money price \u003d Money.parsePrice(this.price); //Throws IllegalValueException if price string isn\u0027t valid"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.category \u003d\u003d null) {"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Category.isValidCategory(this.category)) {"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "-"
        },
        "content": "        final Category category \u003d new Category(this.category);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Product(id, name, price, category);"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedProduct)) {"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedProduct otherProduct \u003d (XmlAdaptedProduct) other;"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(id, otherProduct.id)"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(name, otherProduct.name)"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(price, otherProduct.price)"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(category, otherProduct.category);"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlAdaptedSubOrder.java"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the SubOrder."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedSubOrder {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"SubOrder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "-"
        },
        "content": "    private String productId;"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "-"
        },
        "content": "    private String numProduct;"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "-"
        },
        "content": "    private String productPrice;"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedSubOrder."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedSubOrder() {}"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedSubOrder} with the given sub order details."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedSubOrder(String productId, String numProduct, String productPrice) {"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": "        this.productId \u003d productId;"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "        this.numProduct \u003d numProduct;"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "        this.productPrice \u003d productPrice;"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given SubOrder into this class for JAXB use."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedSubOrder"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedSubOrder(SubOrder source) {"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": "        productId \u003d String.valueOf(source.getProductID());"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "        numProduct \u003d String.valueOf(source.getNumProduct());"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": "        productPrice \u003d source.getProductPrice().toString();"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted sub order object into the model\u0027s SubOrder object."
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": "    public SubOrder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.productId \u003d\u003d null) {"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"productId\"));"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": "        final int productId \u003d Integer.parseInt(this.productId);"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.numProduct \u003d\u003d null) {"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"numProduct\"));"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "        final int numProduct \u003d Integer.parseInt(this.numProduct);"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.productPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"productPrice\"));"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "        //Throws IllegalValueException if productPrice string isn\u0027t valid"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "        final Money productPrice \u003d Money.parsePrice(this.productPrice);"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "        return new SubOrder(productId, numProduct, productPrice);"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedSubOrder)) {"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedSubOrder otherSubOrder \u003d (XmlAdaptedSubOrder) other;"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(productId, otherSubOrder.productId)"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(numProduct, otherSubOrder.numProduct)"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(productPrice, otherSubOrder.productPrice);"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 50,
      "-": 728,
      "YingxuH": 43
    }
  },
  {
    "path": "collated/test/He.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# He"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\ProductBuilder.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A utility class to help with building Product objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductBuilder {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_PRODUCTNAME \u003d \"Laptop\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final BigDecimal DEFAULT_PRICE \u003d new BigDecimal(1000);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"PC\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ProductName name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Money price;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        name \u003d new ProductName(DEFAULT_PRODUCTNAME);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        price \u003d new Money(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Initializes the ProductBuilder with the data of {@code productToCopy}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder(Product productToCopy) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        name \u003d productToCopy.getName();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        price \u003d productToCopy.getPrice();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        category \u003d productToCopy.getCategory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Name} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder withName(String name) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.name \u003d new ProductName(name);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Price} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder withPrice(BigDecimal amount) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.price \u003d new Money(amount);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Category} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product build() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Product(name, price, category);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\TypicalIndexes.java"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_FIRST_PRODUCT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_SECOND_PRODUCT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_THIRD_PRODUCT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_FIRST_ORDER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_SECOND_ORDER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_THIRD_ORDER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "YingxuH": 66
    }
  },
  {
    "path": "collated/test/Sivalavida.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "# Sivalavida"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\guitests\\guihandles\\PersonCardHandle.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return genderLabel.getText();"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getAge() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return ageLabel.getText();"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getLatitude() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return latitudeLabel.getText();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getLongitude() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return longitudeLabel.getText();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\AgeTest.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String invalidAge \u003d \"121\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // empty string"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // spaces only"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"M*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"90.1234\")); // decimal values"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"-90\")); // negative values"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Age.isValidAge(\"2\")); //integer with one digit"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Age.isValidAge(\"20\")); //integer with two digit"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Age.isValidAge(\"110\")); //integer with three digit"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\GenderTest.java"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String invalidGender \u003d \"q\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\"\")); // empty string"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\"M*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\"M \")); // male with space"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Gender.isValidGender(\"M\")); // male in uppercase"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Gender.isValidGender(\"m\")); // male in lowercase"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Gender.isValidGender(\"F\")); // female in uppercase"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Gender.isValidGender(\"f\")); // female in lowercase"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\LatitudeTest.java"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class LatitudeTest {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Latitude(null));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_invalidLatitude_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String invalidLatitude \u003d \"91\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Latitude(invalidLatitude));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void isValidLatitude() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Latitude.isValidLatitude(null));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"\")); // empty string"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\" \")); // spaces only"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"M*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"90.1234\")); // greater than 90"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"-90.1234\")); // less than 90"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"--90.9\")); // double negative sign"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"- 90.1234\")); // space between sign and number"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Latitude.isValidLatitude(\"20.1234\")); // positive float"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Latitude.isValidLatitude(\"-20.1234\")); // negative float"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Latitude.isValidLatitude(\"90\")); // integers"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Latitude.isValidLatitude(\"-90\")); // negative integer"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Latitude latitude\u003d new Latitude(\"1.234\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"01.234000\", latitude.getValue());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude\u003d new Latitude(\"-1.234\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"-01.234000\", latitude.getValue());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude\u003d new Latitude(\"0\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"00.000000\", latitude.getValue());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude\u003d new Latitude(\"2\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"02.000000\", latitude.getValue());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\PersonBuilder.java"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets the {@code Age} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public PersonBuilder withAge(String age) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets the {@code Latitude} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public PersonBuilder withLatitude(String latitude) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.latitude \u003d new Latitude(latitude);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets the {@code Longitude} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public PersonBuilder withLongitude(String longitude) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.longitude \u003d new Longitude(longitude);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 166,
      "-": 12
    }
  },
  {
    "path": "collated/test/YingxuH.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# YingxuH"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\guitests\\guihandles\\MainWindowHandle.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanel \u003d new ProductListPanelHandle(getChildNode(ProductListPanelHandle.PRODUCT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListPanel \u003d new OrderListPanelHandle(getChildNode(OrderListPanelHandle.ORDER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\guitests\\guihandles\\MainWindowHandle.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductListPanelHandle getProductListPanel() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return productListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderListPanelHandle getOrderListPanel() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return orderListPanel;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\guitests\\guihandles\\OrderCardHandle.java"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Provides a handle to a Order card in the Order list panel."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String PERSONID_FIELD_ID \u003d \"#personId\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String TIME_FIELD_ID \u003d \"#time\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String SUBORDERS_FIELD_ID \u003d \"#subOrders\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label personIdLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label timeLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cVBox\u003e subOrdersLabels;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.personIdLabel \u003d getChildNode(PERSONID_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.timeLabel\u003d getChildNode(TIME_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Region subOrdersContainer \u003d getChildNode(SUBORDERS_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.subOrdersLabels \u003d subOrdersContainer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .map(VBox.class::cast)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getPersonId() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return personIdLabel.getText();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Instant instant \u003d Instant.parse(timeLabel.getText());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        System.out.println(\"Instant : \" + instant);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //get date time only"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        LocalDateTime result \u003d LocalDateTime.ofInstant(instant, ZoneId.of(ZoneOffset.UTC.getId()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * returns all the children node inside each box"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public List\u003cObservableList\u003cNode\u003e\u003e getSubOrders() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return subOrdersLabels"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .map(VBox::getChildren)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\guitests\\guihandles\\OrderListPanelHandle.java"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Provides a handle for {@code OrderListPanel} containing the list of {@code OrderCard}."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderListPanelHandle extends NodeHandle\u003cListView\u003cOrderCard\u003e\u003e {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String ORDER_LIST_VIEW_ID \u003d \"#orderListView\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Optional\u003cOrderCard\u003e lastRememberedSelectedOrderCard;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderListPanelHandle(ListView\u003cOrderCard\u003e orderListPanelNode) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(orderListPanelNode);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a handle to the selected {@code OrderCardHandle}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e orderList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (orderList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"Order list size expected 1.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new OrderCardHandle(orderList.get(0).getRoot());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Navigates the listview to display and select the order."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void navigateToCard(Order order) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e cards \u003d getRootNode().getItems();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Optional\u003cOrderCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.order.equals(order)).findFirst();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!matchingCard.isPresent()) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"Order does not exist.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(matchingCard.get());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().getSelectionModel().select(matchingCard.get());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the order card handle of a order associated with the {@code index} in the list."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCardHandle getOrderCardHandle(int index) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return getOrderCardHandle(getRootNode().getItems().get(index).order);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the {@code OrderCardHandle} of the specified {@code order} in the list."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCardHandle getOrderCardHandle(Order order) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Optional\u003cOrderCardHandle\u003e handle \u003d getRootNode().getItems().stream()"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .filter(card -\u003e card.order.equals(order))"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .map(card -\u003e new OrderCardHandle(card.getRoot()))"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Order does not exist.\"));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Selects the {@code OrderCard} at {@code index} in the list."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Remembers the selected {@code OrderCard} in the list."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void rememberSelectedOrderCard() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            lastRememberedSelectedOrderCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            lastRememberedSelectedOrderCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the selected {@code OrderCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code rememberSelectedOrderCard()} call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isSelectedOrderCardChanged() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return lastRememberedSelectedOrderCard.isPresent();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return !lastRememberedSelectedOrderCard.isPresent()"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    || !lastRememberedSelectedOrderCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\guitests\\guihandles\\ProductCardHandle.java"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Provides a handle to a product card in the product list panel."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String PRICE_FIELD_ID \u003d \"#price\";"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String CATEGORY_FIELD_ID \u003d \"#category\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label priceLabel;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label categoryLabel;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.priceLabel\u003d getChildNode(PRICE_FIELD_ID);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.categoryLabel \u003d getChildNode(CATEGORY_FIELD_ID);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getPrice() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return priceLabel.getText();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return categoryLabel.getText();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\guitests\\guihandles\\ProductListPanelHandle.java"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Provides a handle for {@code ProductListPanel} containing the list of {@code ProductCard}."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductListPanelHandle extends NodeHandle\u003cListView\u003cProductCard\u003e\u003e {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String PRODUCT_LIST_VIEW_ID \u003d \"#productListView\";"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Optional\u003cProductCard\u003e lastRememberedSelectedProductCard;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductListPanelHandle(ListView\u003cProductCard\u003e productListPanelNode) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(productListPanelNode);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a handle to the selected {@code ProductCardHandle}."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e productList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (productList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"Product list size expected 1.\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ProductCardHandle(productList.get(0).getRoot());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Navigates the listview to display and select the product."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void navigateToCard(Product product) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e cards \u003d getRootNode().getItems();"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Optional\u003cProductCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.product.equals(product)).findFirst();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!matchingCard.isPresent()) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"Product does not exist.\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(matchingCard.get());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().getSelectionModel().select(matchingCard.get());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the product card handle of a product associated with the {@code index} in the list."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCardHandle getProductCardHandle(int index) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return getProductCardHandle(getRootNode().getItems().get(index).product);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the {@code ProductCardHandle} of the specified {@code product} in the list."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCardHandle getProductCardHandle(Product product) {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Optional\u003cProductCardHandle\u003e handle \u003d getRootNode().getItems().stream()"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .filter(card -\u003e card.product.equals(product))"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .map(card -\u003e new ProductCardHandle(card.getRoot()))"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Product does not exist.\"));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Selects the {@code ProductCard} at {@code index} in the list."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Remembers the selected {@code ProductCard} in the list."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void rememberSelectedProductCard() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            lastRememberedSelectedProductCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            lastRememberedSelectedProductCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the selected {@code ProductCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code rememberSelectedProductCard()} call."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isSelectedProductCardChanged() {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return lastRememberedSelectedProductCard.isPresent();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return !lastRememberedSelectedProductCard.isPresent()"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    || !lastRememberedSelectedProductCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\OrderCardTest.java"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // first order"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Order orderToTestFirst \u003d ORDER_ONE;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCard orderCard \u003d new OrderCard(orderToTestFirst, 1);"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(orderCard);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplay(orderCard, orderToTestFirst, 1);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // second order"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Order orderToTestSecond \u003d ORDER_TWO;"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderCard \u003d new OrderCard(orderToTestSecond, 2);"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(orderCard);"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplay(orderCard, orderToTestSecond, 2);"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Order order \u003d ORDER_ONE;"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCard orderCard \u003d new OrderCard(order, 0);"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same order, same index -\u003e returns true"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCard copy \u003d new OrderCard(order, 0);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(orderCard.equals(copy));"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different order, same index -\u003e returns false"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Order differentOrder \u003d ORDER_THREE;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(orderCard.equals(new OrderCard(differentOrder, 0)));"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same order, different index -\u003e returns false"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(orderCard.equals(new OrderCard(order, 1)));"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(orderCard.equals(orderCard));"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(orderCard.equals(null));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(orderCard.equals(0));"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code orderCard} displays the details of {@code expectedOrder} correctly and matches"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void assertCardDisplay(OrderCard orderCard, Order expectedOrder, int expectedId) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCardHandle orderCardHandle \u003d new OrderCardHandle(orderCard.getRoot());"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", orderCardHandle.getId());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // verify order details are displayed correctly"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplaysOrder(expectedOrder, orderCardHandle);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\OrderListPanelTest.java"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final ObservableList\u003cOrder\u003e TYPICAL_ORDERS \u003d"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            FXCollections.observableList(getTypicalOrders());"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_ORDER);"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private OrderListPanelHandle orderListPanelHandle;"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderListPanel orderListPanel \u003d new OrderListPanel(TYPICAL_ORDERS);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(orderListPanel);"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListPanelHandle \u003d new OrderListPanelHandle(getChildNode(orderListPanel.getRoot(),"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                OrderListPanelHandle.ORDER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_ORDERS.size(); i++) {"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            orderListPanelHandle.navigateToCard(TYPICAL_ORDERS.get(i));"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Order expectedOrder \u003d TYPICAL_ORDERS.get(i);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            OrderCardHandle actualCard \u003d orderListPanelHandle.getOrderCardHandle(i);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            assertCardDisplaysOrder(expectedOrder, actualCard);"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            /*The index in the order list should be their real id instead of their orders.*/"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            int expectedIndex \u003d expectedOrder.getId();"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            assertEquals(Integer.toString(expectedIndex) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCardHandle expectedCard \u003d orderListPanelHandle.getOrderCardHandle(INDEX_THIRD_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCardHandle selectedCard \u003d orderListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertOrderCardEquals(expectedCard, selectedCard);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ProductCardTest.java"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product productWithNoCategory \u003d new ProductBuilder().withCategory(\"random\").build();"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCard productCard \u003d new ProductCard(productWithNoCategory, 1);"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(productCard);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplay(productCard, productWithNoCategory, 1);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product productWithCategory \u003d new ProductBuilder().build();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productCard \u003d new ProductCard(productWithCategory, 2);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(productCard);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplay(productCard, productWithCategory, 2);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product product \u003d new ProductBuilder().build();"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCard productCard \u003d new ProductCard(product, 0);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same product, same index -\u003e returns true"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCard copy \u003d new ProductCard(product, 0);"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(productCard.equals(copy));"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different product, same index -\u003e returns false"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product differentProduct \u003d new ProductBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(productCard.equals(new ProductCard(differentProduct, 0)));"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same product, different index -\u003e returns false"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(productCard.equals(new ProductCard(product, 1)));"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(productCard.equals(productCard));"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(productCard.equals(null));"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(productCard.equals(0));"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code productCard} displays the details of {@code expectedProduct} correctly and matches"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void assertCardDisplay(ProductCard productCard, Product expectedProduct, int expectedId) {"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCardHandle productCardHandle \u003d new ProductCardHandle(productCard.getRoot());"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", productCardHandle.getId());"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // verify product details are displayed correctly"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplaysProduct(expectedProduct, productCardHandle);"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ProductListPanelTest.java"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final ObservableList\u003cProduct\u003e TYPICAL_PRODUCTS \u003d"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            FXCollections.observableList(getTypicalProducts());"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PRODUCT);"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ProductListPanelHandle productListPanelHandle;"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductListPanel productListPanel \u003d new ProductListPanel(TYPICAL_PRODUCTS);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(productListPanel);"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanelHandle \u003d new ProductListPanelHandle(getChildNode(productListPanel.getRoot(),"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ProductListPanelHandle.PRODUCT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PRODUCTS.size(); i++) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            productListPanelHandle.navigateToCard(TYPICAL_PRODUCTS.get(i));"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Product expectedProduct \u003d TYPICAL_PRODUCTS.get(i);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            ProductCardHandle actualCard \u003d productListPanelHandle.getProductCardHandle(i);"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            assertCardDisplaysProduct(expectedProduct, actualCard);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            /*The index in the product list should be their real id instead of their orders.*/"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            int expectedIndex \u003d expectedProduct.getId();"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            assertEquals(Integer.toString(expectedIndex)+\". \", actualCard.getId());"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCardHandle expectedCard \u003d productListPanelHandle.getProductCardHandle(INDEX_SECOND_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCardHandle selectedCard \u003d productListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertProductCardEquals(expectedCard, selectedCard);"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\ui\\testutil\\GuiTestAssert.java"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code actualProductCard} displays the same values as {@code expectedProductCard}."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void assertProductCardEquals(ProductCardHandle expectedCard, ProductCardHandle actualCard) {"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getPrice(), actualCard.getPrice());"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getCategory(), actualCard.getCategory());"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedProduct}."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void assertCardDisplaysProduct(Product expectedProduct, ProductCardHandle actualCard) {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedProduct.getName().fullProductName, actualCard.getName());"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedProduct.getPrice().repMoney, actualCard.getPrice());"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedProduct.getCategory().value, actualCard.getCategory());"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code actualOrderCard} displays the same values as {@code expectedOrderCard}."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void assertOrderCardEquals(OrderCardHandle expectedCard, OrderCardHandle actualCard) {"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getPersonId(), actualCard.getPersonId());"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getTime(), actualCard.getTime());"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getSubOrders(), actualCard.getSubOrders());"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedProduct}."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void assertCardDisplaysOrder(Order expectedOrder, OrderCardHandle actualOrder) {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedOrder.getPersonId(), actualOrder.getPersonId());"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedOrder.getTime(), actualOrder.getTime());"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "-": 184,
      "YingxuH": 456
    }
  },
  {
    "path": "collated/test/lowjiajin.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "# lowjiajin"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\ProductCostsBetweenPredicateTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class ProductCostsBetweenPredicateTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    Money TEN_DOLLARS \u003d new Money(new BigDecimal(10));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    Money TWENTY_DOLLARS \u003d new Money(new BigDecimal(20));"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    Money THIRTY_DOLLARS \u003d new Money(new BigDecimal(30));"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductCostsBetweenPredicate firstPredicate \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, TWENTY_DOLLARS);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductCostsBetweenPredicate firstPredicateCopy \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, TWENTY_DOLLARS);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductCostsBetweenPredicate secondPredicate \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, THIRTY_DOLLARS);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(10));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // different age range -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void test_ageWithinRange_returnsTrue() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Strictly withing range"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductCostsBetweenPredicate predicate \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, TWENTY_DOLLARS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Price equal to left boundary"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(10)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Price equal to left boundary"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(20)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //Price above upper limit"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductCostsBetweenPredicate predicate \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, TWENTY_DOLLARS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(35)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Price below lower bound"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(2)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //Price range reversed"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        predicate \u003d new ProductCostsBetweenPredicate(TWENTY_DOLLARS, TEN_DOLLARS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\product\\ProductNameContainsKeywordsPredicateTest.java"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class ProductNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductNameContainsKeywordsPredicate firstPredicate \u003d new ProductNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductNameContainsKeywordsPredicate secondPredicate \u003d new ProductNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductNameContainsKeywordsPredicate firstPredicateCopy \u003d new ProductNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void test_productNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductNameContainsKeywordsPredicate predicate \u003d new ProductNameContainsKeywordsPredicate(Collections.singletonList(\"game\"));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"game boy\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        predicate \u003d new ProductNameContainsKeywordsPredicate(Arrays.asList(\"game\", \"boy\"));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"game boy\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        predicate \u003d new ProductNameContainsKeywordsPredicate(Arrays.asList(\"game\", \"towel\"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"game\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        ProductNameContainsKeywordsPredicate predicate \u003d new ProductNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"game\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        predicate \u003d new ProductNameContainsKeywordsPredicate(Arrays.asList(\"boy\"));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"game\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 46,
      "-": 71
    }
  },
  {
    "path": "collated/test/qinghao1.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "# qinghao1"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddCommandTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addOrder(Order order) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deleteOrder(Order order) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addProduct(Product product) throws DuplicateProductException {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddOrderCommandIntegrationTest.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddOrderCommand}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddOrderCommandIntegrationTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(TypicalAddressBook.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_newOrder_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cSubOrder\u003e subOrders \u003d new ArrayList\u003c\u003e(Arrays.asList(SO_B, SO_D, SO_G, SO_H));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Order validOrder \u003d new Order(CARL, subOrders);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.addOrder(validOrder);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(prepareCommand(validOrder, model), model,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                AddOrderCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicateOrder_throwsCommandException() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Order dupOrder \u003d model.getAddressBook().getOrderList().get(0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(prepareCommand(dupOrder, model), model, AddOrderCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidOrder_invalidEmail_throwsCommandException() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        //Invalid email"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cSubOrder\u003e subOrders1 \u003d new ArrayList\u003c\u003e(Arrays.asList(SO_B, SO_D, SO_G, SO_H));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Order invalidOrder1 \u003d new Order(\"wrongemail@email.com\", subOrders1);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(prepareCommand(invalidOrder1, model), model, AddOrderCommand.MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidOrder_invalidProductId_throwsCommandException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        //Invalid product ID"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cSubOrder\u003e subOrders2 \u003d new ArrayList\u003c\u003e(Arrays.asList(SO_B, SO_D, SO_G, new SubOrder(999, 1, Money.parsePrice(\"$5\"))));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            Order invalidOrder2 \u003d new Order(CARL, subOrders2);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCommandFailure(prepareCommand(invalidOrder2, model), model, AddOrderCommand.MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            //Money.parsePrice() throws IllegalValueException"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidOrder_negativePrice_throwsCommandException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        //Negative price"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Money negativePrice \u003d new Money(new BigDecimal(-1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        SubOrder negativeSubOrder \u003d new SubOrder(EGG.getId(), 5, negativePrice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cSubOrder\u003e negativeSubOrderList \u003d new ArrayList\u003c\u003e(Arrays.asList(negativeSubOrder));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        Order invalidOrder3 \u003d new Order(CARL, negativeSubOrderList);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(prepareCommand(invalidOrder3, model), model, AddOrderCommand.MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidOrder_repeatedProducts_throwsCommandException() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        //Repeated product IDs"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cSubOrder\u003e repeatedSubOrders \u003d new ArrayList\u003c\u003e(Arrays.asList(SO_A, SO_A));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Order invalidOrder4 \u003d new Order(CARL, repeatedSubOrders);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(prepareCommand(invalidOrder4, model), model, AddOrderCommand.MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new {@code AddOrderCommand} which upon execution, adds {@code order} into the {@code model}."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddOrderCommand prepareCommand(Order order, Model model) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        AddOrderCommand command \u003d new AddOrderCommand(order);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\order\\OrderBelongsToPeoplePredicateTest.java"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderBelongsToPeoplePredicateTest {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void predicateReturnsTrue() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        emails.add(ALICE.getEmail().toString());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        emails.add(BENSON.getEmail().toString());"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderBelongsToPeoplePredicate predicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(ORDER_ONE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(ORDER_FOUR));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void predicateReturnsFalse() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        emails.add(CARL.getEmail().toString());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        emails.add(DANIEL.getEmail().toString());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        OrderBelongsToPeoplePredicate predicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(ORDER_ONE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(ORDER_FOUR));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\order\\OrderTest.java"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "public class OrderTest {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void testDecrementCounter() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        //Creates one order, decrements the counter (to simulate invalid order), then creates another order."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        //Their IDs should be the same."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cSubOrder\u003e subOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        subOrders.add(new SubOrder(1, 1, new Money()));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        Order newOrder \u003d new Order(\"email@email.com\", subOrders);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        int id \u003d newOrder.getId();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Order.decrementOrderCounter();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Order newOrder2 \u003d new Order(\"email@email.com\", subOrders);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        int id2 \u003d newOrder2.getId();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(id, id2);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getIdTest() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ORDER_ONE.getId(), 1);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonIdTest() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ORDER_ONE.getPersonId(), ALICE.getEmail().toString());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTimeTest() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ORDER_ONE.getTime(), LocalDateTime.parse(\"2017-12-03T10:15:30\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getOrderTotalTest() throws IllegalValueException {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ORDER_ONE.getOrderTotal(), Money.parsePrice(\"$27\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Check Order.toString() returns correct format"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toStringTest() throws Exception {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        String ORDER_ONE_STRING \u003d \"Order ID 1 by alice@example.com at 3 Dec, 2017 10:15:30 AM: \\n\" +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"-------------\\n\" +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"1- Product 1 x2 @$ 0.5\\n\" +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"2- Product 2 x3 @$ 2\\n\" +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"3- Product 7 x4 @$ 5\\n\" +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"-------------\\n\" +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"Total: $ 27.0\\n\" +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"-------------\\n\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ORDER_ONE.toString(), ORDER_ONE_STRING);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        String ORDER_TWO_STRING \u003d \"Order ID 2 by alice@example.com at 13 Dec, 2017 12:05:40 PM: \\n\" +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"-------------\\n\" +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"1- Product 1 x2 @$ 0.5\\n\" +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"2- Product 7 x4 @$ 5\\n\" +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"3- Product 5 x5 @$ 2000\\n\" +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"-------------\\n\" +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"Total: $ 10021.0\\n\" +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "                                \"-------------\\n\";"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(ORDER_TWO.toString(), ORDER_TWO_STRING);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\order\\SubOrderTest.java"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "public class SubOrderTest {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getProductIdTest() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SO_A.getProductID(), EGG.getId());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SO_B.getProductID(), MILK.getId());"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getNumProductTest() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SO_A.getNumProduct(), 2);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SO_B.getNumProduct(), 3);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getProductPriceTest() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SO_A.getProductPrice(), EGG.getPrice());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SO_B.getProductPrice(), MILK.getPrice());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTotalPriceTest() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SO_A.getTotalPrice(), EGG.getPrice().times(SO_A.getNumProduct()));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(SO_B.getTotalPrice(), MILK.getPrice().times(SO_B.getNumProduct()));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\UniqueOrderListTest.java"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueOrderListTest {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueOrderList uniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueOrderList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\model\\UniqueProductListTest.java"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueProductListTest {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        UniqueProductList uniqueProductList \u003d new UniqueProductList();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        uniqueProductList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\TypicalAddressBook.java"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": " * Class to get typical address book with typical persons, orders and products."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalAddressBook {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons, orders and products."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : TypicalPersons.getTypicalPersons()) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addPerson(person);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Order order : TypicalOrders.getTypicalOrders()) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addOrder(order);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicateOrderException e) {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Product product : TypicalProducts.getTypicalProducts()) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addProduct(product);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicateProductException e) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\TypicalOrders.java"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Order} objects to be used in tests."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalOrders {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    //Orders 1-7 are created manually, 8-10 are created dynamically (time is LocalDateTime.now())"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_ONE \u003d new Order("
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "            1,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime.parse(\"2017-12-03T10:15:30\"),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_A, SO_B, SO_C))"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_TWO \u003d new Order("
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "            2,"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE,"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime.parse(\"2017-12-13T12:05:40\"),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_A, SO_C, SO_D))"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_THREE \u003d new Order("
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            3,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "            ALICE,"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime.parse(\"2017-12-14T05:14:30\"),"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_B, SO_C, SO_E))"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_FOUR \u003d new Order("
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            4,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            BENSON,"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime.parse(\"2017-12-18T12:15:30\"),"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_F, SO_G))"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_FIVE \u003d new Order("
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "            5,"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            BOB,"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime.parse(\"2017-12-20T10:18:30\"),"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_A, SO_E, SO_H))"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_LARGE \u003d new Order("
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "            6,"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "            CARL,"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime.parse(\"2017-12-21T10:15:30\"),"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_I, SO_LARGE))"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_SIX \u003d ORDER_LARGE; //alias"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_FREE \u003d new Order("
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            7,"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            KALE,"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            LocalDateTime.parse(\"2017-12-25T20:15:30\"),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_FREE))"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_SEVEN \u003d ORDER_FREE; //alias"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_EIGHT \u003d new Order("
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "            FIONA,"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_A, SO_B))"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_NINE \u003d new Order("
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "            GEORGE,"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_C, SO_D, SO_E))"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Order ORDER_TEN \u003d new Order("
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "            GEORGE,"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_C, SO_D))"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "    );"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cOrder\u003e getTypicalOrders() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "                ORDER_ONE, ORDER_TWO, ORDER_THREE, ORDER_FOUR, ORDER_FIVE, ORDER_SIX, ORDER_SEVEN, ORDER_EIGHT, ORDER_NINE, ORDER_TEN"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\TypicalProducts.java"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Product} objects to be used in tests."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class TypicalProducts {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    //Prevent instantiation"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalProducts() {};"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Product EGG, MILK, SHIRT, PANTS, LAPTOP, SWEET, PAPER, PEN, PENCIL, SODA;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    //Wrap in static block because Money.parsePrice() throws IllegalValueException"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            //Product IDs are set manually for first few to ensure that IDs 1-6 are present, then automatically set later"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            EGG \u003d new Product(1, new ProductName(\"Egg\"),"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"0.5\"), new Category(\"Food\"));"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            MILK \u003d new Product(2, new ProductName(\"Milk\"),"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"2\"), new Category(\"Food\"));"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "            SHIRT \u003d new Product(3, new ProductName(\"Shirt\"),"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"15\"), new Category(\"Fashion\"));"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "            PANTS \u003d new Product(4, new ProductName(\"Pants\"),"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"20\"), new Category(\"Fashion\"));"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            LAPTOP \u003d new Product(5, new ProductName(\"Laptop\"),"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"2000\"), new Category(\"Tech\"));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "            SWEET \u003d new Product(6, new ProductName(\"Sweet\"),"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"0.05\"), new Category(\"Food\"));"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "            PAPER \u003d new Product(new ProductName(\"Paper\"),"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"5\"), new Category(\"Stationery\"));"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "            PEN \u003d new Product(new ProductName(\"Pen\"),"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"1.5\"), new Category(\"Stationery\"));"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "            PENCIL \u003d new Product(new ProductName(\"Pencil\"),"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"1\"), new Category(\"Stationery\"));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "            SODA \u003d new Product(new ProductName(\"Soda\"),"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "                    Money.parsePrice(\"2\"), new Category(\"Food\"));"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "            ive.printStackTrace();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cProduct\u003e getTypicalProducts() {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(EGG, MILK, SHIRT, PANTS, LAPTOP, SWEET, PAPER, PEN, PENCIL, SODA));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "```"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\TypicalSubOrders.java"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code SubOrder} objects to be used in tests."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalSubOrders {"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "    //Prevents instantiation"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalSubOrders() {};"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_A \u003d new SubOrder(EGG.getId(), 2, EGG.getPrice());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_B \u003d new SubOrder(MILK.getId(), 3, MILK.getPrice());"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_C \u003d new SubOrder(PAPER.getId(), 4, PAPER.getPrice());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_D \u003d new SubOrder(LAPTOP.getId(), 5, LAPTOP.getPrice());;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_E \u003d new SubOrder(PEN.getId(), 20, PEN.getPrice());"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_F \u003d new SubOrder(SODA.getId(), 1, SODA.getPrice());"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_G \u003d new SubOrder(SHIRT.getId(), 2, SHIRT.getPrice());"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_H \u003d new SubOrder(EGG.getId(), 12, EGG.getPrice());"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_I \u003d new SubOrder(PANTS.getId(), 1, PANTS.getPrice());"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "    //Edge cases"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_LARGE \u003d new SubOrder(LAPTOP.getId(), 2000, LAPTOP.getPrice());"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final SubOrder SO_FREE \u003d new SubOrder(SHIRT.getId(), 1, new Money());"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cSubOrder\u003e getTypicalSubOrders() {"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SO_A, SO_B, SO_C, SO_D, SO_E, SO_F, SO_G, SO_H, SO_I, SO_LARGE, SO_FREE));"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 6,
      "-": 434,
      "YingxuH": 1
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Retail Analytics was developed by the https://github.com/CS2103JAN2018-T15-B1[T15-B1] team. +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "{empty} +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]. Please click on our names to head to our individual portfolios."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d link:\\team\\Siva Subbiah.adoc[Siva Subbiah]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::siva.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Role:"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "Head Visualization Developer"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d link:\\team\\LowJiaJin.adoc[Low Jia Jin]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "image::lowjiajin.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "Role:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Head Machine Learning Engineer"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d link:\\team\\qinghao.adoc[Chu Qinghao]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "image::qinghao.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "Role:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Head Backend Engineer"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d link:\\team\\He Yingxu.adoc[He Yingxu]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "image::yingxu.jpeg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "Role:"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "Head Backend Engineer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 2,
      "-": 40
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d Retail Analytics - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "By: `Team Retailer Analytics`      Since: `Feb 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Hard for new developers to understand the template pattern."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Just override `execute()`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Does not involve the template pattern, easier for new developers to understand."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Include all commands."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Might be more intuitive for the user."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use separate stack for undo and redo"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "// tag::map[]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Geographic]]"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Geographical Visualisation (`map` command)"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* How the feature is implemented"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** We are using https://developers.google.com/maps/[Google Maps API] to implement this feature. Google Maps\u0027"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "clustering API also has been used create clustering among the data points rendered. The map command has"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "parameters which will describe a query, which is required to filter the customers to render on the map."
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "To implement a querry we had to create several subclasses of `Predicate\u003cPerson\u003e` such as"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "`AgeWithinRangePredicate`, `ContainsTagPredicate` and `GenderPredicate`."
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* Alternatives considered"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Initially we wanted to use a static image of Singapore and create and edit the map based on the locations of the customers"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "on the fly. However, we realised that the user might want a zoomable interface, if he needed the spread of customers"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " viewed at a certain zoom level. Furthermore, this would restrit the use of our product only to retailer who are"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " delevering around Singapore. Using the Google Maps API would enable our users to operate at any country and also have"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " customers around the world. Additionally, it would be much more difficult for us to implement clustering of data"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " if we rendered the images ourselves."
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-RelationalLogic]]"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Relational Logic"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* How the feature is implemented"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "** We want to ensure that each order corresponds to a valid customer and valid products. Thus, we need a unique key on each customer and product that we store in the order."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "For product, we use the product ID which is generated automatically. However, for customer, we use the customer email as the unique key because we wanted to keep the app"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "backwards-compatible with the address-book-level4 app, meaning that XML files from the original addressbook can be directly read with our app. Thus we needed to use"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "one of the existing variables associated with Person."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* Alternatives considered"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "** We considered using object relational mapping instead of relational tables to store the extra Order and Product data. This meant that each Person would be associated with zero to multiple Order objects instead of having an extra Order table. However, we decided against this due to the fact that it would be hard to retrieve orders of deleted people. (They are still present in our version because orders, once made, should not be deleted, because of accounting reasons.)"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::recommend[]"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Recommender]]"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Recommender"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Recommender Training Pipeline"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "Obtaining recommendations for products that a given customer is likely to want to buy can actually be thought of as a classification problem. The `Order` records serves as the test dataset, the instance variables of each Order\u0027s `Customer` serve as the features, and the associated `Product` is the class label."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Weka, an open source machine learning library containing filtering, feature selection, and classifier methods, as well as implementations of common data models, such as attributes, instances, etc. was used. The training pipeline is as follows:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": ". Convert the `Order` records into a `.arff` file, the default format used by Weka, using the `ArffWriter` class."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "The precise formatting of the data to the `.arff` header and data entry format is handled by the `ArffFormatter`, before being passed back to the `ArffWriter` for the file writing."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "The `.arff` must not only list the orders for every item, but also the \"non-orders\" from customers that have not bought that product. These are labelled as `\"n\" + productId`.  Since the `.arff` only stores the classification features (age, gender), which may be non-unique, it is not possible to trace which customers have yet to buy a product after we stop referring to the `Order` records. Thus, the \"non-orders\" have to be populated at the same time as the reformatting of the actual orders to the `.arff`. Additionally, the feature is binary (either bought or did not buy a product), the quantity of purchases does not count."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ". For each product, use `RemoveWithValues` to create an `isolator` that can filter out the orders involving that specific product in the `.arff`. This turns a multiclass classification to a binary decision (i.e. Will a given customer buy that specific product?)."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": ". Pass the `isolator` into a `ProductTrainer`, which will use `ChiSquaredAttributeEval` to select the features most strongly associated with a purchase decision (i.e. an order exists for a given customer profile), and then build a `NaiveBayes` classifier around those features, for that specific product."
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "[v2.0] Total user spending and recent user spending will be added as machine learning features."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": "The `ChiSquaredAttributeEval` only uses the 2 most discriminatory features to build the classifier, even with additional features to be added in v2.0. This combats the Curse of Dimensionality, given the possibly modest number of orders that a small business might have."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "-"
        },
        "content": ". Save each successful `NaiveBayes` build to a `HashMap` keyed by the product ID, for later use on the test set (i.e. the customer whom we want to get likely purchase recommendations for)."
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Recommender Testing Pipeline"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "The execution of the `recommend` command in the CLI will run the testing pipeline. The implementation is as follows:"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ". Run the training pipeline in 3.5.1."
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": ". Call `getRecommendations(customerId)`, which will result in getting the appropriate features from said `Customer`, and then running the features as an `Instance` through every classifier in `classifierDict`. The confidence of each purchase decision is returned via `distributionForInstance` as a percentage. These percentages are ranked, and a list of product recommendations in sorted order, with the `Product` predicted to be most attractive to said `Customer` listed first, is assigned to `ProductRecOfAPerson`."
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "[v2.0] All `Product` objects which a given `Customer` has already bought will be stripped from his `ProductRecOfAPerson`. The remaining list will be sent to `ui` for output."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": ". The ranked list of recommendations is then passed back up to `RecommendCommand` via `RecommendManager` for CLI output."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Sequence Diagram"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "-"
        },
        "content": "A sequence diagram describing both training and testing pipelines is provided below. It excludes return variables for brevity."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "-"
        },
        "content": "image::RecommenderSequenceDiagram.jpg[width\u003d\"1500\"]"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Conversion of orders to training data format"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "* **Alternative 1 (current choice):** Convert orders into a .arff file, stored in the data folder, which can be read by Weka as a training dataset."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Pros: All the header information and data entries are easily viewable as plaintext, allowing for quick prototyping and rapid debugging."
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Cons: Requires a class to handle .arff formatting, which can be rather arbitrary. Unnecessarily adds the potential for IO errors due to the requirement of parsing a physical file, especially since the .arff file may simply be opened and modified to take on unexpected formats and values."
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "* **Alternative 2:** Build the training set using the built in `Instances` and `Attribute` classes provided by Weka."
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Pros: No writing of physical files required; entire recommendation process contained in memory."
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Cons: Weka\u0027s documentation for those classes are rather opaque, and many methods have been deprecated. The way classes and attributes are assigned are rather unwieldy, and printing the relevant values of the training set becomes extremely involved."
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: What kind of classification to perform"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "* **Alternative 1 (current choice):** Perform a binary classification for each product"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Pros: Allows a person not buying a product to be treated as a signal for recommender decision (e.g. no young people buy dentures), which maximizes predictive power on small order sets."
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Cons: Does not predict newly introduced products with few orders well, because the lack of orders is seen as a measure of how unpopular a product is regardless of a person\u0027s profile."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "* **Alternative 2 (current choice):** Perform a multiclass classification across all products"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Does not require us to comb through orders to find products that a person has yet to buy."
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Multiclass classifiers tend to perform badly unless there are many training data points."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "-"
        },
        "content": "// end::recommend[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How much weight to give to multiple orders on the same product for one person"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Ignore all additional orders of the same product over the first"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Single users with many orders do not dominate the decision rules."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Possibly misses out on many useful training data points."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Count each order of the same product over the first by the same person as a unique data entry"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: A more intuitive characterisation of the recommender (i.e. adding new orders will always result in a new training dataset for the recommender, instead of possibly having no impact)"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires code restructuring to track the number of the same product bought by a person, since we are unable to do so from the .arff file as the file only contains non-unique sets of features, and not the unique person id which they were derived from."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* small/medium e-retailer handle customers and orders"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "-"
        },
        "content": "* primarily does deliveries of a select inventory to customer addresses"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "-"
        },
        "content": "* desires analytics to aid in business management and marketing"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "-"
        },
        "content": "* prefer desktop apps over other types"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "* can type fast"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "-"
        },
        "content": "* prefers typing over mouse input"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "-"
        },
        "content": "* is reasonably comfortable using CLI apps"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "*Value proposition*: allows for statistic retrieval, trend analysis, and visualization of customers, products, and orders with an efficient text based input"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "*Feature Contribution*"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Feature Contribution"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "*Qinghao*:"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major*: Add individual customer/product stats, like customer ranking by spending, product ranking by sales etc. This is a key feature of the project that provides retail analytics for the user."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* *Minor*: Add order class, to keep track of a customer\u0027s order(s) and the products in the order."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "-"
        },
        "content": "*Yingxu*:"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major*: Add product class, to keep track of a single product type"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor*: Money class to keep track of price etc. because it cannot be stored in a Double due to precision issues"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "-"
        },
        "content": "*Jia Jin*:"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "* *Major*: Recommendations engine for customer, so that the user can provide these personalized product recommendations to customers."
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "* *Minor*: Filtered commands to retrieve all products from a specific category or within a certain price range."
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "-"
        },
        "content": "*Siva*:"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* *Major*: Geographic visualization of the locations of a queried list of customers (with clustering). This is to better optimize the retailers logistics."
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* *Minor*: Add customer-specific attributes to Person class in existing address book code such as age, gender, latitude, longitude."
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a product by specifying its name, price, and category only |track its sales going forward"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user who is adding a new product |create new product categories on-the-fly |manage pivots in inventory composition"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "|`* * *` |user |add a customer by specifying their email, name, address, age, and gender |keep track of each individual’s orders going forward"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add an order by specifying the date, the buyer, and a list of products bought | avoid repetitively creating multiple orders with the same date and buyer"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user with many new customers, products, and orders |import customers, products, and orders via XML files instead of adding them one-by-one |bulk load the database without wasting time"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user importing the aforementioned XML |a description of the specific entry and the violation to be highlighted if any entry violates the relevant relation |avoid manually hunting through a possibly huge XML to locate the import error"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |search for customers via their names or emails |view the profile of each customer and their purchase history"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "|`*` |user who is searching for customers |have the search gives a ranked list of customers with most similar names/emails via fuzzy string matching |still locate customers without precisely remembering their name/email when I have many customers"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "|`* * *` |user |search for groups of products by category or price range |isolate certain parts of their inventory without scrolling through many irrelevant products"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user currently on a product’s profile |update that product’s price |reproduce discounts or price raises in this application"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |obtain a ranked list of customers by total or recent spending |reach out and reward loyal customers accordingly"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |obtain separate list of active/inactive users |make distinct decisions that focus on maximizing active ones or recapturing inactive ones"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |obtain a ranked list of products by total or recent sales |request appropriate inventory"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |obtain the aforementioned total and recent sales across entire product categories too |know which categories to pivot my retail business toward"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |search for customers via their names or emails |view the profile of each customer and their purchase history"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |graph the aforementioned product and category sales across time |identify changes in product performance to decide on product strategy"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |graph the numbers and proportions of active/inactive users across time |identify changes in user retention"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "|`*` |user |graph the average monthly/yearly sales value of active users across time |use willingness to spend as a proxy of user trust and engagement, and make informed changes to marketing strategy to hit the desired ARPU"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user |graph the total revenue across time |visually grasp if my business as a whole has been growing"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user viewing the aforementioned graphs |data points and relevant summary statistics can be exported to an XML for download |perform further analysis in another software (e.g. Tableau, MS Excel, etc.)"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |use the recommendations engine identify which users still haven’t bought, but are likely to want to buy a given product |perform targeted marketing (e.g. email blasts with specific products)"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "|`* *` |user |re-train the recommendations engine\u0027s classifier on the latest data on execution of recommend command |ensure its relevance as new products and orders come in"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |display customers as an overlay on a map |understand how customers are geographically distributed, which have many possible gains (e.g. determine placement of physical marketing collateral such as flyers and banners)"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user using the map overlay |filter the users by total and recent expenditure |visually grasp the geographical distribution of my most/least valuable customers to understand market penetration and inform customer personas"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "-"
        },
        "content": "|`* *` |user using the map overlay |filter the users by products or product categories ordered |the penetration of specific products to personas that might be more prevalent in given locales"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "(For all use cases below, the *System* is the `RetailAnalytics` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Use case: UC1 - Add customer"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "1.  User requests to add customer (with atributes: email, name, age, gender, address, latitude, longitude)"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "2.  RetailAnalytics adds customer and shows success message"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* 1a. The formatting of the statement is invalid."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** 1a1. RetailAnalytics shows an error message."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Use case: UC2 - Add Order"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "1.  User requests to add order (with atributes: customerid, itemid, quantity, price)"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "2.  RetailAnalytics adds order and shows success message"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* 1a. The formatting of the statement is invalid."
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** 1a1. RetailAnalytics shows an error message."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Use case: UC3 - Add Product"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "1.  User requests to add product (with atributes: name, price, category)"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "2.  RetailAnalytics adds product and shows success message"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* 1a. The formatting of the statement is invalid."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** 1a1. RetailAnalytics shows an error message."
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Use case: UC4 - Delete customer"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "1.  User requests to list customers"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "2.  RetailAnalytics shows a list of customers"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "3.  User requests to delete a specific customer in the list"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "4.  RetailAnalytics deletes the customer and all transactions associated with him"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** 3a1. RetailAnalytics shows an error message."
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Use case: UC5 - Request Analytics (Customer ranking or Product Ranking)"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "1.  User requests a specific type of analytics"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "2.  RetailAnalytics shows a list of Customers or Products"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Use case: UC6 - Request Geographic Visualisation of Analytics (Customer ranking or Product Ranking)"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "1.  User requests geographic visualisation of locations of a querried list of customers"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "2.  RetailAnalytics shows querried list of Customers and a map showing the spread of customers with clustering"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Use case: UC7 -  Search for person"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "1.  User searches for person based on name or email"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "2.  RetailAnalytics shows a list of customers with that name or email ( fuzzy-search)"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "+"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Use case: UC8 - Delete person"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 entries in the relational tables without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  Should be able to handle invalid input (highlight error and give correct instructions)."
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  should work on both 32-bit and 64-bit environment"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ".  Should be able to show the analytical results within two seconds."
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be user-friendly for non-programmers."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[[relational-database]] Relational Database::"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "A database that organizes data into tables where rows representing instances"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "and columns representing values attributed to that instance."
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "[[hot-keys]] Hot Keys::"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "A combination of keys which provides a shortcut to perform certain tasks."
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": ". Adding a person"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addperson` +"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person added. Error message appears giving you the correct format."
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addperson n/John Doe p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 g/M age/23 lat/1.339160 lon/103.745166 t/friends t/onetag` +"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Person successfully added. Appears as index 11 in the sample address book."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addperson n/Ben Doe p/98765432 e/bend@example.com a/456, Clementi Ave 6, #02-25 g/M age/25 lat/22.339160 lon/50.745166 t/friends t/tags t/moretags` +"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Person successfully added. Appears as index 12 in the sample address book."
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Finding products by category"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "-"
        },
        "content": ". Prerequisites: Either must not have performed any action other than the above, or start with a fresh address book by closing the app, deleting the data folder, and restarting the app."
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "-"
        },
        "content": ". Finding the products from a category with multiple products."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `findproductbycategory Healthcare` +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Only Dentures and Toothbrush will be listed."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: Refresh the product listing with `listproduct`. Then, input `findproductbycategory healthcare` +"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Again, only Dentures and Toothbrush will be listed. Note that the argument is not case sensitive."
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "-"
        },
        "content": ". Finding a product from a category with only one product"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `findproductbycategory Clothing` +"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Only TrendyShirt is listed."
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "-"
        },
        "content": ". Negative examples"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `findproductbycategory ABC123` +"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No products are listed because the category ABC123 does not exist."
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `findproductbycategory` +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Error detailing invalid format is displayed in CLI."
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a product"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "-"
        },
        "content": ". Adding a product"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addproduct` +"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No product is added. Error message appears giving you the correct format."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addproduct n/Egg pr/2.5 c/Food`"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Product successfully added."
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addproduct n/Egg pr/sgr2.5 c/Food`"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Invalid format error, prompt should appear in CLI requesting that currency only has numbers and a dollar symbol."
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding an order"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "-"
        },
        "content": ". Adding an order"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Either must not have performed any action other than the above, or start with a fresh address book by closing the app, deleting the data folder, and restarting the app."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addorder` +"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No order is added. Error detailing correct format should be provided."
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addorder e/alex@example.com o/1 5 $3.00 o/2 4 $2.50 o/3 1 $100`"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: New order added to Alex Yeoh with 3 suborders for 3 different products. Does not merge with existing order by Alex."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `addorder e/bernice@example.com o/1 5 $3.00`"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: New order added to Bernice Yu with 1 suborder. Does not merge with existing order by Bernice."
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Recommending for a person"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "-"
        },
        "content": ". Recommends products that a person is likely to want to buy"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: Either must not have performed any action other than the above, or start with a fresh address book by closing the app, deleting the data folder, and restarting the app."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `recommend 1` +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Recommendations for Alex Yeoh appears. Because Alex is young, TrendyShirt should top the list, while dentures is at the back. Lipstick should be just behind dentures as Alex is male."
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `recommend 2` +"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Recommendations for Bernice Yu appears. Compared to Alex, Bernice is female, so Lipstick advances to  most likely in the prediction list.."
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Other methods to test"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "-"
        },
        "content": ". `findproductbyname`, `findproductbyprice`, `map`, `listproduct`, `deleteproduct`, and `deleteorder`."
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 116,
      "lowjiajin": 28,
      "-": 804,
      "YingxuH": 10
    }
  },
  {
    "path": "docs/DummySearchPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cmeta charset\u003d\"utf-8\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ctitle\u003eDummy Search Page\u003c/title\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscript type\u003d\"text/javascript\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    function getJsonFromUrl() {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "      var query \u003d location.search.substr(1);"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "      var result \u003d {};"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "      query.split(\"\u0026\").forEach(function(part) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "        var item \u003d part.split(\"\u003d\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        result[item[0]] \u003d decodeURIComponent(item[1]);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "      });"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "      return result;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    document.addEventListener(\"DOMContentLoaded\", function(event) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      document.getElementById(\"name\").innerHTML\u003dgetJsonFromUrl().name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    });"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/script\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "  Hi \u003cspan id\u003d\"name\"\u003e\u003c/span\u003e: This is a placeholder page for se-edu/addressbook-level4.\u003cbr\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "  You may update the code to load a page from a real service (e.g., Google search).\u003cbr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "  This dummy page is used here because, given the high number of forks of this repo, loading a page from a real third-party service by default can result in that service taking counter-measures (e.g., redirecting to captcha pages) due to the high number of rapid requests received from a single IP.\u003cbr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "  When you have made the change, please remove:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003col\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cli\u003eThis file (\u003ccode\u003edocs/DummySearchPage.html\u003c/code\u003e).\u003c/li\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cli\u003eTask \u003ccode\u003ecopyDummySearchPage\u003c/code\u003e in both \u003ccode\u003ebuild.gradle\u003c/code\u003e and \u003ccode\u003e.travis.yml\u003c/code\u003e.\u003c/li\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/ol\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 32
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d Retail Analytics - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-T15-B1/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "By: `Team T15-B1`      Since: `Feb 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Retail Analytics (RA) is for *retailers who handle customers and orders and who are comfortable with using a desktop app to manage their analytics*. More importantly, RA is *optimized for those who prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI). If you can type fast, RA can get your customer analytics tasks done faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your Retail Analytics."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Refer to \u003c\u003cFeatures\u003e\u003e for details of each command."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "[[Features]]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Features"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n/NAME`, `NAME` is a parameter which can be used as `add n/John Doe`."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* Items in square brackets are optional e.g `n/NAME [t/TAG]` can be used as `n/John Doe t/friend` or as `n/John Doe`."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "// tag::addperson[]"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `addperson`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "image::addPerson.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to Retail Analytics app. +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addperson n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS g/GENDER lat/LATITUDE lon/LONGITUDE [t/TAG]...`"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "A person can have any number of tags (including 0)"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "* `addperson n/John Doe p/98765432 e/johnd@example.com a/John street g/M lat/1.2345 lon/31.1, block 123, #01-01`"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* `addperson n/Betsy Crowe t/friend e/betsycrowe@example.com a/Newgate Prison p/1234567 g/F lat/1.321 lon/32.5 t/criminal`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a product: `addproduct`"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "image::addProduct.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a product to Retail Analytics app. +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addproduct n/NAME pr/PRICE c/CATEGORY`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "The number listed beside the product entry in the GUI is not the displayed index, but the unique id permanently associated with a given product."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "* `addproduct n/Egg pr/$1 c/Food`"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding an order: `addorder`"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "Adds an order to Retail Analytics app. +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `addorder e/EMAIL o/SUBORDER [o/MORE_SUBORDERS]...` where `SUBORDER` consists of `PRODUCT_ID QUANTITY COST`."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "The number listed beside the order entry in the GUI is not the displayed index, but the unique id permanently associated with given order. Prices are manually recorded to"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "allow for discounts and free items."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "An order must have at least one suborder. Prices are recorded separately to prevent retroactive sales figure changes when product prices are modified after an order has been made."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "* `addorder e/alex@example.com o/1 2 $3` adds an order where alex bought 2 pieces of product whose id is 1 for $3 each."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "* `addorder e/bernice@example.com o/1 1 $1 o/2 1 $1` adds an order where alex bought 1 of product 1 for $1 and 1 of product 2 for $1, making $2 total."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating persons by name: `find`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "Finds persons whose names contain any of the given keywords. Updates the order view to only show the order made by the persons found.+"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `find KEYWORD [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Only the name is searched."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "* `find John` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "Returns `john` and `John Doe`"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy Tim John` +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "Returns any person having names `Betsy`, `Tim`, or `John`"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "// tag::findproducts[]"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Locating products by name: `findproductbyname`"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "Finds products whose names contain any of the given keywords."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `findproductbyname KEYWORD [MORE_KEYWORDS]...`"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "Like `find`, the search is case insensitive and the keyword order does not matter. Only the name is searched and perfect keyword matches will be returned."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Finding all products within a certain price range: `findproductbyprice`"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "Filters out all the products within the range [`MIN_PRICE`, `MAX_PRICE`] and displays them in the GUI."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "*Format*: `findproductbyprice minpr/MIN_PRICE maxpr/MAX_PRICE`"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "*Example*:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "* `findproductbyprice minpr/10 maxpr/200` finds products with price between 10 and 200, inclusive"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Find all products of a certain category: `findproductbycategory`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "Filters out all the products of a specific category and displays them in the GUI."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "*Format*: `findproductbycategory CATEGORY [MORE_CATEGORIES]...`"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "*Examples*:"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "* `findproductbycategory Clothing` +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "Finds all products of category `Clothing`"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "* `findproductbycategory Clothing health` +"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Finds all products of category `Clothing` and `Health`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "// end::findproducts[]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "// tag::recommend[]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Finding product recommendations for a person: `recommend`"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "Given a person, analyzes the app\u0027s entire order history to train a predictive model that guesses which products are likely to appeal to a given person."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "Outputs a list of (`product name`, `predicted chance of purchase`), ranked in descending order of predicted chance of purchase."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "image::RecommendEg.jpg[width\u003d\"600\"]"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The model makes predictions only considering the persons\u0027 _age_ and _gender_. To cap the influence of high volume buyers, multiple purchases of the same product are ignored. +"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "An analogous use would be how companies like Amazon know which products to recommend you in their targeted emails. Now, you can do the same for your business too. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "*For v2.0*: Support for consideration of predictive factors other than age and gender, and the option to not recommend products a user has already bought."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "*Format*: `recommend INDEX`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The sample data provided includes an order history of mostly younger persons buying `TrendyShirt`, older persons buying `Dentures`, females buying `Lipstick`, and a general audience for `Toothbrush`. You can casually validate the algorithm by noticing that the recommendations for a younger person ranks `TrendyShirt` at the front of the output, while `Dentures` will be right at the rear. Experiment by adding different persons, products, and orders, and see how he recommendations respond!"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "*Example*:"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* `recommend 1` finds recommendations for person whose last shown index is 1."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "// end::recommend[]"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all persons : `list`"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Shows a list of all persons in Retail Analytics. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `list`"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing all products : `listproduct`"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all products in Retail Analytics. +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `listproduct`"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "tag::map[]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d\u003d Displays the geographic distribution of queried customers in Retail Analytics with clustering: `map`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Displays spread of queried people in Retail Analytics on a map with clustering."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Zooming in and out of the map causes the clustering to change."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "image::GeographicVisualisation.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Possible Formats:"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* Query 1) `all`: Select all customers"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Format: `map all`"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Example: `map all`"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* Query 2) `name`: Select customer if keyword in name"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Format: `map name NAME [NAME]...`"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Example: `map name Alex Bernice`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* Query 3) `age`: Select customer if age within age range"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Format: `map age MINAGE MAXAGE`"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Example: `map age 15 56`"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* Query 4) `gen`: Select customers of specified gender"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "** Format: `map gen GENDER`"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Example: `map gen M`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* Query 5) `tag`: Select customer with any of the specified tags"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "** Format: `map tag TAG [TAG]...`"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Example: `map tag friends`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "The map clusters people by location. These clusters are displayed as blue dots."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Edits an existing person in Retail Analytics. +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `edit INDEX [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [t/TAG]...`"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "From v2.0: Edit will support age, gender, latitude, and longitude."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "* Edits the person at the specified `INDEX`. The index refers to the index number shown in the last person listing. The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "* When editing tags, the existing tags of the person will be removed i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 1 p/91234567 e/johndoe@example.com` +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the phone number and email address of the 1st person to be `91234567` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* `edit 2 n/Betsy Crower t/` +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the name of the 2nd person to be `Betsy Crower` and clears all existing tags."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `deleteperson`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Deletes the specified person from Retail Analytics. +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteperson INDEX`"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "Even when a person is deleted, his orders remain in the system. This is to ensure that financial and marketing data isn\u0027t lost when persons need to be removed."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the person at the specified `INDEX`."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "`deleteperson 2` +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Deletes the 2nd person in Retail Analytics."
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "`deleteperson 1` +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting an product : `deleteproduct`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified product from Retail Analytics. +"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteproduct PRODUCT_ID`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the product at the specified `PRODUCT_ID`."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "* The id refers to the number shown to the left of each product entry in the GUI."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "* That number is *not* the positional index, but a permanent unique id. Hence, after deletion, the ids of the other products will not cascade downward."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "* `deleteproduct 1` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the product with id 1"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting an order : `deleteorder`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the specified order from Retail Analytics. +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `deleteorder ORDER_ID`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "* Deletes the order at the specified `ORDER_ID`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "* The id refers to the number shown to the left of each order entry in the GUI."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "* That number is *not* the positional index, but a permanent unique id. Hence, after deletion, the ids of the other orders will not cascade downward."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "* `deleteorder 1` +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the order with id 1"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the last person listing, and restricts the map view to that person. +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `select INDEX`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "*Known Bug:* Select will highlight the product and order at the input positional index."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "* Selects the person and loads the Google search page the person at the specified `INDEX`."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "* The index refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "* The index *must be a positive integer* `1, 2, 3, ...`"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Selects the 2nd person in Retail Analytics."
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `history`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Restores Retail Analytics to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `undo`"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify Retail Analytics\u0027s content  +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "(`add`, `delete`, `edit`, `addproduct`, `addorder` and `clear`)."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `deleteperson 1` +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `deleteperson 1` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `redo`"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `deleteperson 1` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `deleteperson 1` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* `deleteperson 1` +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Clears all entries from Retail Analytics. +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `clear`"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `exit`"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Retail Analytics data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Retail Analytics folder."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Add* `addperson n/NAME p/PHONE_NUMBER e/EMAIL a/ADDRESS g/GENDER lat/LATITUDE lon/LONGTITUDE [t/TAG]...` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `addperson n/James Ho p/22224444 e/jamesho@example.com a/123, Clementi Rd, 1234665 g/M lat/1.2345 lon/301.1 t/friend t/colleague`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add Product* `addproduct n/NAME pr/PRICE c/CATEGORY` +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addproduct n/Egg pr/$1 c/Food`"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* *Add Order* `add e/EMAIL o/SUBORDER...` where `SUBORDER` consists of `PRODUCT_ID QUANTITY COST` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `addorder e/bernice@example.com o/1 1 $1 o/2 1 $1`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Delete* : `deleteperson INDEX` +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "e.g. `deleteperson 3`"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete Product* : `deleteproduct PRODUCT_ID` +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deleteproduct 1`"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "* *Delete Order* : `deleteorder ORDER_ID` +"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `deleteorder 5`"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "* *Edit* : `edit INDEX [n/NAME] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [t/TAG]...` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com`"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find Product by Price* `findproductbyprice minpr/MIN_PRICE maxpr/MAX_PRICE`"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find Product by Category* `findproductbycategory CATEGORY`"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* *Geographically Visualise Data* : `map`"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "**  Format1: `map all`"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Example: `map all`"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Format2: `map name NAME [NAME]...`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Example: `map name Alex Bernice`"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Format3: `map age MINAGE MAXAGE`"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Example: `map age 15 56`"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Format4: `map gen [GENDER]`"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Example: `map gen M`"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Format5: `map tag TAG [TAG]`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Example: `map tag friends`"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "-"
        },
        "content": "* *Recommendations* `recommend INDEX` +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `recommend 1`"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 55,
      "lowjiajin": 13,
      "-": 365,
      "YingxuH": 10
    }
  },
  {
    "path": "docs/team/He Yingxu.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d He Yingxu - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d PROJECT: AddressBook - Level 4"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "AddressBook - Level 4 is a retailer analysis application used for retailers to keep track of their customers and transactions. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "* *Major enhancement*: added *Completed product class together with order\u0027s GUI*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** What it does: allows the user to add and delete product. Preceding undo commands can be reversed by using the redo command."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Justification: It enables the customers to add new products into the storage. This feature is also a premise for other new features of our application."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "** Highlights: This enhancement requires new commands and parsers to handle the execution related to the new product class, as well as new elements in the UI component to visualize the product list."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added Money class to enable working with money."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "** what is does: Money class can recognize all the invalid currency type in the ISO 4217 code. Support operations like addition and subtraction. "
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "** Justification: This feature makes sure product \u0026 order class functions properly as well as supports the features of our recommendation engine. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: added basic GUI for order class."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: https://github.com/CS2103JAN2018-T15-B1/main/blob/master/collated/functional/YingxuH.md[Functional Code], https://github.com/CS2103JAN2018-T15-B1/main/blob/master/collated/test/YingxuH.md[Test Code]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "*** General "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "** help teammates implements command and model implementations for order class. (Commit https://github.com/CS2103JAN2018-T15-B1/main/pull/34/commits/7afb006202449bcf21cc45bb3a7e2cf168cec555[7afb006], https://github.com/CS2103JAN2018-T15-B1/main/pull/34/commits/5b84edd89f6cb13a8224d4a29b1eefe7830561d7[5b84edd]) (Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/40[#40])"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "*** "
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "*** Project management:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "** maintain the issue tracker during our project progress 1.1 to 1.5. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "** help solve issues reported during the in-class testing session. https://github.com/CS2103JAN2018-T15-B1/main/issues/52[52]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "*** Enhancements to existing features:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "** added product and order in GUI"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "** resized the customers\u0027 list in GUI (Pull requests https://github.com/CS2103JAN2018-T15-B1/main/pull/30[#30], https://github.com/CS2103JAN2018-T15-B1/main/pull/34[#34])"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "*** Documentation:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "** Did cosmetic tweaks to existing contents of the User Guide."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "** draw UI and Model UML diagram in DeveloperGuide to help developers better visualize the architect (posted by my teammate)."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "*** Community:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "** PRs reviewed "
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 22,
      "YingxuH": 21
    }
  },
  {
    "path": "docs/team/LowJiaJin.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "\u003d Low Jia Jin - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "\u003d\u003d PROJECT: Retail Analytics"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "Retail Analytics is a desktop application written in Java for retailers of small and medium sized businesses who are comfortable managing their marketing informatics via CLI."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "It allows them to view, list and edit customers, orders and products, as well as obtain marketing insights from said data."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "There is a supplementary GUI created with JavaFX for visualization purposes."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "It was adapted from a ~10k LoC address book application for a software engineering class project. Our team of 4 added extra tables"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "and relational logic so that advanced queries can be made in the application."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "* *Major enhancement*: Added the `recommend` command and all the logic and utilities backing it."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** What it does: Given a single user, determine which products he/she is likely to want to buy given the order history of the entire company."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Justification: Many businesses nowadays use product recommendations systems to increase sales through targeted advertising. "
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "Akin to the emails you get from Amazon recommending products you might want. "
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "Through this `recommend` command, business owners are able to know which customers to target with which products in their inventory, ultimately boosting sales."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Highlights: This enhancement morphs the software beyond a mere recording tool, to one which is capable of offering marketing insights that may not be self-evident from the raw data alone."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "It also works reasonably well despite being trained on only two features, which is a boon for smaller businesses who might not want to manage (or might not even have) excessive user data. It is a complex feature requiring six distinct classes to manage the interfacing between the app and the classification systems, as well as model training and testing protocols. "
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Credits: The open source Machine Learning library, Weka, was used to obtain the Naive Bayes classifier and the classifier\u0027s instance feeding pipeline. "
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "* *Minor enhancement*: Added 2 commands to allow the listing of all products *within a certain price range*, or *from a certain category*."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Justification: Even small and medium businesses might have a significant inventory of products that exceeds what the GUI can conveniently display at one time."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "Thus it is crucial to be able to filter that list by natural predicates, such as by the products\u0027 price range or category, to obtain more manageable subsets of products for further analysis."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "** Highlights: Both commands have distinct parsing routines and logic. "
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "The price range filter requiring two distinct arguments representing the minimal and maximal extremes of the range, and a predicate to perform the numerical comparison."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "The category filter behaves more similarly to the code for finding a person."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* *Minor enhancement*: Appropriated the original find command\u0027s behaviour for findproductsbyname."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "* *Code contributed*: https://github.com/CS2103JAN2018-T15-B1/main/blob/master/collated/functional/lowjiajin.md[Functional Code], https://github.com/CS2103JAN2018-T15-B1/main/blob/master/collated/test/lowjiajin.md[Test Code]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "** General team tasks:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "*** Helped populate sample data for fresh address book. (Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/40[#40])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "*** Added unique product and order lists, as well as relevant setters and exceptions. (Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/34[#34])"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*** Solved bugs of teammates\u0027 feature scope while they were busy. (Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/76[#76])"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "*** Wrote Appendices B, C, and F of the Developer Guide. (Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/3[#3])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "*** Rewrote sections of the User and Developer outside of my feature contribution scope to be consistent with the app. (Pull requests https://github.com/CS2103JAN2018-T15-B1/main/pull/13[#13], https://github.com/CS2103JAN2018-T15-B1/main/pull/40[#40], https://github.com/CS2103JAN2018-T15-B1/main/pull/86[#86], https://github.com/CS2103JAN2018-T15-B1/main/pull/87[#87], etc.)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "** Project Management:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "*** Helped flag, redirect, and close all duplicate issues during user testing. (https://github.com/CS2103JAN2018-T15-B1/main/issues?q\u003dis%3Aissue+is%3Aclosed[Most of] issues #43 to #73)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "*** Maintained the issue tracker in general (tagging, assignments)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "*** Reported bugs and suggestions for other group in class. (Issues https://github.com/CS2103JAN2018-T16-B2/main/issues/160[#160], https://github.com/CS2103JAN2018-T16-B2/main/issues/142[#142], https://github.com/CS2103JAN2018-T16-B2/main/issues/137[#137], https://github.com/CS2103JAN2018-T16-B2/main/issues/132[#132], and many others)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*** Fixed Gradle\u0027s javax.xml dependencies so the jar works on Java 9 as well. (Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/40[#40])"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "*** Added Weka as a dependency in Gradle (Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/14[#14])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "include::../UserGuide.adoc[tag\u003drecommend]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfindproducts]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003drecommend]"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 45,
      "-": 29
    }
  },
  {
    "path": "docs/team/Siva Subbiah.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d Siva Subbiah - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d PROJECT: Retail Analytics"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "Retail Analytics (RA) is for e-retailers who handle of customers and orders and who are comfortable with using a desktop app to manage their analytics. More importantly, RA is optimized for those who prefer to work with a Command Line Interface (CLI) while still having the benefits of a Graphical User Interface (GUI). The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 20 kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* *Major enhancement*: added `map` command and the HTML page for the browser"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** What it does: Renders a webpage which graphically visualises a list of querried customers on Google Maps."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Justification: This feature improves the product significantly because this tool enables the retailer to gain knowledge of where his customers are located. Therefore, he would be able to make better decisions for example as to where to locate a new warehouse."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Highlights: To come up with this command, I had to create a way to generate queries for the retailer to filter his list of customers by age, gender, name and tags. As such I have to create several predicates to filter the customers. I also had to read up on the Google Maps Clustering API in order to learn how to use it for our application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* *Minor enhancement*: added several attributes to the person model such as `Age`, `Gender`, `Latitude`, `Longitude`."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Justification: This feature is required so that we can get the location of the customers and the so that we can filter the list of customers based on these parameters which will be useful for the user."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* *Code contributed*: https://github.com/CS2103JAN2018-T15-B1/main/blob/master/collated/functional/Sivalavida.md[Functional Code], https://github.com/CS2103JAN2018-T15-B1/main/blob/master/collated/test/Sivalavida.md[Test Code]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** General team tasks:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Added sample data for Person with new attributes which I created.(Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/3[#23])"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Created the HTML page for the Browser Panel hosted on my Github account. (Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/3[#37])"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Wrote Appendix D of the Developer Guide. (Pull request https://github.com/CS2103JAN2018-T15-B1/main/pull/3[#3])"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Edited documentation outside of my feature contribution to keep the documentation updated."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Managed releases `v1.3` - `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "*** Reported bugs and suggestions for other group in class."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "|_Given below are sections I contributed to the User Guide._"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "include::../UserGuide.adoc[tag\u003dmap]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "include::../UserGuide.adoc[tag\u003daddperson]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dmap]"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 49,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER_DISPLAYED_INDEX \u003d \"The order index provided is invalid\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_INVALID_PRODUCT_DISPLAYED_INDEX \u003d \"The product index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PRODUCTS_LISTED_OVERVIEW \u003d \"%1$d products listed!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ORDERS_LISTED_OVERVIEW \u003d \"%1$d orders listed!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 15,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/OrderPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.OrderCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a selection change in the Order List Panel"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final OrderCard newSelection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderPanelSelectionChangedEvent(OrderCard newSelection) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCard getNewSelection() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "YingxuH": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ProductPanelSelectionChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.ProductCard;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a selection change in the Product List Panel"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductPanelSelectionChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final ProductCard newSelection;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductPanelSelectionChangedEvent(ProductCard newSelection) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.newSelection \u003d newSelection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCard getNewSelection() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return newSelection;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 3,
      "YingxuH": 25
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/RenderMapEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Indicates a request to render the locations of querried people on map"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class RenderMapEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final List\u003cPerson\u003e selectedPersons;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public RenderMapEvent(List\u003cPerson\u003e selectedPersons) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.selectedPersons \u003d selectedPersons;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public List\u003cPerson\u003e getSelectedPersons() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return selectedPersons;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 21,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of products */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of orders */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 27,
      "YingxuH": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UndoRedoStack undoRedoStack;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText, model.getAddressBook());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            command.setData(model, history, undoRedoStack);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            undoRedoStack.push(command);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return model.getFilteredProductList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return model.getFilteredOrderList();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 57,
      "YingxuH": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Adds a person to the retail analytics."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addperson\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a customer to retail analytics. \""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + PREFIX_AGE + \"AGE \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + PREFIX_LATITUDE + \"LAT \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + PREFIX_LONGITUDE + \"LON \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + PREFIX_GENDER + \"M \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + PREFIX_AGE + \"23 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + PREFIX_LATITUDE + \"1.339160 \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + PREFIX_LONGITUDE + \"103.745166 \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the database\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 11,
      "-": 59,
      "YingxuH": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddOrderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * Adds an order to the address book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class AddOrderCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addorder\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + \": Creates new order given a person\u0027s email, and at least one (Product ID, Quantity, Price)\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL (Must be an existing person) \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + PREFIX_SUBORDER + \"Product ID, Quantity, Price\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + PREFIX_EMAIL + \"john@example.com \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + PREFIX_SUBORDER + \"1 5 $3.00 \""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + PREFIX_SUBORDER + \"2 4 $2.50 \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + PREFIX_SUBORDER + \"3 1 $100 \";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New order added.\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_ORDER \u003d \"This order already exists in the app.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER \u003d \"The order is invalid. Check that the person and products exist.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final Order toAdd;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Creates an {@code AddOrderCommand} to add the specified {@code Order}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public AddOrderCommand(Order order) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        requireNonNull(order);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        toAdd \u003d order;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Checks that the {@code AddOrderCommand} is valid (i.e. {@code Order} to be created is valid)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean isValid() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        ReadOnlyAddressBook ab \u003d this.model.getAddressBook();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return toAdd.isValid(ab.getPersonList(), ab.getProductList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Check that order is valid"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (!isValid()) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            //If order invalid, decrement order counter because it was incremented during creation"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            Order.decrementOrderCounter();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            model.addOrder(toAdd);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        } catch (DuplicateOrderException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                || (other instanceof AddOrderCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddOrderCommand) other).toAdd));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "qinghao1": 67,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddProductCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Adds a product to the retail analytics."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddProductCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"addproduct\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a product to retail analytics. \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRICE + \"PRICE \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CATEGORY + \"CATEGORY \\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_NAME + \"Egg \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_PRICE + \"2.5 \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + PREFIX_CATEGORY + \"Food \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New product: %1$s\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PRODUCT \u003d \"This product already exists in the retail analytics\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Product toAdd;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Product}"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public AddProductCommand(Product product) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(product);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        toAdd \u003d product;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            model.addProduct(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (DuplicateProductException e) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PRODUCT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddProductCommand) other).toAdd));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 5,
      "YingxuH": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteperson\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Deletes the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person: %1$s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToDelete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(personToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 66,
      "YingxuH": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteOrderCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * Deletes a order identified using its id from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class DeleteOrderCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteorder\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + \": Deletes the order identified by its id.\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + \"Parameters: ID (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MESSAGE_DELETE_ORDER_SUCCESS \u003d \"Deleted Order: %1$s\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MESSAGE_INVALID_ORDER \u003d \"The order is invalid. Check that the order ID is correct.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final int targetID;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private Order orderToDelete;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public DeleteOrderCommand(int targetID) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.targetID \u003d targetID;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        requireNonNull(orderToDelete);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            model.deleteOrder(orderToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        } catch (OrderNotFoundException e) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new AssertionError(\"The target order cannot be missing.\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_ORDER_SUCCESS, orderToDelete));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cOrder\u003e lastShownList \u003d model.getFilteredOrderList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        orderToDelete \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        int numberOrdersMatching \u003d 0;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //There should only be one order that matches the ID, but we check anyway"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (Order order : lastShownList) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            if (order.getId() \u003d\u003d targetID) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                orderToDelete \u003d order;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                ++numberOrdersMatching;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (orderToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        } else if (numberOrdersMatching \u003e 1) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            //There are more than 1 order in the list with same ID! This should never happen."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new CommandException(\"More than 1 order with ID \" + targetID + \" found.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 this.targetID \u003d\u003d ((DeleteOrderCommand) other).targetID // state check"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 Objects.equals(this.orderToDelete, ((DeleteOrderCommand) other).orderToDelete));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "qinghao1": 66,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteProductCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@qinghao1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Deletes a product identified using its ID."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DeleteProductCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"deleteproduct\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \": Deletes the product identified by its ID.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Parameters: ID (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_DELETE_PRODUCT_SUCCESS \u003d \"Deleted Product: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_INVALID_PRODUCT \u003d \"The product is invalid. Check that the product ID is correct.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private int targetID;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Product productToDelete;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeleteProductCommand(int targetID) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.targetID \u003d targetID;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(productToDelete);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            model.deleteProduct(productToDelete);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (ProductNotFoundException e) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"The product cannot be missing.\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PRODUCT_SUCCESS, productToDelete));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProduct\u003e lastShownList \u003d model.getFilteredProductList();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productToDelete \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //There should only be one product that matches the ID"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (Product product : lastShownList) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (product.getId() \u003d\u003d targetID) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                productToDelete \u003d product;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (productToDelete \u003d\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new CommandException(MESSAGE_INVALID_PRODUCT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 this.targetID \u003d\u003d (((DeleteProductCommand) other).targetID) // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 Objects.equals(this.productToDelete, ((DeleteProductCommand) other).productToDelete));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 24,
      "YingxuH": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person  personToEdit;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Gender updatedGender \u003d personToEdit.getGender();// edit command does not allow editing gender"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Age updatedAge \u003d personToEdit.getAge();// edit command does not allow editing age"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Latitude updatedLatitude \u003d personToEdit.getLatitude();// edit command does not allow editing latitude"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Longitude updatedLongitude \u003d personToEdit.getLongitude();// edit command does not allow editing longitude"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Person(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedGender,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                updatedAge, updatedLatitude, updatedLongitude, updatedTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 8,
      "-": 225
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.OrderBelongsToPeoplePredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Finds and lists all persons in retail analytics whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String message \u003d Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    //@@author qinghao1"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Get emails of filtered people"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for(Person person : this.model.getFilteredPersonList()) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            emails.add(person.getEmail().toString());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Create predicate to filter order list"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        OrderBelongsToPeoplePredicate orderBelongsToPeoplePredicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Update order list"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        model.updateFilteredOrderList(orderBelongsToPeoplePredicate);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return new CommandResult(getMessageForListShownSummary(model.getFilteredPersonList().size(), message));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "qinghao1": 19,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindProductByCategoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.ProductCategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Lists all product from the specified category"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class FindProductByCategoryCommand extends Command {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findproductbycategory\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose categories contain any of \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" food\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String message \u003d Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ProductCategoryContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public FindProductByCategoryCommand(ProductCategoryContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        model.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new CommandResult(getMessageForListShownSummary(model.getFilteredProductList().size(), message));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                || (other instanceof FindProductByCategoryCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindProductByCategoryCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 35,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindProductByNameCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.ProductNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class FindProductByNameCommand extends Command {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findproductbyname\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose names contain any of \""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" egg\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String message \u003d Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ProductNameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public FindProductByNameCommand(ProductNameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        model.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new CommandResult(getMessageForListShownSummary(model.getFilteredProductList().size(), message));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                || (other instanceof FindProductByNameCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindProductByNameCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 31,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindProductByPriceCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.ProductCostsBetweenPredicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_PRICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_PRICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Lists all the products which prices lie within the specified interval."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class FindProductByPriceCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"findproductbyprice\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all products whose price lies within \""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"the specified min/max (inclusive) interval and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Parameters: min/NUMBER max/NUMBER\\n\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + String.format(\"Example: %1$s %2$s10 %3$s15\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    COMMAND_WORD, PREFIX_MIN_PRICE.getPrefix(), PREFIX_MAX_PRICE.getPrefix());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String message \u003d Messages.MESSAGE_PRODUCTS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ProductCostsBetweenPredicate predicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public FindProductByPriceCommand(ProductCostsBetweenPredicate predicate) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        model.updateFilteredProductList(predicate);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new CommandResult(getMessageForListShownSummary(model.getFilteredProductList().size(), message));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                || (other instanceof FindProductByPriceCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindProductByPriceCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 36,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.OrderBelongsToPeoplePredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    //@@author qinghao1"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Get emails of filtered people"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for(Person person : this.model.getFilteredPersonList()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            emails.add(person.getEmail().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Create predicate to filter order list"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        OrderBelongsToPeoplePredicate orderBelongsToPeoplePredicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Update order list"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        model.updateFilteredOrderList(orderBelongsToPeoplePredicate);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 19,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListProductCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PRODUCTS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Lists all products in the address book to the user."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ListProductCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"listproduct\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all products\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        model.updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 17,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/MapCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.commons.events.ui.RenderMapEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.OrderBelongsToPeoplePredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Displays the geographic distribution of queried customers in Retail Analytics."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class MapCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"map\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //query words"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String ALL_PERSONS_QUERY_WORD \u003d \"all\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String NAME_CONTAINS_KEYWORDS_QUERY_WORD \u003d \"name\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String WITHIN_AGE_RANGE_QUERY_WORD \u003d \"age\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String GENDER_QUERY_WORD \u003d \"gen\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String CONTAINS_TAG_QUERY_WORD \u003d \"tag\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //number of parameters (including query word) for respective query words"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int ALL_PERSONS_QUERY_NUM_PARAMETERS \u003d 0;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int NAME_CONTAINS_KEYWORDS_QUERY_MIN_NUM_PARAMETERS \u003d 1; //min"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int WITHIN_AGE_RANGE_QUERY_NUM_PARAMETERS \u003d 2;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int IS_GENDER_QUERY_NUM_PARAMETERS \u003d 1;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final int CONTAINS_TAG_QUERY_NUM_PARAMETERS \u003d 1; //min"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \": Displays the geographic distribution of queried customers in Retail Analytics with clustering.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 1) \" + ALL_PERSONS_QUERY_WORD + \": Select all customers - Parameters: none \\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + ALL_PERSONS_QUERY_WORD + \"\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 2) \" + NAME_CONTAINS_KEYWORDS_QUERY_WORD + \": Select customer if keyword in name  - Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + NAME_CONTAINS_KEYWORDS_QUERY_WORD + \" Alex Bernice\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 3) \" + WITHIN_AGE_RANGE_QUERY_WORD + \": Select customer if age within age range - Parameters: MIN_AGE MAX_AGE\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + WITHIN_AGE_RANGE_QUERY_WORD + \" 15 56\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 4) \" + GENDER_QUERY_WORD + \": Select customers of specified gender - Parameters: GENDER\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + GENDER_QUERY_WORD + \" M\\n\""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Query 5) \" + CONTAINS_TAG_QUERY_WORD + \": Select customer with any of the specified tags - Parameters: TAG\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            + \"Examples: \" + COMMAND_WORD + \" \" + CONTAINS_TAG_QUERY_WORD + \" friends\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_MAP_PERSON_SUCCESS \u003d \"Number of customers displayed on map: %1$s\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public MapCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        List\u003cPerson\u003e updatedPersonList \u003d model.getFilteredPersonList();//see find command when using query"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        EventsCenter.getInstance().post(new RenderMapEvent(updatedPersonList));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //Get emails of filtered people"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        for(Person person : updatedPersonList) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            emails.add(person.getEmail().toString());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //Create predicate to filter order list"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        OrderBelongsToPeoplePredicate orderBelongsToPeoplePredicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //Update order list"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        model.updateFilteredOrderList(orderBelongsToPeoplePredicate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_MAP_PERSON_SUCCESS, updatedPersonList.size()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof MapCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((MapCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 78,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RecommendCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.recommender.RecommenderManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Finds recommendations for which products a given person is likely to buy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class RecommendCommand extends Command {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"recommend\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Recommendations for: %1$s\\n\" +"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            \"Output format: [\u003cproduct name, probability of buying\u003e...]\\n\" +"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            \"%2$s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds the products most likely to be bought by the \" +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            \"person identified by the index number used in the last person listing.\\n\" +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            \"Parameters: INDEX (must be a positive integer)\\n\" +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            \"Example:\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String ARFF_NAME \u003d \"data/Orders.arff\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ReadOnlyAddressBook addressBook;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Person personToRecommendFor;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public RecommendCommand(Index targetIndex, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        personToRecommendFor \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        RecommenderManager recommenderManager \u003d new RecommenderManager(ARFF_NAME, addressBook);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String recommendations \u003d recommenderManager.getRecommendations(personToRecommendFor);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, personToRecommendFor.getName(), recommendations));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 46,
      "-": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_GENDER,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        PREFIX_AGE, PREFIX_LATITUDE, PREFIX_LONGITUDE, PREFIX_TAG);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_ADDRESS, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_GENDER,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                PREFIX_AGE, PREFIX_LATITUDE, PREFIX_LONGITUDE)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER)).get();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            Age age \u003d ParserUtil.parseAge(argMultimap.getValue(PREFIX_AGE)).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            Latitude latitude \u003d ParserUtil.parseLatitude(argMultimap.getValue(PREFIX_LATITUDE)).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            Longitude longitude \u003d ParserUtil.parseLongitude(argMultimap.getValue(PREFIX_LONGITUDE)).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            Person person \u003d new Person(name, phone, email, address, gender, age, latitude, longitude, tagList);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 11,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddOrderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddOrderCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * Parses input arguments and creates a new AddOrderCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class AddOrderCommandParser implements Parser\u003cAddOrderCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public AddOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_EMAIL, PREFIX_SUBORDER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_EMAIL, PREFIX_SUBORDER)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            //Note: We use email String as Order foreign key"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            String email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get().toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            List\u003cSubOrder\u003e subOrderList \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    ParserUtil.parseSubOrders(argMultimap.getAllValues(PREFIX_SUBORDER));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            Order order \u003d new Order(email, subOrderList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            return new AddOrderCommand(order);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Returns true if none of the prefixes contains empty values in the given"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "qinghao1": 43,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddProductCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.AddProductCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.exceptions.CurrencyUnknownException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parses input arguments and creates a new AddProductCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class AddProductCommandParser implements Parser\u003cAddProductCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddProductCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns an AddProductCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public AddProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PRICE, PREFIX_CATEGORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_PRICE, PREFIX_CATEGORY)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            ProductName name \u003d ParserUtil.parseProductName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Money price \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_PRICE)).get();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Category category \u003d ParserUtil.parseCategory(argMultimap.getValue(PREFIX_CATEGORY)).get();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Product product \u003d new Product(name, price, category);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddProductCommand(product);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(iae.getMessage(), iae);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (CurrencyUnknownException cue) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ParseException(cue.getMessage(), cue);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 8,
      "YingxuH": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook used to transmit the address book for recommender"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput, ReadOnlyAddressBook addressBook) throws ParseException {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //@@author YingxuH"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case AddProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case AddOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new AddOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //@@author Sivalavida"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        case MapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            return new MapCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case DeleteProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new DeleteProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        case DeleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new DeleteOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        //@@author lowjiajin"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        case FindProductByCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return new FindProductByCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        case FindProductByNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return new FindProductByNameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        case FindProductByPriceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return new FindProductByPriceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        case ListProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return new ListProductCommand();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        //@@author lowjiajin"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        case RecommendCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return new RecommendCommandParser(addressBook).parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Overload parseCommand for commands that do not need addressBook, to maintain backwards compatibility"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            case AddProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return new AddProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "                return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case MapCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return new MapCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "                return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            case DeleteProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return new DeleteProductCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            case DeleteOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return new DeleteOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ClearCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindProductByCategoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindProductByCategoryCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindProductByNameCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindProductByNameCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            case FindProductByPriceCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                return new FindProductByPriceCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListProductCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListProductCommand();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "            case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ListCommand();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "            case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HistoryCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "            case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "                return new ExitCommand();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "            case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "                return new HelpCommand();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "                return new UndoCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                return new RedoCommand();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            case AddOrderCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                return new AddOrderCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 8,
      "lowjiajin": 19,
      "-": 152,
      "YingxuH": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final Prefix PREFIX_AGE \u003d new Prefix(\"age/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final Prefix PREFIX_LATITUDE \u003d new Prefix(\"lat/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final Prefix PREFIX_LONGITUDE \u003d new Prefix(\"lon/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_CATEGORY \u003d new Prefix(\"c/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Prefix PREFIX_PRICE \u003d new Prefix(\"pr/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_SUBORDER \u003d new Prefix(\"o/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MIN_PRICE \u003d new Prefix(\"minpr/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_MAX_PRICE \u003d new Prefix(\"maxpr/\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 4,
      "-": 18,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteOrderCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.DeleteOrderCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parses input arguments and creates a new DeleteOrderCommand object"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DeleteOrderCommandParser implements Parser\u003cDeleteOrderCommand\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteOrderCommand"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns an DeleteOrderCommand object for execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeleteOrderCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            int id \u003d ParserUtil.parseID(args);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return new DeleteOrderCommand(id);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteOrderCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 13,
      "YingxuH": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteProductCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.commands.DeleteProductCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Parses input arguments and creates a new DeleteProductCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class DeleteProductCommandParser implements Parser\u003cDeleteProductCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteProductCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * and returns an DeleteProductCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public DeleteProductCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            int id \u003d ParserUtil.parseID(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteProductCommand(id);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteProductCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 14,
      "YingxuH": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindProductByCategoryCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindProductByCategoryCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.ProductCategoryContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Parses input arguments and creates a new FindProductByCategoryCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class FindProductByCategoryCommandParser implements Parser\u003cFindProductByCategoryCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindProductByCategoryCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * and returns a FindProductByCategoryCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public FindProductByCategoryCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindProductByCategoryCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String[] categoryKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new FindProductByCategoryCommand("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new ProductCategoryContainsKeywordsPredicate(Arrays.asList(categoryKeywords)));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 25,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindProductByNameCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindProductByNameCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.ProductNameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class FindProductByNameCommandParser implements Parser\u003cFindProductByNameCommand\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public FindProductByNameCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindProductByNameCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String[] categoryKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new FindProductByNameCommand("
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new ProductNameContainsKeywordsPredicate(Arrays.asList(categoryKeywords)));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 16,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindProductByPriceCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MAX_PRICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MIN_PRICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindProductByPriceCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.ProductCostsBetweenPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Parses input arguments and creates a new FindProductByPriceCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class FindProductByPriceCommandParser implements Parser\u003cFindProductByPriceCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Parses the given {@code String} of arguments for the min and max price delimiters of the"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * FindProductByPriceCommand and returns a FindProductByPriceCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public FindProductByPriceCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_MIN_PRICE, PREFIX_MAX_PRICE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Ensures that the input conforms to the min and max price argument delimiters."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_MIN_PRICE, PREFIX_MAX_PRICE)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindProductByPriceCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            Money minPrice \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_MIN_PRICE)).get();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            Money maxPrice \u003d ParserUtil.parsePrice(argMultimap.getValue(PREFIX_MAX_PRICE)).get();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return new FindProductByPriceCommand(new ProductCostsBetweenPredicate(minPrice, maxPrice));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 40,
      "-": 14,
      "YingxuH": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/MapCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.commands.MapCommand.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.model.person.Age.isValidAge;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.model.person.Gender.isValidGender;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.logic.commands.MapCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Parses input arguments and creates a new MapCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class MapCommandParser implements Parser\u003cMapCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the MapCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * and returns an MapCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public MapCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String[] queryKeywords \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String queryWord \u003d queryKeywords[0];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String[] queryParameters \u003d Arrays.copyOfRange(queryKeywords, 1, queryKeywords.length);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if(!isValidQueryType(queryWord) || !isValidQueryParameters(queryWord, queryParameters)){"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, MapCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Predicate\u003cPerson\u003e predicate \u003d getPredicate(queryWord, queryParameters);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new MapCommand(predicate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *Checks if the given queryParameters are conform to the format of the queryWord"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private boolean isValidQueryParameters(String queryWord, String[] queryParameters) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        int queryParametersLength \u003d queryParameters.length;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        switch (queryWord){"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case ALL_PERSONS_QUERY_WORD:"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return queryParametersLength \u003d\u003d ALL_PERSONS_QUERY_NUM_PARAMETERS;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case NAME_CONTAINS_KEYWORDS_QUERY_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return queryParametersLength \u003e\u003d NAME_CONTAINS_KEYWORDS_QUERY_MIN_NUM_PARAMETERS ;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case WITHIN_AGE_RANGE_QUERY_WORD:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return (queryParametersLength \u003d\u003d WITHIN_AGE_RANGE_QUERY_NUM_PARAMETERS\u0026\u0026"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        isValidAge(queryParameters[0])\u0026\u0026"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        isValidAge(queryParameters[1]));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case GENDER_QUERY_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return queryParametersLength \u003d\u003d IS_GENDER_QUERY_NUM_PARAMETERS \u0026\u0026"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        isValidGender(queryParameters[0]);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case CONTAINS_TAG_QUERY_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return queryParametersLength \u003e\u003d CONTAINS_TAG_QUERY_NUM_PARAMETERS;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return false;//unknown query"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Assumes that the queryWord and queryParameters are valid and returns the corresponding"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * predicate"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Predicate getPredicate(String queryWord, String[] queryParameters) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        switch (queryWord){"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case ALL_PERSONS_QUERY_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case NAME_CONTAINS_KEYWORDS_QUERY_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return new NameContainsKeywordsPredicate(Arrays.asList(queryParameters)) ;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case WITHIN_AGE_RANGE_QUERY_WORD:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return new AgeWithinRangePredicate(new Age(queryParameters[0]), new Age(queryParameters[1]));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case GENDER_QUERY_WORD:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return new GenderPredicate(new Gender(queryParameters[0]));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            case CONTAINS_TAG_QUERY_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return new ContainsTagPredicate(Arrays.asList(queryParameters));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            default:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return null;//unknown query"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private boolean isValidQueryType(String queryWord) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return queryWord.equals(ALL_PERSONS_QUERY_WORD) ||"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                queryWord.equals(NAME_CONTAINS_KEYWORDS_QUERY_WORD) ||"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                queryWord.equals(WITHIN_AGE_RANGE_QUERY_WORD) ||"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                queryWord.equals(GENDER_QUERY_WORD) ||"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                queryWord.equals(CONTAINS_TAG_QUERY_WORD);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 95,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductName;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_INVALID_ID \u003d \"ID is invalid! Must be non-zero unsigned integer\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses ID field and returns an int which is the ID."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalValueException if the specified ID is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static int parseID(String idString) throws IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedID \u003d idString.trim();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedID)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_ID);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return Integer.parseInt(trimmedID);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author Sivalavida"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code String gender} into a {@code Gender}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @throws IllegalValueException if the given {@code gender} is invalid."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Gender parseGender(String gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Gender.isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Gender(trimmedGender);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e gender} into an {@code Optional\u003cGender\u003e} if {@code gender} is present."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Optional\u003cGender\u003e parseGender(Optional\u003cString\u003e gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return gender.isPresent() ? Optional.of(parseGender(gender.get())) : Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code String age} into a {@code Age}."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @throws IllegalValueException if the given {@code age} is invalid."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Age parseAge(String age) throws IllegalValueException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String trimmedAge \u003d age.trim();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Age.isValidAge(trimmedAge)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Age.MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Age(trimmedAge);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e age} into an {@code Optional\u003cAge\u003e} if {@code age} is present."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Optional\u003cAge\u003e parseAge(Optional\u003cString\u003e age) throws IllegalValueException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return age.isPresent() ? Optional.of(parseAge(age.get())) : Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code String latitude} into a {@code Latitude}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @throws IllegalValueException if the given {@code latitude} is invalid."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Latitude parseLatitude(String latitude) throws IllegalValueException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(latitude);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String trimmedLatitude \u003d latitude.trim();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Latitude.isValidLatitude(trimmedLatitude)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Latitude.MESSAGE_LATITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Latitude(trimmedLatitude);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e latitude} into an {@code Optional\u003cLatitude\u003e} if {@code latitude} is present."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Optional\u003cLatitude\u003e parseLatitude(Optional\u003cString\u003e latitude) throws IllegalValueException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(latitude);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return latitude.isPresent() ? Optional.of(parseLatitude(latitude.get())) : Optional.empty();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code String longitude} into a {@code Longitude}."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @throws IllegalValueException if the given {@code longitude} is invalid."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Longitude parseLongitude(String longitude) throws IllegalValueException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(longitude);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String trimmedLongitude \u003d longitude.trim();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Longitude.isValidLongitude(trimmedLongitude)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Longitude.MESSAGE_LONGITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Longitude(trimmedLongitude);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e longitude} into an {@code Optional\u003cLongitude\u003e} if {@code longitude} is present."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static Optional\u003cLongitude\u003e parseLongitude(Optional\u003cString\u003e longitude) throws IllegalValueException {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(longitude);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return longitude.isPresent() ? Optional.of(parseLongitude(longitude.get())) : Optional.empty();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /// product-level"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static ProductName parseProductName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!ProductName.isValidProductName(trimmedName)) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(ProductName.MESSAGE_PRODUCT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ProductName(trimmedName);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Optional\u003cProductName\u003e parseProductName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return name.isPresent() ? Optional.of(parseProductName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String price} into a {@code price}."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalValueException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Money parsePrice(String price) throws IllegalValueException {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedPrice \u003d price.trim();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Currency currency \u003d Money.DEFAULT_CURRENCY;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Money.isValidMoney(trimmedPrice)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Money.MESSAGE_MONEY_CONSTRAINTS);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else if (Money.isValidMoneyWithUnknownPrefix(trimmedPrice)) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String currencySymbol \u003d trimmedPrice.split(Money.MONEY_DIGITS)[0];"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            currency \u003d Money.parseCurrency(currencySymbol);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String[] splitted \u003d trimmedPrice.split(Money.MONEY_PREFIX);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            trimmedPrice \u003d splitted[splitted.length-1];"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(new BigDecimal(trimmedPrice), currency);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e price} into an {@code Optional\u003cprice\u003e} if {@code price} is present."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Optional\u003cMoney\u003e parsePrice(Optional\u003cString\u003e price) throws IllegalValueException {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(price);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return price.isPresent() ? Optional.of(parsePrice(price.get())) : Optional.empty();"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String category} into a {@code category}."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalValueException if the given {@code category} is invalid."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Category parseCategory(String category) throws IllegalValueException {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String trimmedCategory \u003d category.trim();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!Category.isValidCategory(trimmedCategory)) {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Category(trimmedCategory);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e category} into an {@code Optional\u003ccategory\u003e} if {@code category} is present."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Optional\u003cCategory\u003e parseCategory(Optional\u003cString\u003e category) throws IllegalValueException {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(category);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return category.isPresent() ? Optional.of(parseCategory(category.get())) : Optional.empty();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /// tag-level"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String subOrder} into an actual {@code SubOrder}."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code subOrder} is invalid."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    public static SubOrder parseSubOrder(String subOrder) throws IllegalValueException {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(subOrder);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmed \u003d subOrder.trim();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        String[] components \u003d trimmed.split(\"\\\\s\");"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "        int productId;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        int numProduct;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "        Money productPrice;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        if(components.length !\u003d 3)"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(SubOrder.MESSAGE_SUBORDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            productId \u003d Integer.parseInt(components[0]);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "            numProduct \u003d Integer.parseInt(components[1]);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            productPrice \u003d Money.parsePrice(components[2]);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(SubOrder.MESSAGE_SUBORDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        return new SubOrder(productId, numProduct, productPrice);"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e subOrders} into a {@code List\u003cSubOrder\u003e}"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cSubOrder\u003e parseSubOrders(Collection\u003cString\u003e subOrders) throws IllegalValueException {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(subOrders);"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cSubOrder\u003e subOrderList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String subOrder : subOrders) {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            subOrderList.add(parseSubOrder(subOrder));"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "        return subOrderList;"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 106,
      "-": 219,
      "YingxuH": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RecommendCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RecommendCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Parses input arguments and creates a new RecommendCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class RecommendCommandParser implements Parser\u003cRecommendCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private ReadOnlyAddressBook addressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RecommendCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * and returns a RecommendCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public RecommendCommandParser(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.addressBook \u003d addressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public RecommendCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return new RecommendCommand(index, addressBook);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, RecommendCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 28,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/recommender/ArffFormatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "package seedu.address.logic.recommender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Controls how the training data is formatted into header and data entries of the .arff format."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ArffFormatter {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String PREFIX_NOT \u003d \"!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String WEKA_DELIMITER \u003d \",\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final HashMap\u003cInteger, String\u003e productIdToNameMap;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    "
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ArffFormatter(HashMap\u003cInteger, String\u003e productIdToNameMap) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.productIdToNameMap \u003d productIdToNameMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * For the header, a product is converted into two distinct classes for prediction:"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * to buy the product, or not to buy the product."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public String convertProductToBinaryLabels(Product product) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return String.format(\"%1$s%3$s %2$s%1$s\", productIdToNameMap.get(product.getId()), PREFIX_NOT, WEKA_DELIMITER);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Concatenates the {@code person}\u0027s features and his class (i.e. has bought a product or not) into an .arff entry"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public String formatDataEntry(Person person, Product product, HashSet\u003cInteger\u003e productsBoughtByPerson) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return String.format(\"%1$s%2$s\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                formatPersonFeatures(person), getProductClassLabel(product.getId(), productsBoughtByPerson));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return the delimited training features"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private String formatPersonFeatures(Person person) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return String.format(\"\\n%1$s%3$s%2$s%3$s\", person.getAge().value, person.getGender(), WEKA_DELIMITER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Checks if product has been bought by a person and formats it as either a positive or negative class entry."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private String getProductClassLabel(Integer productId, HashSet\u003cInteger\u003e productsBoughtByPerson) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        boolean hasBoughtProduct \u003d productsBoughtByPerson.contains(productId);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (hasBoughtProduct) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return productIdToNameMap.get(productId);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return PREFIX_NOT.concat(productIdToNameMap.get(productId));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 54,
      "-": 3,
      "YingxuH": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/recommender/ArffWriter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.recommender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.BufferedWriter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Handles the writing of {@code addressBook}\u0027s data into an .arff file for recommender training."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ArffWriter {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    "
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String ARFF_HEADER \u003d \"@RELATION ConvertedOrders\\n\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"@ATTRIBUTE age NUMERIC\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"@ATTRIBUTE gender {M, F}\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"@ATTRIBUTE class {%s}\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"@DATA\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ARFF_HEADER_WRITE_FAIL \u003d \"Failed to write .arff header information\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" while building recommender training set.\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ARFF_DATA_WRITE_FAIL \u003d \"Failed to write .arff data entries\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" while building recommender training set.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ARFF_CREATION_FAIL \u003d \"Failed to create .arff\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" while building recommender training set.\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ARFF_MAKE_CANNOT_CLOSE \u003d \"Failed to close .arff\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" while building recommender training set.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_WRITE \u003d \"Cannot write to .arff file.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ObservableList\u003cPerson\u003e persons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ObservableList\u003cProduct\u003e products;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ObservableList\u003cOrder\u003e orders;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final File arff;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ArffFormatter formatter;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ArffWriter(File arff, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.arff \u003d arff;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        persons \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        products \u003d addressBook.getProductList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        orders \u003d addressBook.getOrderList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        formatter \u003d new ArffFormatter(getProductIdToNameMap());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Writes orders to file located at {@code arff}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void makeArffFromOrders() {        "
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            BufferedWriter writer \u003d makeWriter();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            writeArffHeader(writer);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            writeArffData(writer);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            closeArffFile(writer);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(String.format(\"%1$s.\\n%2$s\", MESSAGE_CANNOT_WRITE, ioe.getMessage()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return HashMap which allows retrieval of a {@code product}\u0027s name with its numerical id as key."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private HashMap\u003cInteger, String\u003e getProductIdToNameMap() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        HashMap\u003cInteger, String\u003e productIdToNameMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        "
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        for (Product product : products) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            productIdToNameMap.put(product.getId(), product.getName().fullProductName);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return productIdToNameMap;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Makes a directory for the .arff file if it doesn\u0027t already exist, then,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return the new writer in erstwhile directory."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private BufferedWriter makeWriter() throws IOException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        arff.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return new BufferedWriter(new FileWriter(arff));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new IOException(MESSAGE_ARFF_CREATION_FAIL);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Writes both the positive and negative purchase decisions as classes to be predicted, for every product."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void writeArffHeader(BufferedWriter writer) throws IOException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String classLabels \u003d products.stream()"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                .map(formatter::convertProductToBinaryLabels).collect(Collectors.joining(\", \"));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            writer.write(String.format(ARFF_HEADER, classLabels));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new IOException(MESSAGE_ARFF_HEADER_WRITE_FAIL);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void writeArffData(BufferedWriter writer) throws IOException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap \u003d makeProductsBoughtMap();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        for (Person person : persons) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            writeOrdersOfPersonToArff(person, productsBoughtMap, writer);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return Map which allows retrieval of a set of all products a {@code person} has bought, "
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * keyed by {@code person}\u0027s id."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Map\u003cString, HashSet\u003cInteger\u003e\u003e makeProductsBoughtMap() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        for (Order order : orders) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            recordWhichPersonBoughtWhichProduct(productsBoughtMap, order);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return productsBoughtMap;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * For a given order, records the {@code person} as having bought the {@code product},"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * via {@code productsBoughtMap}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void recordWhichPersonBoughtWhichProduct(Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap, Order order) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String personId \u003d order.getPersonId();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        for (SubOrder suborder : order.getSubOrders()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            if (productsBoughtMap.get(personId) \u003d\u003d null) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                productsBoughtMap.put(personId, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            productsBoughtMap.get(personId).add(suborder.getProductID());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Write whether a {@code person} has purchased a {@code product} as a data entry in the .arff file,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * for every {@code product} in the {@code addressBook}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void writeOrdersOfPersonToArff ("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            Person person, Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap, BufferedWriter writer) throws IOException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            for (Product product : products) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                writer.write(formatter.formatDataEntry(person, product, "
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                        getProductsBoughtByPerson(person, productsBoughtMap)));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new IOException(MESSAGE_ARFF_DATA_WRITE_FAIL);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public HashSet\u003cInteger\u003e getProductsBoughtByPerson(Person person, Map\u003cString, HashSet\u003cInteger\u003e\u003e productsBoughtMap) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Defaults to an empty set in cases where a {@code person} has never bought anything."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return productsBoughtMap.getOrDefault(person.getEmail().value, new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void closeArffFile(BufferedWriter writer) throws IOException {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            writer.close();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new IOException(MESSAGE_ARFF_MAKE_CANNOT_CLOSE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 156,
      "-": 15,
      "YingxuH": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/recommender/BuyDecision.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "package seedu.address.logic.recommender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.lang.Double.compare;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Represents the confidence in the decision of whether to buy a given product, referenced by its {@code productName}."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Package private to Recommender."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "class BuyDecision implements Comparable\u003cBuyDecision\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_COMPARING_NULL \u003d \"Cannot compare a BuyDecision with a null.\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private String productName;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private double buyProb;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    BuyDecision(String productName, double buyProb) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.productName \u003d productName;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.buyProb \u003d buyProb;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private String getProductName() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return productName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private double getBuyProb() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return buyProb;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Used in sorting the recommendations by probability of purchase,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * so the most confident recommendations are presented first."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public int compareTo(BuyDecision other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (!(other instanceof BuyDecision)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_COMPARING_NULL);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return compare(other.getBuyProb(), buyProb);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Controls how the each product\u0027s recommendation is displayed in the CLI output."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * {@code productName} and {@code buyProb} delimited with a colon and space."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return String.format(\"%1$s: %2$f\", productName, buyProb);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 47,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/recommender/ProductTrainer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "package seedu.address.logic.recommender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.util.Random;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.attributeSelection.ChiSquaredAttributeEval;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.attributeSelection.Ranker;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.classifiers.Evaluation;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.classifiers.bayes.NaiveBayes;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.classifiers.meta.AttributeSelectedClassifier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.core.Instances;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.filters.Filter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.filters.unsupervised.instance.RemoveWithValues;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Trains a classifier to predict whether or not one specific product will be bought."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ProductTrainer {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_ISOLATE_PRODUCT \u003d \"{@code isolator} has invalid settings for orders. \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Error when isolating orders of a given product.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_BUILD_CLASSIFIER \u003d \"{@code orders} format is invalid. \""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Error building classifier.\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_EVALUATE_CLASSIFIER \u003d \"Invalid parameters for \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"{@code crossValidateModel()} method, or orders modified after classifier built. \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"Error evaluating classifier.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final int WEKA_NUM_FEATURES_USED \u003d 2;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final int WEKA_MIN_ORDERS \u003d 5;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final boolean WEKA_EVALUATE_CLASSIFIER \u003d false; // Flag to print evaluation data for debugging"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Instances orders;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private AttributeSelectedClassifier attrSelClassifier;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Evaluation evaluation;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private boolean canBuild;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ProductTrainer (Instances trainingOrders, RemoveWithValues isolator) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        orders \u003d trainingOrders;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        isolateOrdersOfAProduct(isolator);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        trainClassifier();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean hasTrained() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return canBuild;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public AttributeSelectedClassifier getClassifier() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assert attrSelClassifier !\u003d null; // Should not ever get the classifier before training it."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return attrSelClassifier;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Remove all orders not involving a given product from the training dataset."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Allows a binary decision on whether or not to buy a given product."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void isolateOrdersOfAProduct(RemoveWithValues isolator) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            isolator.setInputFormat(orders);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            orders \u003d Filter.useFilter(orders, isolator);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_ISOLATE_PRODUCT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    "
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void trainClassifier() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (hasEnoughOrdersToTrain()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            initClassifier();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            buildClassifier();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (WEKA_EVALUATE_CLASSIFIER) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            evaluateClassifier();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Ensures that noise is suppressed by not recommending products with too few {@code orders}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * to provide a reliable Recommender prediction."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private boolean hasEnoughOrdersToTrain() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return orders.numInstances() \u003e\u003d WEKA_MIN_ORDERS;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void initClassifier() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        attrSelClassifier \u003d new AttributeSelectedClassifier();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Set classifier type"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        NaiveBayes bayes \u003d new NaiveBayes();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        attrSelClassifier.setClassifier(bayes);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Set feature evaluation criteria for classifier"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ChiSquaredAttributeEval chiEval \u003d new ChiSquaredAttributeEval();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        attrSelClassifier.setEvaluator(chiEval);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Set feature search criteria for classifier"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Ranker ranker \u003d new Ranker();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ranker.setNumToSelect(WEKA_NUM_FEATURES_USED);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        attrSelClassifier.setSearch(ranker);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void buildClassifier() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            attrSelClassifier.buildClassifier(orders);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            canBuild \u003d true;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            canBuild \u003d false;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_BUILD_CLASSIFIER);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void evaluateClassifier() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Should not ever evaluate classifier if it has failed to build, because there is no classifier to evaluate."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assert canBuild;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            // Evaluates the classifier with a n-fold cross validation, where n \u003d {@code WEKA_MIN_ORDERS}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            evaluation \u003d new Evaluation(orders);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            evaluation.crossValidateModel(attrSelClassifier, orders, WEKA_MIN_ORDERS, new Random(1));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            System.out.println(orders.classAttribute());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            System.out.println(evaluation.toSummaryString());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_EVALUATE_CLASSIFIER);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 124
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/recommender/Recommender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "package seedu.address.logic.recommender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.classifiers.Classifier;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import weka.core.Attribute;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import weka.core.DenseInstance;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import weka.core.Instance;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.core.Instances;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * The logic that determines which products a person is most likely to buy for {@code RecommenderManager}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class Recommender {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static Recommender theOne \u003d null;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final int POSITIVE_CLASS_INDEX \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_CLASSIFY_INSTANCE \u003d \"The attribute format has to match the classifier \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \"for the product to be classified.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String AGE_ATTRIBUTE_NAME \u003d \"age\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String GENDER_ATTRIBUTE_NAME \u003d \"gender\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String CLASS_ATTRIBUTE_NAME \u003d \"class\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String INSTANCE_TYPE \u003d \"person\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final ArrayList\u003cString\u003e GENDER_NOMINALS \u003d new ArrayList\u003cString\u003e(Arrays.asList(\"m\", \"f\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Recommender() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Empty constructor for singleton class"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static Recommender createRecommender() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (theOne \u003d\u003d null) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            theOne \u003d new Recommender();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return theOne;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Determines the likelihood of a person wanting to buy any product, assuming the product has a classifier,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * and returns the decision as a string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public String getRecommendations("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            ArrayList\u003cString\u003e productsWithClassifiers, Person person, HashMap\u003cString, Classifier\u003e classifierDict) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Instance personInstance \u003d parsePerson(person);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ArrayList\u003cBuyDecision\u003e productRecOfAPerson \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Goes through every product with enough orders to allow a recommendation and records the recommendation"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        for (int i \u003d 0; i \u003c productsWithClassifiers.size(); i++) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            String currentProductPredicted \u003d productsWithClassifiers.get(i);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            Classifier classifier \u003d classifierDict.get(currentProductPredicted);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            BuyDecision decision \u003d getBuyDecision(currentProductPredicted, classifier, personInstance);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            productRecOfAPerson.add(decision);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return getFormattedRecs(productRecOfAPerson);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Extracts the feature data from a {@code person} and turns them into a {@code DenseInstance} for classification."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Instance parsePerson(Person person) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Set up the person as a Weka instance"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ArrayList\u003cAttribute\u003e attributes \u003d getAttributes();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Instances persons \u003d new Instances(INSTANCE_TYPE, attributes, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Instance personInstance \u003d new DenseInstance(attributes.size());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Assign values to the aforementioned instance"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        personInstance.setDataset(persons);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        personInstance.setValue(0, Double.parseDouble(person.getAge().value));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        personInstance.setValue(1, person.getGender().value.toLowerCase());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return personInstance;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Sets up the age and gender as classification features."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return the ArrayList of features, with the class (i.e. whether person will buy) to be predicted."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ArrayList\u003cAttribute\u003e getAttributes() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Attribute ageAttribute \u003d new Attribute(AGE_ATTRIBUTE_NAME);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Attribute genderAttribute \u003d new Attribute(GENDER_ATTRIBUTE_NAME, GENDER_NOMINALS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Attribute classAttribute \u003d new Attribute(CLASS_ATTRIBUTE_NAME, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new ArrayList\u003cAttribute\u003e(Arrays.asList(ageAttribute, genderAttribute, classAttribute));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Uses Weka\u0027s {@code distributionForInstance} to obtain the probability of confidence in the buy decision."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private BuyDecision getBuyDecision(String currentProductPredicted, Classifier classifier, Instance personInstance) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        double buyProb \u003d 0;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            buyProb \u003d classifier.distributionForInstance(personInstance)[POSITIVE_CLASS_INDEX];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_CLASSIFY_INSTANCE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new BuyDecision(currentProductPredicted, buyProb);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Sorts the recommendations so the most confident recommendations come first."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @return the recommendations as a String."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private String getFormattedRecs(ArrayList\u003cBuyDecision\u003e productRecOfAPerson) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Collections.sort(productRecOfAPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return Arrays.toString(productRecOfAPerson.toArray());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 113,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/recommender/RecommenderManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.recommender;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.recommender.Recommender.createRecommender;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.io.BufferedReader;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.io.FileReader;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.classifiers.Classifier;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.core.Instances;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "import weka.filters.unsupervised.instance.RemoveWithValues;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Manages the training of the recommendations classifier, and its subsequent use on a new {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class RecommenderManager {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_INVALID_ARFF_PATH \u003d \"%1$s does not refer to a valid ARFF file.\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ERROR_READING_ARFF \u003d \"File name or format invalid, error reading ARFF.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_CANNOT_CLOSE_READER \u003d \"Cannot close ARFF reader, reader still in use.\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_BAD_REMOVER_SETTINGS \u003d \"{@code WEKA_REMOVER_SETTINGS} has invalid value.\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String MESSAGE_ORDERS_IS_NULL \u003d \"Cannot classify with a lack of orders in .arff.\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            + \" Check data entries in file.\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private static final String WEKA_REMOVER_SETTINGS \u003d \"-S 0.0 -C last -L %1$d-%2$d -V -H\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private File arff;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private BufferedReader reader;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private Instances orders;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private RemoveWithValues isolator;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private HashMap\u003cString, Classifier\u003e classifierDict;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private ArrayList\u003cString\u003e productsWithClassifiers;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @param arffPath the data folder where the .arff orders file is stored."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public RecommenderManager(String arffPath, ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        setTrainerFile(arffPath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        writeOrdersAsTraningData(addressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        parseOrdersFromFile();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        trainRecommenderOnOrders();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void setTrainerFile(String path) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        arff \u003d new File(path);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Sends previously computed {@code classifierDict} to the Recommender logic to obtain a list of recommended buys"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * for the given {@code person}, for all the products with sufficient {@code orders} to make a recommendation."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public String getRecommendations(Person person) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Recommender recommender \u003d createRecommender();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return recommender.getRecommendations(productsWithClassifiers, person, classifierDict);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void writeOrdersAsTraningData(ReadOnlyAddressBook addressBook) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ArffWriter arffWriter \u003d new ArffWriter(arff, addressBook);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        arffWriter.makeArffFromOrders();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void parseOrdersFromFile() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        getReaderFromArff();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        getOrdersFromReader();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        closeReader();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Adds a binary classifier (i.e. a yes/no recommender) for every product to {@code classifierDict}"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * iff a given {@code trainer} can successfully perform the classifier training."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void trainRecommenderOnOrders() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            if (orders \u003d\u003d null) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                throw new NullPointerException();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (NullPointerException npe) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_ORDERS_IS_NULL);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        classifierDict \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        productsWithClassifiers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Obtain distinct classifiers for each product to determine if a customer would buy that specific product"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        int numOfProducts \u003d orders.classAttribute().numValues();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        for (int productNum \u003d 0; productNum \u003c numOfProducts; productNum +\u003d 2) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            initOrderIsolator(productNum);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            ProductTrainer trainer \u003d new ProductTrainer(orders, isolator);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            if (trainer.hasTrained()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                addClassifier(productNum, trainer);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void getReaderFromArff() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            reader \u003d new BufferedReader(new FileReader(arff));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(String.format(MESSAGE_INVALID_ARFF_PATH, arff));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void getOrdersFromReader() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            orders \u003d new Instances(reader);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            orders.setClassIndex(orders.numAttributes() - 1);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_ERROR_READING_ARFF);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void closeReader() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            reader.close();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_CANNOT_CLOSE_READER);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Subsamples from our {@code orders}, only including orders from a given product, for binary classification use."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @param productNum index referring to a specific product in Weka\u0027s Instances."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void initOrderIsolator(int productNum) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assert productNum \u003c orders.classAttribute().numValues();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        isolator \u003d new RemoveWithValues();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            isolator.setOptions(weka.core.Utils.splitOptions(String.format("
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    WEKA_REMOVER_SETTINGS, productNum + 1, productNum + 2)));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(MESSAGE_BAD_REMOVER_SETTINGS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Adds the new classifier in {@code trainer} to {@code classifierDict} and"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * records this addition in {@code productsWithClassifiers}"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private void addClassifier(int productNum, ProductTrainer trainer) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        String productId \u003d orders.classAttribute().value(productNum);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        Classifier classifier \u003d trainer.getClassifier();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Every classifier should never overwrite an existing one in each training cycle, as productID is primary key."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assert classifierDict.get(productId) \u003d\u003d null;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        classifierDict.put(productId, classifier);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        productsWithClassifiers.add(productId);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 149,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.UniqueOrderList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.UniqueProductList;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final UniqueProductList products;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueOrderList orders;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        products \u003d new UniqueProductList();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        orders \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setProducts(List\u003cProduct\u003e products) throws DuplicateProductException{"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.products.setProducts(products);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.orders.setOrders(orders);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::syncWithMasterTagList)"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProduct\u003e syncedProductList \u003d newData.getProductList().stream()"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrder\u003e syncedOrderList \u003d newData.getOrderList().stream()"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(syncedPersonList);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            setProducts(syncedProductList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } catch (DuplicateProductException ep) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate products\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        //@@author lowjiajin"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            setProducts(newData.getProductList());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (DuplicateProductException dpe) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            setOrders(newData.getOrderList());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (DuplicateOrderException doe) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the person to point to those in {@link #tags}."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(person);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncWithMasterTagList(Person)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, syncedEditedPerson);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Updates the master tag list to include tags in {@code person} that are not in the list."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     *  list."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person syncWithMasterTagList(Person person) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking person tag references"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        // Rebuild the list of person tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Person("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                person.getName(), person.getPhone(), person.getEmail(), person.getAddress(), person.getGender(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                person.getAge(), person.getLatitude(), person.getLongitude(), correctTagReferences);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removePerson(Person key) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        if (persons.remove(key)) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //// product-level operations"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Adds a product to the address book."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void addProduct(Product p) throws DuplicateProductException {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //Product product \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //Maybe need to synchronize with CategoryList in the future."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        products.add(p);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws ProductNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean removeProduct(Product key) throws ProductNotFoundException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (products.remove(key)) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    //// order-level operations"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Adds new order to address book."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws DuplicateOrderException if this order already exists."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void addOrder(Order o) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orders.add(o);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Replaces the given order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws DuplicateOrderException if updating the order\u0027s details causes the order to be equivalent to"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *      another existing order."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws OrderNotFoundException if {@code target} could not be found."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void updateOrder(Order target, Order editedOrder)"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throws DuplicateOrderException, OrderNotFoundException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orders.setOrder(target, editedOrder);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws OrderNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean removeOrder(Order key) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (orders.remove(key)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cProduct\u003e getProductList() {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return products.asObservableList();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cOrder\u003e getOrderList() {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return orders.asObservableList();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(persons, tags);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 2,
      "lowjiajin": 15,
      "-": 195,
      "YingxuH": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    Predicate\u003cProduct\u003e PREDICATE_SHOW_ALL_PRODUCTS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given person. */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given person */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person) throws DuplicatePersonException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Deletes the given product. */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void deleteProduct(Product target) throws ProductNotFoundException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Adds the given product */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void addProduct(Product product) throws DuplicateProductException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given order. */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void deleteOrder(Order target) throws OrderNotFoundException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given order */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    void addOrder(Order product) throws DuplicateOrderException;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered product list */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cProduct\u003e getFilteredProductList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates the filter of the filtered product list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void updateFilteredProductList(Predicate\u003cProduct\u003e predicate);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Returns an unmodifiable view of the filtered order list */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cOrder\u003e getFilteredOrderList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Updates the filter of the filtered order list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 58,
      "YingxuH": 35
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final FilteredList\u003cProduct\u003e filteredProducts;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private FilteredList\u003cOrder\u003e filteredOrders;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredProducts \u003d new FilteredList\u003c\u003e(this.addressBook.getProductList());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredOrders \u003d new FilteredList\u003c\u003e(this.addressBook.getOrderList());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public synchronized void deleteProduct(Product target) throws ProductNotFoundException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        addressBook.removeProduct(target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public synchronized void addProduct(Product product) throws DuplicateProductException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        addressBook.addProduct(product);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        updateFilteredProductList(PREDICATE_SHOW_ALL_PRODUCTS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addOrder(Order order) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addOrder(order);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public synchronized void deleteOrder(Order target) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        addressBook.removeOrder(target);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person, product and Order List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Products} backed by the internal list of"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredProducts);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredProducts.setPredicate(predicate);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Orders} backed by the internal list of"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredOrders);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        filteredOrders.setPredicate(predicate);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 1,
      "-": 128,
      "YingxuH": 58
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns an unmodifiable view of the products list."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * This list will not contain any duplicate products."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    ObservableList\u003cProduct\u003e getProductList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the tags list."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate tags."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the orders list"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate orders."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cOrder\u003e getOrderList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 30,
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/money/Money.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.money;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.text.NumberFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.io.Serializable;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.math.BigDecimal.ZERO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.math.RoundingMode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.exceptions.CurrencyUnknownException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.exceptions.MismatchedCurrencyException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.exceptions.ObjectNotMoneyException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represent an amount of money in any currency."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * This class assumes decimal currency, without funky divisions"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * like 1/5 and so on. Money objects are immutable."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Most operations involving more than one Money object will throw a"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * MismatchedCurrencyException if the currencies don\u0027t match."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Money implements Comparable\u003cMoney\u003e, Serializable {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MONEY_VALIDATION_REGEX_WITHOUT_CURRENCY \u003d \"\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MONEY_VALIDATION_REGEX_WITH_UNKNOWN_PREFIX \u003d \"(\\\\p{Alpha}+|\\\\p{Sc})\\\\s*\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MONEY_PREFIX \u003d \"(\\\\p{Alpha}+|\\\\p{Sc})\\\\s*\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MONEY_DIGITS \u003d \"\\\\s*\\\\d+(\\\\.\\\\d+)?\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_MONEY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String.format(\"price should only contains currency sy/mbol(optional) and digits,\" +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \" and it cannot be negative\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_MONEY_SYMBOL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String.format(\"currency code should be limited ISO 4277 code\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The money amount."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Never null."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private BigDecimal fAmount;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The currency of the money, such as US Dollars or Euros."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Never null."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Currency fCurrency;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The rounding style to be used."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final RoundingMode fRounding;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static BigDecimal DEFAULT_AMOUNT \u003d new BigDecimal(0.00);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The default currency to be used if no currency is passed to the constructor."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * To be initialized by the static init()."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Currency DEFAULT_CURRENCY \u003d Currency.getInstance(\"SGD\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The default rounding style to be used if no currency is passed to the constructor."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static RoundingMode DEFAULT_ROUNDING \u003d RoundingMode.HALF_EVEN;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * String representation for Money class."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final String repMoney;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private int fHashCode;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int HASH_SEED \u003d 23;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final int HASH_FACTOR \u003d 37;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Full constructor."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aAmount is required, can be positive or negative. The number of"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * decimals in the amount cannot exceed the maximum number of"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * decimals for the given Currency."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aCurrency"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aRoundingStyle is required, must match a rounding style used by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * BigDecimal."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(BigDecimal aAmount, Currency aCurrency, RoundingMode aRoundingStyle){"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkNotNull(aAmount, aCurrency, aRoundingStyle);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        fAmount \u003d aAmount;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        fCurrency \u003d aCurrency;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        fRounding \u003d aRoundingStyle;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        repMoney \u003d fCurrency.getSymbol() + \" \" + fAmount.toPlainString();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructor taking only the money amount."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aAmount is required, can be positive or negative."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(BigDecimal aAmount){"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(aAmount, DEFAULT_CURRENCY, DEFAULT_ROUNDING);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructor taking the money amount and currency."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The rounding style takes a default value."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aAmount is required, can be positive or negative."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aCurrency is required."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(BigDecimal aAmount, Currency aCurrency){"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(aAmount, aCurrency, DEFAULT_ROUNDING);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructor taking the money amount and the rounding mode."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aAmount is required, can be positive or negative."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money(BigDecimal aAmount, RoundingMode aRoundingStyle){"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(aAmount, DEFAULT_CURRENCY, aRoundingStyle);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * empty constructor"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this(DEFAULT_AMOUNT, DEFAULT_CURRENCY, DEFAULT_ROUNDING);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Return the amount passed to the constructor. */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public BigDecimal getAmount() { return fAmount; }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Return the currency passed to the constructor, or the default currency. */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Currency getCurrency() { return fCurrency; }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Return the rounding style passed to the constructor, or the default rounding style. */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public RoundingMode getRoundingStyle() { return fRounding; }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid Money."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidMoney(String test) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return isValidMoneyWithoutCurrency(test) || isValidMoneyWithUnknownPrefix(test);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid Money with currency symbol code."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidMoneyWithUnknownPrefix(String test) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(MONEY_VALIDATION_REGEX_WITH_UNKNOWN_PREFIX);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return the currency that the symbol represents if the symbol is valid, otherwise returns the default"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * currency"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param symbol"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Currency parseCurrency(String symbol) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (Currency currency: Currency.getAvailableCurrencies()) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            String code \u003d currency.getSymbol();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (symbol.equals(code)) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                return currency;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        throw new CurrencyUnknownException(\"unknown currency: \" + symbol +\"\\n\"+ MESSAGE_MONEY_SYMBOL_CONSTRAINTS);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid Money without currency symbol."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidMoneyWithoutCurrency(String test) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(MONEY_VALIDATION_REGEX_WITHOUT_CURRENCY);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Parses a {@code String price} into a {@code price}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws IllegalValueException if the given {@code price} is invalid."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Money parsePrice(String price) throws IllegalValueException {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return ParserUtil.parsePrice(price);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return true only if aThat Money has the same currency"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * as this Money. For the public use."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Assume the aThat is also a money object"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isSameCurrencyAs(Money aThat){"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        boolean result \u003d false;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( aThat !\u003d null ) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            result \u003d this.fCurrency.equals(aThat.fCurrency);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Return true only if the amount is positive. */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isPlus(){"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fAmount.compareTo(ZERO) \u003e 0;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isMinus(){"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fAmount.compareTo(ZERO) \u003c  0;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isZero(){"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fAmount.compareTo(ZERO) \u003d\u003d  0;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Add aThat Money to this Money."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Currencies must match."
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money plus(Object aThat){"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(fAmount.add(that.fAmount), fCurrency, fRounding);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Subtract aThat Money from this Money."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Currencies must match."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money minus(Object aThat){"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(fAmount.subtract(that.fAmount), fCurrency, fRounding);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sum a collection of Money objects."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Currencies must match."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aMoneys collection of Money objects, all of the same currency."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * If the collection is empty, then a zero value is returned."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static Money sum(Collection\u003cMoney\u003e aMoneys){"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money sum \u003d new Money(ZERO);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for(Money money : aMoneys){"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            sum \u003d sum.plus(money);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return sum;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Equals (insensitive to scale)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Return true only if the amounts are equal."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Currencies must match. This method is not synonymous with the equals method."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean eq(Object aThat){"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003d\u003d 0;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean gt(Object aThat){"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003e 0;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean gteq(Object aThat){"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003e\u003d 0;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean lt(Object aThat){"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003c 0;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean lteq(Object aThat){"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkObjectIsMoney(aThat);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkCurrenciesMatch(that);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return compareAmount(that) \u003c\u003d 0;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Multiply this Money by an integral factor."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The scale of the returned Money is equal to the scale of \u0027this\u0027"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Money."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money times(int aFactor){"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        BigDecimal factor \u003d new BigDecimal(aFactor);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        BigDecimal newAmount \u003d fAmount.multiply(factor);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Money(newAmount, fCurrency, fRounding);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Multiply this Money by an non-integral factor (having a decimal point)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money times(double aFactor){"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        BigDecimal newAmount \u003d fAmount.multiply(asBigDecimal(aFactor));"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        newAmount \u003d newAmount.setScale(getNumDecimalsForCurrency(), fRounding);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return  new Money(newAmount, fCurrency, fRounding);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * getAmount().getPlainString() + space + getCurrency().getSymbol()."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The return value uses the default locale/currency, and will not"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * always be suitable for display to an end user."
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString(){ return repMoney; }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * This equal is sensitive to scale."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * For example, 10 is not equal to 10.00"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The eq method, on the other hand, is not"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * sensitive to scale."
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object aThat){"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (this \u003d\u003d aThat) return true;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (! (aThat instanceof Money) ) return false;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Money that \u003d (Money)aThat;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //the object fields are never null :"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        boolean result \u003d (this.fAmount.equals(that.fAmount) );"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        result \u003d result \u0026\u0026 (this.fCurrency.equals(that.fCurrency) );"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        result \u003d result \u0026\u0026 (this.fRounding \u003d\u003d that.fRounding);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode(){"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( fHashCode \u003d\u003d 0 ) {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fHashCode \u003d HASH_SEED;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fHashCode \u003d HASH_FACTOR * fHashCode + fAmount.hashCode();"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fHashCode \u003d HASH_FACTOR * fHashCode + fCurrency.hashCode();"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            fHashCode \u003d HASH_FACTOR * fHashCode + fRounding.hashCode();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fHashCode;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Compare by amount, then currency and rounding method."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aThat"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int compareTo(Money aThat) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final int EQUAL \u003d 0;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( this \u003d\u003d aThat ) return EQUAL;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //the object fields are never null"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        int comparison \u003d this.fAmount.compareTo(aThat.fAmount);"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( comparison !\u003d EQUAL ) return comparison;"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        comparison \u003d this.fCurrency.getCurrencyCode().compareTo("
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                aThat.fCurrency.getCurrencyCode()"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        );"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( comparison !\u003d EQUAL ) return comparison;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        comparison \u003d this.fRounding.compareTo(aThat.fRounding);"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( comparison !\u003d EQUAL ) return comparison;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return EQUAL;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void checkNotNull(BigDecimal aAmount, Currency aCurrency, RoundingMode aRoundingStyle){"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if( aAmount \u003d\u003d null ) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"Amount cannot be null\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if( aCurrency \u003d\u003d null ) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"Currency cannot be null\");"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if( aRoundingStyle \u003d\u003d null) {"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"rounding style cannot be null\");"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if ( aAmount.scale() \u003e aCurrency.getDefaultFractionDigits() ) {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    \"Number of decimals is \" + aAmount.scale() + \", but currency only takes \" +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                            aCurrency.getDefaultFractionDigits() + \" decimals.\""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private int getNumDecimalsForCurrency(){"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fCurrency.getDefaultFractionDigits();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * throw new exception if the other Monday is not the same currency."
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param aThat"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void checkCurrenciesMatch(Money aThat){"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (! this.fCurrency.equals(aThat.getCurrency())) {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new MismatchedCurrencyException("
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    aThat.getCurrency() + \" doesn\u0027t match the expected currency : \" + fCurrency"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void checkObjectIsMoney(Object aThat) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (! (aThat instanceof Money) ) {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new ObjectNotMoneyException("
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    aThat.getClass() + \" doesn\u0027t match with Money class\""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            );"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /** Ignores scale: 0 same as 0.00 */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private int compareAmount(Money aThat){"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.fAmount.compareTo(aThat.fAmount);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private BigDecimal asBigDecimal(double aDouble){"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        String asString \u003d Double.toString(aDouble);"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new BigDecimal(asString);"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "} "
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "YingxuH": 427
    }
  },
  {
    "path": "src/main/java/seedu/address/model/money/exceptions/CurrencyUnknownException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.money.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals that the money objects do not have matching currencies."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class CurrencyUnknownException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public CurrencyUnknownException(String aMessage){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(aMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/money/exceptions/MismatchedCurrencyException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.money.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals that the money objects do not have matching currencies."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class MismatchedCurrencyException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public MismatchedCurrencyException(String aMessage){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(aMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/money/exceptions/ObjectNotMoneyException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.money.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals that the money objects do not have matching currencies."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ObjectNotMoneyException extends RuntimeException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ObjectNotMoneyException(String aMessage){"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(aMessage);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/ContainsItemPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Tests that a {@code Order} contains {@code } matches any of the keywords given."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class ContainsItemPredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final List\u003cInteger\u003e productIds;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public ContainsItemPredicate(List\u003cInteger\u003e productIds) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.productIds \u003d productIds;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        for(SubOrder suborder:order.getSubOrders()){"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            for(int productId: productIds){"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                if (suborder.getProductID() \u003d\u003d productId){"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof ContainsItemPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.productIds.equals(((ContainsItemPredicate) other).productIds)); // state check"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 33,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/Order.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * Represents a customer\u0027s order."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * Guarantees: field values are validated and immutable"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class Order {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private static int orderCounter \u003d 0;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final String personId;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final LocalDateTime time;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final List\u003cSubOrder\u003e subOrders;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Adds order with personId(email) and list of suborders. Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param personId id of person (customer) who made the order. Can be thought of as a foreign key"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param subOrders ArrayList of triple(product id, number bought, price) to represent the order"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public Order(String personId, List\u003cSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.id \u003d ++orderCounter;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Adds order with person object instead of email string. To be used for debugging, testing etc."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param subOrders"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public Order(Person person, List\u003cSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.id \u003d ++orderCounter;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.time \u003d LocalDateTime.now();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.personId \u003d person.getEmail().toString();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Adds a order with specified id and time. Used for regenerating order list from storage."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Note that this sets the orderCounter to the maximum id added into the list, to ensure distinctness of"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * order ids."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param personId"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param subOrders"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public Order(int id, String personId, LocalDateTime time, List\u003cSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        orderCounter \u003d Math.max(orderCounter, id);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Adds a order with specified id and time, using Person object instead of email string."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * For debugging, testing, etc."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param time"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param subOrders"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public Order(int id, Person person, LocalDateTime time, List\u003cSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.personId \u003d person.getEmail().toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        orderCounter \u003d Math.max(orderCounter, id);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Returns ID(i.e. email) of person who made the order."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public String getPersonId() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return personId;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Returns order ID"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public int getId() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return id;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Returns time of order"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return time;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Gets the details of the products and prices for an order."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @return List of (Product ID, Number bought, Price)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public List\u003cSubOrder\u003e getSubOrders() {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return subOrders;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Calculates total price (sum) of an order"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @return total price"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public Money getOrderTotal() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Money total \u003d new Money();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (SubOrder subOrder : subOrders) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            Money subOrderPrice \u003d subOrder.getTotalPrice();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            total \u003d total.plus(subOrderPrice);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return total;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Performs some basic checks to see if order is valid."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * - Checks that the order isn\u0027t empty"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * - Checks that customer email is valid"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * - Checks that all product IDs exist"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * - Checks that order price is non-negative"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param customers list of all customers to check email against"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param products list of all products to check product ID against"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @return validity"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean isValid(List\u003cPerson\u003e customers, List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        boolean valid \u003d true;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Check that SubOrder list is non-empty"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        valid \u003d !subOrders.isEmpty() \u0026\u0026 valid;  // Trip valid to false if list is empty"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Check that email is valid"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        boolean foundEmail \u003d false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (Person customer : customers) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            String email \u003d customer.getEmail().toString();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            if (email.equals(personId)) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                foundEmail \u003d true;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        valid \u003d foundEmail \u0026\u0026 valid;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Check that productIDs are valid (using SubOrder class)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        boolean allSubOrdersValid \u003d true;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (SubOrder subOrder : subOrders) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            if (!subOrder.isValid(products)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                allSubOrdersValid \u003d false;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        valid \u003d allSubOrdersValid \u0026\u0026 valid;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        // Check that total order price is non-negative"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        boolean negativeOrderPrice \u003d this.getOrderTotal().isMinus();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        valid \u003d !negativeOrderPrice \u0026\u0026 valid;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return valid;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Decrements order counter. To be used when deleting invalid order."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static void decrementOrderCounter() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        orderCounter \u003d Math.max(orderCounter - 1, 0);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Returns a table in string format which is the order summary (product id, number bought, price, total price)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\"\\nOrder ID \");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(id);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\" by \");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(personId);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\" at \");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(time.format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\":\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\"-------------\\n\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        int subOrderCt \u003d 0;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (SubOrder so : subOrders) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            sb.append(++subOrderCt);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            sb.append(\"- \");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            sb.append(so.toString());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            sb.append(\u0027\\n\u0027);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\"-------------\\n\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\"Total: \");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(getOrderTotal());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\"\\n-------------\\n\");"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return other \u003d\u003d this ||"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                ((other instanceof Order) \u0026\u0026"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                        ((Order) other).getPersonId().equals(this.getPersonId()) \u0026\u0026"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                        ((Order) other).getId() \u003d\u003d this.getId() \u0026\u0026"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                        ((Order) other).getSubOrders() \u003d\u003d this.getSubOrders()"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                );"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 203,
      "-": 10,
      "YingxuH": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/OrderBelongsToPeoplePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * Predicate to filter orders that belong to people in a given list."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class OrderBelongsToPeoplePredicate implements Predicate\u003cOrder\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final List\u003cString\u003e emails;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public OrderBelongsToPeoplePredicate(List\u003cString\u003e emails) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.emails \u003d emails;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean test(Order order) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Returns true if the order\u0027s personId (i.e. email) is in the list of emails"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return emails.stream()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                .anyMatch(email -\u003e email.equals(order.getPersonId()));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                || (other instanceof OrderBelongsToPeoplePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 this.emails.equals(((OrderBelongsToPeoplePredicate) other).emails)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 25,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/SubOrder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * SubOrder class for each single product purchased in an Order. Should be composited with Order"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * (i.e. can\u0027t exist without Order object which has pointer to this SubOrder object)"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " *"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * Guarantees: field details are validated and immutable"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class SubOrder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MESSAGE_SUBORDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            \"Sub-Orders needs to have three elements, first two of which are integers representing product ID and\"+"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    \" number of that product bought, and the price of the product as purchased.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final int productID;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final int numProduct;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private final Money productPrice;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /** Every field must be present and non-null. */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public SubOrder(int id, int num, Money price) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        productID \u003d id;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        numProduct \u003d num;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        productPrice \u003d price;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public int getProductID() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return productID;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public int getNumProduct() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return numProduct;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public Money getProductPrice() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return productPrice;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public Money getTotalPrice() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return productPrice.times(numProduct);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Checks that suborder is valid"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * - product ID is in list of products"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * - productPrice is non-negative"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param products list of products to check against (global list)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @return validity"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean isValid(List\u003cProduct\u003e products) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        boolean valid \u003d true;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        boolean idFound \u003d false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (Product product : products) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            if (product.getId() \u003d\u003d productID) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                idFound \u003d true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        valid \u003d idFound \u0026\u0026 valid; //Trip valid to false if product isn\u0027t found"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        boolean negativeProductPrice \u003d productPrice.isMinus();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        valid \u003d !negativeProductPrice \u0026\u0026 valid;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return valid;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\"PdtID \");"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(productID);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\"\\tx\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(numProduct);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(\"\\t@\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        sb.append(productPrice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 75,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/UniqueOrderList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * A list of products that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * @see Order#equals(Object)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class UniqueOrderList implements Iterable\u003cOrder\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ObservableList\u003cOrder\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Returns true if the list contains an order"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean contains(Order toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Adds a new order to the list"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @param toAdd unique new order to be added. It shouldn\u0027t exist in list."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void add(Order toAdd) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Removes the equivalent order from the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws OrderNotFoundException if no such person could be found in the list."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean remove(Order toRemove) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        final boolean orderFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (!orderFoundAndDeleted) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return orderFoundAndDeleted;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Sets an order list to a new one."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @param replacement the new list"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void setOrders(UniqueOrderList replacement) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Creates a new order list based on a list of distinct order objects."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @param orders list of orders"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void setOrders(List\u003cOrder\u003e orders) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireAllNonNull(orders);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        final UniqueOrderList replacement \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        for (final Order order : orders) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            replacement.add(order);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        setOrders(replacement);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Replaces the order {@code target} in the list with {@code editedOrder}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws DuplicateOrderException if the replacement is equivalent to another existing order in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws OrderNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void setOrder(Order target, Order editedOrder)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throws DuplicateOrderException, OrderNotFoundException {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireNonNull(editedOrder);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new OrderNotFoundException();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (!target.equals(editedOrder) \u0026\u0026 internalList.contains(editedOrder)) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new DuplicateOrderException();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        internalList.set(index, editedOrder);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ObservableList\u003cOrder\u003e asObservableList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public Iterator\u003cOrder\u003e iterator() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 102,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/model/order/exceptions/DuplicateOrderException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.order.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Signals that the operation will result in duplicate Order objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class DuplicateOrderException extends DuplicateDataException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public DuplicateOrderException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        super(\"Operation would result in duplicate orders\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 10,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Age.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.util.Comparator;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Represents a Person\u0027s age in Retail Analytics."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAge(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class Age implements Comparable\u003cAge\u003e{"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The minimum allowed age"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static int MIN_AGE \u003d 1;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The maximum allowed age"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static int MAX_AGE \u003d 120;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_AGE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            String.format(\"Age must be an integer between %d and %d\", MIN_AGE, MAX_AGE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String AGE_VALIDATION_REGEX \u003d \"\\\\d{1,3}\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Constructs a {@code Age}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param age A valid age of a person."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Age(String age) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(age);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        checkArgument(isValidAge(age), MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.value \u003d age;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Returns true if a given string is a valid age of a person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static boolean isValidAge(String test) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (test.matches(AGE_VALIDATION_REGEX)){"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            int age \u003d Integer.parseInt(test);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            if(age\u003e\u003dMIN_AGE \u0026\u0026 age\u003c\u003dMAX_AGE){"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Returns the int value of the persons Age"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private int getNumericalAge() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return Integer.parseInt(value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof Age // instanceof handles nulls"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.value.equals(((Age) other).value)); // state check"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public int compareTo(Age other) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return (other.getNumericalAge() - this.getNumericalAge());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 79,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AgeWithinRangePredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Age} is within the range given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class AgeWithinRangePredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Age minimumAge;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Age maximumAge;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public AgeWithinRangePredicate(Age mininumAge, Age maximumAge) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.minimumAge \u003d mininumAge;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.maximumAge \u003d maximumAge;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return (minimumAge.compareTo(person.getAge())\u003e\u003d0) \u0026\u0026"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                (maximumAge.compareTo(person.getAge())\u003c\u003d0);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof AgeWithinRangePredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.maximumAge \u003d\u003d ((AgeWithinRangePredicate) other).maximumAge"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.maximumAge \u003d\u003d ((AgeWithinRangePredicate) other).maximumAge); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 28,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ContainsTagPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Tests if a {@code Person} contains a {@code Tag}\u0027s which"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * matches any of the  given tags."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class ContainsTagPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public ContainsTagPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        for(Tag tag:person.getTags()){"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            for(String keyword: keywords){"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                if (tag.tagName.equals(keyword)){"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    return true;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof ContainsTagPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((ContainsTagPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 36,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Represents a Person\u0027s gender in the retail analytics."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            \"Gender should only be \u0027M\u0027 or \u0027F\u0027, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MALE_SHORTFORM \u003d \"M\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String FEMALE_SHORTFORM \u003d \"F\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String value;//either MALE_SHORTFORM or FEMALE_SHORTFORM"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Constructs a {@code Gender}."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param gender A valid gender (ie \"M\" or \"F\") (case insensitive)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Gender(String gender) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        checkArgument(isValidGender(gender), MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        setGender(gender);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets {@code value} to the uppercase value of {@code gender}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param gender a valid gender"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private void setGender(String gender) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assert isValidGender(gender);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String genderUpperCase \u003d gender.toUpperCase();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if(genderUpperCase.equals(MALE_SHORTFORM)){"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            value \u003d MALE_SHORTFORM;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        } else if(genderUpperCase.equals(FEMALE_SHORTFORM)){"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            value \u003d FEMALE_SHORTFORM;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Returns true if a given string is a valid person gender."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String testUpperCase \u003d test.toUpperCase();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return testUpperCase.equals(MALE_SHORTFORM) || testUpperCase.equals(FEMALE_SHORTFORM);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 67,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/GenderPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Age} is within the range given."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class GenderPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public GenderPredicate(Gender gender) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return (gender.equals(person.getGender()));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof GenderPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.gender \u003d\u003d ((GenderPredicate) other).gender); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 24,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Latitude.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Represents a Person\u0027s Latitude in the Retail Analytics."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLatitude(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class Latitude {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The minimum allowed latitude"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static float MIN_LATITUDE \u003d Float.valueOf(\"-90.0000\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The maximum allowed latitude"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static float MAX_LATITUDE \u003d Float.valueOf(\"90.0000\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_LATITUDE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            String.format(\"Latitude numbers must be a decimal value between %f and %f\", MIN_LATITUDE, MAX_LATITUDE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String LATITUDE_VALIDATION_REGEX \u003d \"-?\\\\d+\\\\.?\\\\d*\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final DecimalFormat format \u003d new DecimalFormat(\"00.000000\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Constructs a {@code Latitude}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param latitude A valid latitude number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Latitude(String latitude) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(latitude);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        checkArgument(isValidLatitude(latitude), MESSAGE_LATITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.value \u003d format.format(Double.parseDouble(latitude));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * A method to check if latitude value is valid"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param test the latitude to check is valid"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @return true if test is a decimal value and within the MIN and MAX latitude"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static boolean isValidLatitude(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (test.matches(LATITUDE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            Float latitude \u003d Float.parseFloat(test);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            if (latitude \u003e\u003d MIN_LATITUDE \u0026\u0026 latitude \u003c\u003d MAX_LATITUDE) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof Latitude // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.value.equals(((Latitude) other).value)); // state check"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 75,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Longitude.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.text.DecimalFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Represents a Person\u0027s Latitude in the Retail Analytics."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidLongitude(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class Longitude {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The minimum allowed longitude"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static float MIN_LONGITUDE \u003d Float.valueOf(\"-180.0000\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * The maximum allowed longitude"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static float MAX_LONGITUDE \u003d Float.valueOf(\"180.0000\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String MESSAGE_LONGITUDE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            String.format(\"Latitude numbers must be a decimal value between %f and %f\", MIN_LONGITUDE, MAX_LONGITUDE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String LONGITUDE_VALIDATION_REGEX \u003d \"-?\\\\d+\\\\.?\\\\d*\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final DecimalFormat format \u003d new DecimalFormat(\"000.000000\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Constructs a {@code Longitude}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * @param longitude A valid longitude number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Longitude(String longitude) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireNonNull(longitude);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        checkArgument(isValidLongitude(longitude), MESSAGE_LONGITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.value \u003d format.format(Double.parseDouble(longitude));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * return true if {@code test} is a decimal value and within the MIN and MAX longitude"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static boolean isValidLongitude(String test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (test.matches(LONGITUDE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            Float longitude \u003d Float.parseFloat(test);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            if (longitude \u003e\u003d MIN_LONGITUDE \u0026\u0026 longitude \u003c\u003d MAX_LONGITUDE) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getValue() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                || (other instanceof Longitude // instanceof handles nulls"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 this.value.equals(((Longitude) other).value)); // state check"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 73,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Gender gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Age age;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Latitude latitude;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Longitude longitude;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Gender gender,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                  Age age, Latitude latitude, Longitude longitude, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        requireAllNonNull(name, phone, email, address, gender, tags);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author Sivalavida"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Latitude getLatitude() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return latitude;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Longitude getLongitude() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return longitude;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Age getAge() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return age;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "  "
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 otherPerson.getGender().equals(this.getGender())"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 otherPerson.getAge().equals(this.getAge())"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 otherPerson.getLatitude().equals(this.getLatitude())"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 otherPerson.getLongitude().equals(this.getLongitude())"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                ;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return Objects.hash(name, phone, email, address, gender, tags);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 83,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": " * Represents a Person\u0027s phone number in the Retail Analytics."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person phone number."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/Category.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * The unique categories of the product."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Category {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String CATEGORY_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_CATEGORY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \"Category should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * String representation for the category class."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Category(String categoryName) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(categoryName);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidCategory(categoryName), MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.value \u003d categoryName;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid category."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidCategory(String test) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(CATEGORY_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode() { return value.hashCode(); }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof Category // instanceof handles nulls"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 this.value.equals(((Category) other).value)); // state check"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/Product.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * presents the product offered in the retail store."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Attributes: name, price, category"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class Product {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static int productCounter \u003d 0;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final int id;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final ProductName name;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Money price;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product(ProductName name, Money price, Category category) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireAllNonNull(name, price, category);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.id \u003d ++productCounter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Adds a product with specified id. Used for regenerating product list from storage."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Note that this sets the productCounter to the maximum id added into the list, to ensure distinctness of"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * product ids."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param id"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param price"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param category"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product(int id, ProductName name, Money price, Category category) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productCounter \u003d Math.max(productCounter, id);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int getId() { return id; }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductName getName() { return name; }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Money getPrice() { return price; }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Category getCategory() { return category; }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof Product)) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product otherPerson \u003d (Product) other;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return otherPerson.getName().equals(this.getName());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        builder.append(\" Name: \")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(\" Price: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(getPrice())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(\" Category: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .append(getCategory());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/ProductCategoryContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ProductCategoryContainsKeywordsPredicate implements Predicate\u003cProduct\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ProductCategoryContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean test(Product product) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(product.getCategory().value, keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                || (other instanceof ProductCategoryContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((ProductCategoryContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 21,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/ProductCostsBetweenPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ProductCostsBetweenPredicate implements Predicate\u003cProduct\u003e {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final Money minPrice;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final Money maxPrice;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ProductCostsBetweenPredicate(Money minPrice, Money maxPrice) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.minPrice \u003d minPrice;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.maxPrice \u003d maxPrice;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean test(Product product) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return product.getPrice().compareTo(minPrice) \u003e\u003d 0 \u0026\u0026 product.getPrice().compareTo(maxPrice) \u003c\u003d 0;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                || (other instanceof ProductCostsBetweenPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                \u0026\u0026 this.minPrice.equals(((ProductCostsBetweenPredicate) other).minPrice)"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                \u0026\u0026 this.maxPrice.equals(((ProductCostsBetweenPredicate) other).maxPrice)); // state check"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 24,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/ProductName.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Represents a Person\u0027s ProductName in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidProductName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductName {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String MESSAGE_PRODUCT_NAME_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \"Product Names should only contain alphanumeric characters and spaces, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String PRODUCT_NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final String fullProductName;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Constructs a {@code ProductName}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param ProductName A valid ProductName."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductName(String ProductName) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        requireNonNull(ProductName);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        checkArgument(isValidProductName(ProductName), MESSAGE_PRODUCT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.fullProductName \u003d ProductName;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a given string is a valid person ProductName."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static boolean isValidProductName(String test) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return test.matches(PRODUCT_NAME_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fullProductName;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                || (other instanceof ProductName // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 this.fullProductName.equals(((ProductName) other).fullProductName)); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return fullProductName.hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 4,
      "YingxuH": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/ProductNameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ProductNameContainsKeywordsPredicate implements Predicate\u003cProduct\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ProductNameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean test(Product product) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(product.getName().fullProductName, keyword));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                || (other instanceof ProductNameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((ProductNameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 21,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/UniqueProductList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * A list of products that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * @see Product#equals(Object)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class UniqueProductList implements Iterable\u003cProduct\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    private final ObservableList\u003cProduct\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Returns true if the list contains an equivalent product as the given argument."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean contains(Product toCheck) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Adds a product to the list."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws DuplicateProductException if the product to add is a duplicate of an existing product in the list."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void add(Product toAdd) throws DuplicateProductException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Replaces the product {@code target} in the list with {@code editedProduct}."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws DuplicateProductException if the replacement is equivalent to another existing product in the list."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws ProductNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void setProduct(Product target, Product editedProduct)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throws DuplicateProductException, ProductNotFoundException {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireNonNull(editedProduct);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (!target.equals(editedProduct) \u0026\u0026 internalList.contains(editedProduct)) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new DuplicateProductException();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        internalList.set(index, editedProduct);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Removes the equivalent product from the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     *"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * @throws ProductNotFoundException if no such product could be found in the list."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean remove(Product toRemove) throws ProductNotFoundException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        final boolean productFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        if (!productFoundAndDeleted) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new ProductNotFoundException();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return productFoundAndDeleted;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void setProducts(UniqueProductList replacement) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void setProducts(List\u003cProduct\u003e products) throws DuplicateProductException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        requireAllNonNull(products);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        final UniqueProductList replacement \u003d new UniqueProductList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        for (final Product product : products) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            replacement.add(product);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        setProducts(replacement);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public ObservableList\u003cProduct\u003e asObservableList() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public Iterator\u003cProduct\u003e iterator() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                || (other instanceof UniqueProductList // instanceof handles nulls"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                \u0026\u0026 this.internalList.equals(((UniqueProductList) other).internalList));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 108,
      "-": 9,
      "YingxuH": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/exceptions/DuplicateProductException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.product.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " * Signals that the operation will result in duplicate Person objects."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class DuplicateProductException extends DuplicateDataException {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public DuplicateProductException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        super(\"Operation would result in duplicate products\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "lowjiajin": 9,
      "-": 2,
      "YingxuH": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/product/exceptions/ProductNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.model.product.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Signals that the operation is unable to find the specified person."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductNotFoundException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductNotFoundException() {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(\"Product not found!\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "};"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.Category;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.ProductName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    //@@author lowjiajin"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new Person[] {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Person(new Name(\"Alex Yeoh\"), new Phone(\"87438807\"), new Email(\"alex@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Gender(\"M\"), new Age(\"15\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Latitude(\"1.339160\"), new Longitude(\"103.745133\"),getTagSet(\"friends\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Person(new Name(\"Bernice Yu\"), new Phone(\"99272758\"), new Email(\"bernice@example.com\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"), new Gender(\"F\"), new Age(\"15\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Latitude(\"1.389889\"), new Longitude(\"103.726903\"), getTagSet(\"colleagues\", \"friends\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Person(new Name(\"Charlotte Oliveiro\"), new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"), new Gender(\"F\"),new Age(\"56\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Latitude(\"1.379932\"), new Longitude(\"103.852374\"), getTagSet(\"neighbours\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Person(new Name(\"David Li\"), new Phone(\"91031282\"), new Email(\"david@example.com\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"), new Gender(\"M\"), new Age(\"23\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Latitude(\"1.363222\"), new Longitude(\"103.883062\"), getTagSet(\"family\")),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Person(new Name(\"Irfan Ibrahim\"), new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Gender(\"M\"), new Age(\"77\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Latitude(\"1.357340\"), new Longitude(\"103.890084\"), getTagSet(\"classmates\")),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Person(new Name(\"Roy Balakrishnan\"), new Phone(\"92624417\"), new Email(\"roy@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Gender(\"M\"), new Age(\"48\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Latitude(\"1.327898\"), new Longitude(\"103.907420\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Person(new Name(\"Tan Roo Yang\"), new Phone(\"97776590\"), new Email(\"rooyang@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Address(\"Blk 55 Tiong Bahru Lorong 4, #03-10\"), new Gender(\"M\"), new Age(\"23\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Latitude(\"1.250828\"), new Longitude(\"103.832659\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Person(new Name(\"Linda Gao\"), new Phone(\"81226734\"), new Email(\"linda@example.com\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Address(\"Rio Casa, Punggol Avenue 8, #05-33\"), new Gender(\"F\"), new Age(\"22\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Latitude(\"1.339416\"), new Longitude(\"103.745100\"), getTagSet(\"colleagues\")),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Person(new Name(\"Zelene Quek\"), new Phone(\"81226734\"), new Email(\"zelene@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Address(\"12D Philips Avenue\"), new Gender(\"F\"), new Age(\"61\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Latitude(\"1.357639\"), new Longitude(\"104.014221\"), getTagSet(\"family\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static Product[] getSampleProducts() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new Product[] {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Product(new ProductName(\"TrendyShirt\"), new Money(new BigDecimal(12)),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Category(\"Clothing\")),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Product(new ProductName(\"Dentures\"), new Money(new BigDecimal(200)),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Category(\"Healthcare\")),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Product(new ProductName(\"Lipstick\"), new Money(new BigDecimal(30)),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Category(\"Cosmetics\")),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Product(new ProductName(\"Toothbrush\"), new Money(new BigDecimal(5)),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                new Category(\"Healthcare\"))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        };"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static Order[] getSampleOrders() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        return new Order[] {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Order(\"alex@example.com\", Stream.of("
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(12))),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(4, 1, new Money(new BigDecimal(6)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Order(\"bernice@example.com\", Stream.of("
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(12))),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(3, 1, new Money(new BigDecimal(30)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Order(\"charlotte@example.com\", Stream.of("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(2, 1, new Money(new BigDecimal(200))),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(3, 1, new Money(new BigDecimal(29)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Order(\"david@example.com\", Stream.of("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(12)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Order(\"irfan@example.com\", Stream.of("
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(2, 1, new Money(new BigDecimal(200))),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(4, 1, new Money(new BigDecimal(5)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Order(\"roy@example.com\", Stream.of("
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(4, 1, new Money(new BigDecimal(4)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Order(\"rooyang@example.com\", Stream.of("
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(13)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Order(\"linda@example.com\", Stream.of("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(1, 1, new Money(new BigDecimal(12))),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(3, 1, new Money(new BigDecimal(30))),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(4, 1, new Money(new BigDecimal(5)))).collect(Collectors.toList())),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            new Order(\"zelene@example.com\", Stream.of("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                    new SubOrder(2, 1, new Money(new BigDecimal(230)))).collect(Collectors.toList()))"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        };"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            for (Product sampleProduct : getSampleProducts()) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                sampleAb.addProduct(sampleProduct);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            for (Order sampleOrder : getSampleOrders()) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "                sampleAb.addOrder(sampleOrder);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (DuplicateProductException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate products\", e);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        } catch (DuplicateOrderException e) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate orders\", e);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 2,
      "lowjiajin": 98,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedOrder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * JAXB-friendly version of the Order."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class XmlAdaptedOrder {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Order\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MESSAGE_TIME_CONSTRAINTS \u003d \"Time needs to be in ISO-8601 format.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String personId;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String time;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private List\u003cXmlAdaptedSubOrder\u003e subOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Constructs an XmlAdaptedOrder."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public XmlAdaptedOrder() {}"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Constructs an {@code XmlAdaptedOrder} with the given product details."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public XmlAdaptedOrder(String id, String personId, String time, List\u003cXmlAdaptedSubOrder\u003e subOrders) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.personId \u003d personId;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.time \u003d time;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.subOrders \u003d subOrders;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Converts a given Order into this class for JAXB use."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedOrder"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public XmlAdaptedOrder(Order source) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        id \u003d String.valueOf(source.getId());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        personId \u003d source.getPersonId();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        time \u003d source.getTime().toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (SubOrder so : source.getSubOrders())"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            subOrders.add(new XmlAdaptedSubOrder(so));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Converts this jaxb-friendly adapted order object into the model\u0027s Order object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public Order toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.id \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final int id \u003d Integer.parseInt(this.id);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        // Note that we are using email as personId (i.e. foreign key) here"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.personId \u003d\u003d null) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"personId\"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (!Email.isValidEmail(this.personId)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final String personId \u003d this.personId;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.time \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Time\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final LocalDateTime time;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            time \u003d LocalDateTime.parse(this.time);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        } catch (DateTimeParseException dtpe) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIME_CONSTRAINTS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final List\u003cSubOrder\u003e soList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (XmlAdaptedSubOrder so : subOrders) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            soList.add(so.toModelType());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return new Order(id, personId, time, soList);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (!(other instanceof XmlAdaptedOrder)) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        XmlAdaptedOrder otherOrder \u003d (XmlAdaptedOrder) other;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return Objects.equals(id, otherOrder.id)"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 Objects.equals(personId, otherOrder.personId)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 Objects.equals(time, otherOrder.time)"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 subOrders.equals(otherOrder.subOrders);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 104,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private String age;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private String latitude;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private String longitude;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, String gender,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                            String age, String latitude, String longitude, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.gender \u003d gender;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.age \u003d age;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.latitude \u003d latitude;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.longitude \u003d longitude;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        age \u003dsource.getAge().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude \u003d source.getLatitude().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        longitude \u003d source.getLongitude().value;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.email \u003d\u003d null) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(this.email)) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (this.gender \u003d\u003d null) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName()));"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Gender.isValidGender(this.gender)) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        final Gender gender \u003d new Gender(this.gender);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (this.age \u003d\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Age.class.getSimpleName()));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Age.isValidAge(this.age)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Age.MESSAGE_AGE_CONSTRAINTS);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        final Age age \u003d new Age(this.age);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (this.latitude \u003d\u003d null) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Latitude.class.getSimpleName()));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Latitude.isValidLatitude(this.latitude)) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Latitude.MESSAGE_LATITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        final Latitude latitude \u003d new Latitude(this.latitude);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (this.longitude \u003d\u003d null) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Longitude.class.getSimpleName()));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        if (!Longitude.isValidLongitude(this.longitude)) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            throw new IllegalValueException(Longitude.MESSAGE_LONGITUDE_CONSTRAINTS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        final Longitude longitude \u003d new Longitude(this.longitude);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Person(name, phone, email, address,gender, age, latitude, longitude, tags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 Objects.equals(gender, otherPerson.gender)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 Objects.equals(age, otherPerson.age)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 Objects.equals(latitude, otherPerson.latitude)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                \u0026\u0026 Objects.equals(longitude, otherPerson.longitude)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 52,
      "-": 134
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedProduct.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Category;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductName;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * JAXB-friendly version of the Product."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class XmlAdaptedProduct {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Product\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String id;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String price;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String category;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Constructs an XmlAdaptedProduct."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public XmlAdaptedProduct() {}"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Constructs an {@code XmlAdaptedProduct} with the given product details."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public XmlAdaptedProduct(String id, String name, String price, String category) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.id \u003d id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.price \u003d price;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.category \u003d category;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Converts a given Product into this class for JAXB use."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedProduct"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public XmlAdaptedProduct(Product source) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        id \u003d String.valueOf(source.getId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        name \u003d source.getName().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        price \u003d source.getPrice().toString();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        category \u003d source.getCategory().toString();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Converts this jaxb-friendly adapted product object into the model\u0027s Product object."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted product"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public Product toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.id \u003d\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"id\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final int id \u003d Integer.parseInt(this.id);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, ProductName.class.getSimpleName()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (!ProductName.isValidProductName(this.name)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(ProductName.MESSAGE_PRODUCT_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final ProductName name \u003d new ProductName(this.name);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.price \u003d\u003d null) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"Price\"));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final Money price \u003d Money.parsePrice(this.price); //Throws IllegalValueException if price string isn\u0027t valid"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.category \u003d\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Category.class.getSimpleName()));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (!Category.isValidCategory(this.category)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(Category.MESSAGE_CATEGORY_CONSTRAINTS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final Category category \u003d new Category(this.category);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return new Product(id, name, price, category);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (!(other instanceof XmlAdaptedProduct)) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        XmlAdaptedProduct otherProduct \u003d (XmlAdaptedProduct) other;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return Objects.equals(id, otherProduct.id)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 Objects.equals(name, otherProduct.name)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 Objects.equals(price, otherProduct.price)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 Objects.equals(category, otherProduct.category);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 98,
      "-": 7,
      "YingxuH": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedSubOrder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * JAXB-friendly version of the SubOrder."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class XmlAdaptedSubOrder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"SubOrder\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String productId;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String numProduct;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private String productPrice;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Constructs an XmlAdaptedSubOrder."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public XmlAdaptedSubOrder() {}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Constructs an {@code XmlAdaptedSubOrder} with the given sub order details."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public XmlAdaptedSubOrder(String productId, String numProduct, String productPrice) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.productId \u003d productId;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.numProduct \u003d numProduct;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        this.productPrice \u003d productPrice;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Converts a given SubOrder into this class for JAXB use."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedSubOrder"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public XmlAdaptedSubOrder(SubOrder source) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        productId \u003d String.valueOf(source.getProductID());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        numProduct \u003d String.valueOf(source.getNumProduct());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        productPrice \u003d source.getProductPrice().toString();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Converts this jaxb-friendly adapted sub order object into the model\u0027s SubOrder object."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted order"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public SubOrder toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.productId \u003d\u003d null) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"productId\"));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final int productId \u003d Integer.parseInt(this.productId);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.numProduct \u003d\u003d null) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"numProduct\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final int numProduct \u003d Integer.parseInt(this.numProduct);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (this.productPrice \u003d\u003d null) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, \"productPrice\"));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Throws IllegalValueException if productPrice string isn\u0027t valid"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        final Money productPrice \u003d Money.parsePrice(this.productPrice);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return new SubOrder(productId, numProduct, productPrice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        if (!(other instanceof XmlAdaptedSubOrder)) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        XmlAdaptedSubOrder otherSubOrder \u003d (XmlAdaptedSubOrder) other;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return Objects.equals(productId, otherSubOrder.productId)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 Objects.equals(numProduct, otherSubOrder.numProduct)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                \u0026\u0026 Objects.equals(productPrice, otherSubOrder.productPrice);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 81,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.commons.events.ui.RenderMapEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String PERSON_LOCATION_PAGE_URL \u003d \"https://sivalavida.github.io/PersonLocationPage.html?name\u003d%s\u0026lat\u003d%s\u0026lon\u003d%s\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String SELECTED_PERSON_LOCATION_PAGE_URL \u003d \"https://sivalavida.github.io/SelectedPersonsLocationPage.html?\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author Sivalavida"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Loads location of person in Google Maps"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private void loadPersonLocationPage(Person person) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        loadPage(String.format(PERSON_LOCATION_PAGE_URL, person.getName().fullName, person.getLatitude().value,person.getLongitude().value));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Loads location of selected persons in Google Maps"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private void loadSelectedPersonsLocationPage(List\u003cPerson\u003e selectedPersons) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String completeUrl \u003d SELECTED_PERSON_LOCATION_PAGE_URL;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        boolean firstPerson \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        for (Person person:selectedPersons){"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            if (!firstPerson){"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                completeUrl +\u003d \"\u0026\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }else{"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                firstPerson \u003d false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            completeUrl +\u003d String.format(\"lat\u003d%s,%s\",person.getLatitude().value,person.getLongitude().value);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        loadPage(completeUrl);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        loadPersonLocationPage(event.getNewSelection().person);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author Sivalavida"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private void handleRenderMapEvent(RenderMapEvent event) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        loadSelectedPersonsLocationPage(event.getSelectedPersons());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 37,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private OrderListPanel orderListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ProductListPanel productListPanel;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane productListPanelPlaceholder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane orderListPanelPlaceholder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         *"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //@@author YingxuH"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanel \u003d new ProductListPanel(logic.getFilteredProductList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanelPlaceholder.getChildren().add(productListPanel.getRoot());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListPanel \u003d new OrderListPanel(logic.getFilteredOrderList());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListPanelPlaceholder.getChildren().add(orderListPanel.getRoot());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //@@author YingxuH"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        helpWindow.show();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this.personListPanel;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 53,
      "YingxuH": 164
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.DateTimeFormatter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.format.FormatStyle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An UI component that displays information of a {@code Order}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"OrderListCard.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final Order order;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label personId;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label time;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private FlowPane subOrders;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label totalPrice;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCard(Order order, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.order \u003d order;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        id.setText(Integer.toString(displayedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        personId.setText(order.getPersonId());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        id.setText(Integer.toString(order.getId()));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        time.setText(order.getTime().format(DateTimeFormatter.ofLocalizedDateTime(FormatStyle.SHORT)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        order.getSubOrders().forEach(subOrder -\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                subOrders.getChildren().add("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        createProductBox(subOrder)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        subOrders.setHgap(10);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        totalPrice.setText(\"Total: \" + order.getOrderTotal());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private VBox createProductBox (SubOrder subOrder) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        VBox box \u003d new VBox();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ObservableList list \u003d box.getChildren();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Label id \u003d new Label(subOrder.toString());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        list.add(id);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return box;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof OrderCard)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCard card \u003d (OrderCard) other;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 order.equals(card.order);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "YingxuH": 81
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/OrderListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.fxmisc.easybind.EasyBind;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.events.ui.OrderPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Panel containing the list of orders."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"OrderListPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(OrderListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ListView\u003cOrderCard\u003e orderListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderListPanel(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setConnections(orderList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setConnections(ObservableList\u003cOrder\u003e orderList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ObservableList\u003cOrderCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                orderList, (order) -\u003e new OrderCard(order, order.getId()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListView.setItems(mappedList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListView.setCellFactory(listView -\u003e new OrderListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        logger.fine(\"Selection in order list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        raise(new OrderPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Scrolls to the {@code OrderCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            orderListView.scrollTo(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            orderListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code OrderCard}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    class OrderListViewCell extends ListCell\u003cOrderCard\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        protected void updateItem(OrderCard order, boolean empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            super.updateItem(order, empty);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (empty || order \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(order.getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "YingxuH": 74
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Label age;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Label latitude;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Label longitude;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        gender.setText(person.getGender().value);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        age.setText(person.getAge().value);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude.setText(person.getLatitude().value);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        longitude.setText(person.getLongitude().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 12,
      "-": 70
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProductCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * An UI component that displays information of a {@code Product}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"ProductListCard.fxml\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public final Product product;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label price;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Label category;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCard(Product product, int displayedIndex) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.product \u003d product;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        id.setText(Integer.toString(displayedIndex));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        name.setText(product.getName().fullProductName);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        price.setText(product.getPrice().repMoney);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        category.setText(\"- \" + product.getCategory().value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!(other instanceof ProductCard)) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCard card \u003d (ProductCard) other;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u0026\u0026 product.equals(card.product);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "YingxuH": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ProductListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.fxmisc.easybind.EasyBind;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.commons.events.ui.ProductPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Panel containing the list of products."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String FXML \u003d \"ProductListPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(ProductListPanel.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ListView\u003cProductCard\u003e productListView;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductListPanel(ObservableList\u003cProduct\u003e productList) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setConnections(productList);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setConnections(ObservableList\u003cProduct\u003e productList) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ObservableList\u003cProductCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                productList, (product) -\u003e new ProductCard(product, product.getId()));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.setItems(mappedList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.setCellFactory(listView -\u003e new ProductListViewCell());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        logger.fine(\"Selection in product list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                        raise(new ProductPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                });"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Scrolls to the {@code ProductCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            productListView.scrollTo(index);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            productListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code ProductCard}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    class ProductListViewCell extends ListCell\u003cProductCard\u003e {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        protected void updateItem(ProductCard product, boolean empty) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            super.updateItem(product, empty);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            if (empty || product \u003d\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                setGraphic(product.getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 16,
      "YingxuH": 74
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c?import com.sun.javafx.scene.control.skin.TitledPaneSkin.TitleRegion?\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c?import com.sun.javafx.scene.control.skin.TabPaneSkin.TabHeaderArea?\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c?import javafx.scene.text.TextFlow?\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cImage url\u003d\"@/images/address_book_32.png\" /\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Retail Analytics\"\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"Help\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                   minHeight\u003d\"100\" prefHeight\u003d\"100\" maxHeight\u003d\"100\"\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"220\" prefWidth\u003d\"220\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "          \u003cVBox fx:id\u003d\"productList\" layoutX\u003d\"220.0\" minWidth\u003d\"220\" prefWidth\u003d\"220\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cStackPane fx:id\u003d\"productListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "          \u003cVBox fx:id\u003d\"orderList\" layoutX\u003d\"440.0\" minWidth\u003d\"220\" prefWidth\u003d\"220\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cStackPane fx:id\u003d\"orderListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 4,
      "-": 74,
      "YingxuH": 9
    }
  },
  {
    "path": "src/main/resources/view/OrderListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                \u003cLabel fx:id\u003d\"personId\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"time\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$time\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cFlowPane fx:id\u003d\"subOrders\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cLabel fx:id\u003d\"totalPrice\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$totalPrice\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "YingxuH": 8
    }
  },
  {
    "path": "src/main/resources/view/OrderListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cListView fx:id\u003d\"orderListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      \u003cLabel fx:id\u003d\"gender\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$gender\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      \u003cLabel fx:id\u003d\"age\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$age\" /\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      \u003cLabel fx:id\u003d\"latitude\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$latitude\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      \u003cLabel fx:id\u003d\"longitude\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$longitude\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 5,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/PersonLocationPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c!-- @@author Sivalavida --\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003ctitle\u003eTitle\u003c/title\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      #map {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        height: 400px;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        width: 100%;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        border: red;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       h3 {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "         text-align: center;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "         color: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "         text-decoration: underline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       body{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        background-color: #D2691E;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cscript type\u003d\"text/javascript\"\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003c/script\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003ch3\u003e\u003cspan id\u003d\"name\"\u003e\u003c/span\u003e\u0027s Location\u003c/h3\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003cdiv id\u003d\"map\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003cscript\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    function getJsonFromUrl() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var query \u003d location.search.substr(1);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var result \u003d {};"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      query.split(\"\u0026\").forEach(function(part) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        var item \u003d part.split(\"\u003d\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        result[item[0]] \u003d decodeURIComponent(item[1]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      });"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      return result;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    document.addEventListener(\"DOMContentLoaded\", function(event) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      document.getElementById(\"name\").innerHTML\u003dgetJsonFromUrl().name;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    });"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    function initMap() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var  centerOfSingapore\u003d {lat: 1.361607, lng: 103.807203};"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var map \u003d new google.maps.Map(document.getElementById(\u0027map\u0027), {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        zoom: 11,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        center: centerOfSingapore"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      });"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var marker \u003d new google.maps.Marker({"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        position: {lat: parseFloat(getJsonFromUrl().lat), lng: parseFloat(getJsonFromUrl().lon)},"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        animation: google.maps.Animation.DROP,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        map: map"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "  \u003c/script\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003cscript async defer"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        src\u003d\"https://maps.googleapis.com/maps/api/js?key\u003dAIzaSyB2xHmZDa_1SLz0-0NVx1Peqzp13mXrNkA\u0026callback\u003dinitMap\"\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 61
    }
  },
  {
    "path": "src/main/resources/view/ProductListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003cminWidth\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c/Label\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/HBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"category\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$category\"/\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003cLabel fx:id\u003d\"price\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$price\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            "
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/VBox\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/HBox\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "-": 28,
      "YingxuH": 7
    }
  },
  {
    "path": "src/main/resources/view/ProductListPanel.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.ListView?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cVBox xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    \u003cListView fx:id\u003d\"productListView\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/VBox\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "YingxuH": 2
    }
  },
  {
    "path": "src/main/resources/view/SelectedPersonsLocationPage.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c!-- @@author Sivalavida --\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003chtml lang\u003d\"en\"\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cmeta charset\u003d\"UTF-8\"\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003ctitle\u003eTitle\u003c/title\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cstyle\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      #map {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        height: 400px;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        width: 100%;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        border: red;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       h3 {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "         text-align: center;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "         color: white;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "         text-decoration: underline;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       body{"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        background-color: #D2691E;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "       }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003c/style\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003cbody\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003ch3\u003eGeographic Visulisation\u003c/h3\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003cdiv id\u003d\"map\"\u003e\u003c/div\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003cscript\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    function getJsonFromUrl() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var query \u003d location.search.substr(1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var testLocations \u003d [];"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      query.split(\"\u0026\").forEach(function(part) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        var data \u003d part.split(\"\u003d\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        var location \u003d {};"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        location[\u0027lat\u0027] \u003d parseFloat(data[1].split(\",\")[0]);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        location[\u0027lng\u0027] \u003d parseFloat(data[1].split(\",\")[1]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        testLocations.push(location);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      });"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      return testLocations;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    };"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    var testLocations \u003d getJsonFromUrl();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    function initMap() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var  centerOfSingapore\u003d {lat: 1.361607, lng: 103.807203};"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var map \u003d new google.maps.Map(document.getElementById(\u0027map\u0027), {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        zoom: 11,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        center: centerOfSingapore"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      });"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var labels \u003d \u0027ABCDEFGHIJKLMNOPQRSTUVWXYZ\u0027;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var markers \u003d testLocations.map(function(location, i) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "          return new google.maps.Marker({"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "              position: location,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "              label: labels[i % labels.length],"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "              map:map"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        });"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      });"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "      var markerCluster \u003d new MarkerClusterer(map, markers,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            {imagePath: \u0027https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/m\u0027});"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "  \u003c/script\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003cscript src\u003d\"https://developers.google.com/maps/documentation/javascript/examples/markerclusterer/markerclusterer.js\"\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003cscript async defer"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        src\u003d\"https://maps.googleapis.com/maps/api/js?key\u003dAIzaSyB2xHmZDa_1SLz0-0NVx1Peqzp13mXrNkA\u0026callback\u003dinitMap\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c/script\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 69
    }
  },
  {
    "path": "src/main/resources/view/testing.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c?import javafx.scene.layout.AnchorPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003cAnchorPane prefHeight\u003d\"400.0\" prefWidth\u003d\"600.0\" xmlns\u003d\"http://javafx.com/javafx/9.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"view.Testing\"\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003cchildren\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003cSplitPane dividerPositions\u003d\"0.29797979797979796\" layoutX\u003d\"177.0\" layoutY\u003d\"91.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"200.0\" AnchorPane.bottomAnchor\u003d\"0.0\" AnchorPane.leftAnchor\u003d\"0.0\" AnchorPane.rightAnchor\u003d\"0.0\" AnchorPane.topAnchor\u003d\"0.0\"\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003citems\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003cchildren\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                   \u003cVBox fx:id\u003d\"productList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "                           \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                       \u003cStackPane fx:id\u003d\"productListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                   \u003cVBox fx:id\u003d\"personList\" layoutX\u003d\"340.0\" minWidth\u003d\"340.0\" prefWidth\u003d\"340.0\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                       \u003cpadding\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                           \u003cInsets bottom\u003d\"10\" left\u003d\"10\" right\u003d\"10\" top\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "                       \u003c/padding\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "                       \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\" /\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "                   \u003c/VBox\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "               \u003c/children\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            \u003c/AnchorPane\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "          \u003cAnchorPane minHeight\u003d\"0.0\" minWidth\u003d\"0.0\" prefHeight\u003d\"160.0\" prefWidth\u003d\"100.0\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        \u003c/items\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "      \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "   \u003c/children\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "\u003c/AnchorPane\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 12,
      "YingxuH": 22
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidAndValidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Valid Person --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid phone field --\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e948asdf2424\u003c/phone\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 8,
      "-": 17
    }
  },
  {
    "path": "src/test/data/XmlAddressBookStorageTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid name field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHa!ns Mu@ster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/invalidPersonAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c!-- Person with invalid email field --\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@exam!32ple\u003c/email\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 10
    }
  },
  {
    "path": "src/test/data/XmlSerializableAddressBookTest/typicalPersonsAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- AddressBook save file which contains the same Person values as in"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "{@code TypicalPersons#getTypicalAddressBook()}--\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAlice Pauline\u003c/name\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e85355255\u003c/phone\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ealice@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e123, Jurong West Ave 6, #08-111\u003c/address\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender\u003eF\u003c/gender\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eBenson Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e98765432\u003c/phone\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ejohnd@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e311, Clementi Ave 2, #02-25\u003c/address\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003eowesMoney\u003c/tagged\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude\u003e1.406916\u003c/latitude\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude\u003e103.769663\u003c/longitude\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCarl Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude\u003e1.35222\u003c/latitude\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude\u003e103.981970\u003c/longitude\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eDaniel Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude\u003e1.336543\u003c/latitude\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude\u003e103.745234\u003c/longitude\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eElle Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude\u003e1.331234\u003c/latitude\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude\u003e103.749876\u003c/longitude\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eFiona Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender\u003eF\u003c/gender\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude\u003e1.339123\u003c/latitude\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude\u003e103.745146\u003c/longitude\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eGeorge Best\u003c/name\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude\u003e1.123160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude\u003e103.743466\u003c/longitude\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003efriends\u003c/tags\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctags\u003eowesMoney\u003c/tags\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 28,
      "-": 52
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/invalidPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with an invalid phone field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482asf424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003clatitude\u003e1.352222\u003c/latitude\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003clongitude\u003e103.981970\u003c/longitude\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 4,
      "-": 9
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/missingPersonField.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!-- Person with missing name field --\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003clatitude\u003e1.352222\u003c/latitude\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003clongitude\u003e103.981970\u003c/longitude\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 4,
      "-": 8
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validAddressBook.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003caddressbook\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eRuth Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87249245\u003c/phone\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eruth@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e81th street\u003c/address\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eHeinz Kurz\u003c/name\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e95352563\u003c/phone\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eheinz@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003ewall street\u003c/address\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eCornelia Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e87652533\u003c/phone\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ecornelia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e10th street\u003c/address\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eWerner Meyer\u003c/name\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482224\u003c/phone\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ewerner@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003emichegan ave\u003c/address\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eLydia Kunz\u003c/name\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482427\u003c/phone\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003elydia@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle tokyo\u003c/address\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eAnna Best\u003c/name\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e9482442\u003c/phone\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003eanna@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eStefan Meier\u003c/name\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003estefan@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003elittle india\u003c/address\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cpersons\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cname\u003eMartin Mueller\u003c/name\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cphone isPrivate\u003d\"false\"\u003e8482131\u003c/phone\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cemail isPrivate\u003d\"false\"\u003ehans@example.com\u003c/email\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003caddress isPrivate\u003d\"false\"\u003echicago ave\u003c/address\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003cage isPrivate\u003d\"false\"\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clatitude isPrivate\u003d\"false\"\u003e1.339160\u003c/latitude\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        \u003clongitude isPrivate\u003d\"false\"\u003e103.745166\u003c/longitude\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/persons\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/addressbook\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 36,
      "-": 57
    }
  },
  {
    "path": "src/test/data/XmlUtilTest/validPerson.xml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\" standalone\u003d\"yes\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cperson\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cname\u003eHans Muster\u003c/name\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cphone\u003e9482424\u003c/phone\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cemail\u003ehans@example\u003c/email\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003caddress\u003e4th street\u003c/address\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cgender isPrivate\u003d\"false\"\u003eM\u003c/gender\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003cage\u003e23\u003c/age\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003clatitude\u003e1.352222\u003c/latitude\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    \u003clongitude\u003e103.981970\u003c/longitude\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ctagged\u003efriends\u003c/tagged\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/person\u003e"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 4,
      "-": 8
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainWindowHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code MainWindow}."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindowHandle extends StageHandle {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    private final PersonListPanelHandle personListPanel;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final ProductListPanelHandle productListPanel;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final OrderListPanelHandle orderListPanel;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ResultDisplayHandle resultDisplay;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandBoxHandle commandBox;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBarFooterHandle statusBarFooter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private final MainMenuHandle mainMenu;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final BrowserPanelHandle browserPanel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle(Stage stage) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        super(stage);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanelHandle(getChildNode(PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //@@author YingxuH"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanel \u003d new ProductListPanelHandle(getChildNode(ProductListPanelHandle.PRODUCT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListPanel \u003d new OrderListPanelHandle(getChildNode(OrderListPanelHandle.ORDER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay \u003d new ResultDisplayHandle(getChildNode(ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return personListPanel;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductListPanelHandle getProductListPanel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return productListPanel;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderListPanelHandle getOrderListPanel() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return orderListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return resultDisplay;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return commandBox;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return statusBarFooter;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainMenu;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return browserPanel;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 51,
      "YingxuH": 16
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/OrderCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import javafx.scene.layout.VBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.time.ZoneOffset;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Provides a handle to a Order card in the Order list panel."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String PERSONID_FIELD_ID \u003d \"#personId\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String TIME_FIELD_ID \u003d \"#time\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String SUBORDERS_FIELD_ID \u003d \"#subOrders\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label personIdLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label timeLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final List\u003cVBox\u003e subOrdersLabels;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.personIdLabel \u003d getChildNode(PERSONID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.timeLabel\u003d getChildNode(TIME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Region subOrdersContainer \u003d getChildNode(SUBORDERS_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.subOrdersLabels \u003d subOrdersContainer"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .map(VBox.class::cast)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getPersonId() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return personIdLabel.getText();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public LocalDateTime getTime() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Instant instant \u003d Instant.parse(timeLabel.getText());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        System.out.println(\"Instant : \" + instant);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        //get date time only"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        LocalDateTime result \u003d LocalDateTime.ofInstant(instant, ZoneId.of(ZoneOffset.UTC.getId()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * returns all the children node inside each box"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public List\u003cObservableList\u003cNode\u003e\u003e getSubOrders() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return subOrdersLabels"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .map(VBox::getChildren)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 9,
      "YingxuH": 69
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/OrderListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.OrderCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "// @@author YingxuH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Provides a handle for {@code OrderListPanel} containing the list of {@code OrderCard}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderListPanelHandle extends NodeHandle\u003cListView\u003cOrderCard\u003e\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String ORDER_LIST_VIEW_ID \u003d \"#orderListView\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Optional\u003cOrderCard\u003e lastRememberedSelectedOrderCard;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderListPanelHandle(ListView\u003cOrderCard\u003e orderListPanelNode) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(orderListPanelNode);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a handle to the selected {@code OrderCardHandle}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e orderList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (orderList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"Order list size expected 1.\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new OrderCardHandle(orderList.get(0).getRoot());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Navigates the listview to display and select the order."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void navigateToCard(Order order) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e cards \u003d getRootNode().getItems();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Optional\u003cOrderCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.order.equals(order)).findFirst();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!matchingCard.isPresent()) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"Order does not exist.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            getRootNode().scrollTo(matchingCard.get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            getRootNode().getSelectionModel().select(matchingCard.get());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the order card handle of a order associated with the {@code index} in the list."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCardHandle getOrderCardHandle(int index) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return getOrderCardHandle(getRootNode().getItems().get(index).order);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the {@code OrderCardHandle} of the specified {@code order} in the list."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderCardHandle getOrderCardHandle(Order order) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Optional\u003cOrderCardHandle\u003e handle \u003d getRootNode().getItems().stream()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .filter(card -\u003e card.order.equals(order))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .map(card -\u003e new OrderCardHandle(card.getRoot()))"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Order does not exist.\"));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Selects the {@code OrderCard} at {@code index} in the list."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Remembers the selected {@code OrderCard} in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void rememberSelectedOrderCard() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            lastRememberedSelectedOrderCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            lastRememberedSelectedOrderCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the selected {@code OrderCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code rememberSelectedOrderCard()} call."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isSelectedOrderCardChanged() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cOrderCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return lastRememberedSelectedOrderCard.isPresent();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return !lastRememberedSelectedOrderCard.isPresent()"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    || !lastRememberedSelectedOrderCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "YingxuH": 130
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String GENDER_FIELD_ID \u003d \"#gender\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String AGE_FIELD_ID \u003d \"#age\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String LATITUDE_FIELD_ID \u003d \"#latitude\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String LONGITUDE_FIELD_ID \u003d \"#longitude\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Label genderLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Label ageLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Label latitudeLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private final Label longitudeLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.genderLabel \u003d getChildNode(GENDER_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.ageLabel \u003d getChildNode(AGE_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.latitudeLabel \u003d getChildNode(LATITUDE_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.longitudeLabel \u003d getChildNode(LONGITUDE_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author Sivalavida"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return genderLabel.getText();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getAge() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return ageLabel.getText();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getLatitude() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return latitudeLabel.getText();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public String getLongitude() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return longitudeLabel.getText();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 29,
      "-": 70
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ProductCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Provides a handle to a product card in the product list panel."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String PRICE_FIELD_ID \u003d \"#price\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final String CATEGORY_FIELD_ID \u003d \"#category\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label priceLabel;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private final Label categoryLabel;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.priceLabel\u003d getChildNode(PRICE_FIELD_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.categoryLabel \u003d getChildNode(CATEGORY_FIELD_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getPrice() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return priceLabel.getText();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public String getCategory() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return categoryLabel.getText();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 2,
      "YingxuH": 45
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ProductListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.ui.ProductCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * Provides a handle for {@code ProductListPanel} containing the list of {@code ProductCard}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductListPanelHandle extends NodeHandle\u003cListView\u003cProductCard\u003e\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String PRODUCT_LIST_VIEW_ID \u003d \"#productListView\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Optional\u003cProductCard\u003e lastRememberedSelectedProductCard;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductListPanelHandle(ListView\u003cProductCard\u003e productListPanelNode) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        super(productListPanelNode);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns a handle to the selected {@code ProductCardHandle}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e productList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (productList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"Product list size expected 1.\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new ProductCardHandle(productList.get(0).getRoot());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Navigates the listview to display and select the product."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void navigateToCard(Product product) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e cards \u003d getRootNode().getItems();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Optional\u003cProductCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.product.equals(product)).findFirst();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (!matchingCard.isPresent()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            throw new IllegalArgumentException(\"Product does not exist.\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            getRootNode().scrollTo(matchingCard.get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            getRootNode().getSelectionModel().select(matchingCard.get());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        });"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the product card handle of a product associated with the {@code index} in the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCardHandle getProductCardHandle(int index) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return getProductCardHandle(getRootNode().getItems().get(index).product);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the {@code ProductCardHandle} of the specified {@code product} in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductCardHandle getProductCardHandle(Product product) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Optional\u003cProductCardHandle\u003e handle \u003d getRootNode().getItems().stream()"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .filter(card -\u003e card.product.equals(product))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .map(card -\u003e new ProductCardHandle(card.getRoot()))"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Product does not exist.\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Selects the {@code ProductCard} at {@code index} in the list."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Remembers the selected {@code ProductCard} in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void rememberSelectedProductCard() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            lastRememberedSelectedProductCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            lastRememberedSelectedProductCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns true if the selected {@code ProductCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code rememberSelectedProductCard()} call."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public boolean isSelectedProductCardChanged() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProductCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return lastRememberedSelectedProductCard.isPresent();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            return !lastRememberedSelectedProductCard.isPresent()"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                    || !lastRememberedSelectedProductCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 6,
      "YingxuH": 129
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/XmlUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.JAXBException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAdaptedTag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlSerializableAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.AddressBookBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TestUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlUtilTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validAddressBook.xml\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File MISSING_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingPersonField.xml\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File INVALID_PERSON_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonField.xml\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File VALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"validPerson.xml\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempAddressBook.xml\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"9482asf424\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Hans Muster\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"9482424\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"hans@example\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"4th street\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String VALID_GENDER \u003d \"M\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String VALID_AGE \u003d \"23\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String VALID_LATITUDE \u003d \"1.352222\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String VALID_LONGITUDE \u003d \"103.981970\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"friends\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(null, AddressBook.class);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(MISSING_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(JAXBException.class);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.getDataFromFile(EMPTY_FILE, AddressBook.class);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDataFromFile_validFile_validResult() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableAddressBook.class).toModelType();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(9, dataFromFile.getPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, dataFromFile.getTagList().size());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithMissingPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                MISSING_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithInvalidPersonField_validResult() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                INVALID_PERSON_FIELD_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void xmlAdaptedPersonFromFile_fileWithValidPerson_validResult() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson actualPerson \u003d XmlUtil.getDataFromFile("
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                VALID_PERSON_FILE, XmlAdaptedPersonWithRootElement.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson expectedPerson \u003d new XmlAdaptedPerson("
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER,VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson, actualPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(null, new AddressBook());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(VALID_FILE, null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(FileNotFoundException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(MISSING_FILE, new AddressBook());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveDataToFile_validFile_dataSaved() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        TEMP_FILE.createNewFile();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataToWrite \u003d new XmlSerializableAddressBook(new AddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookBuilder builder \u003d new AddressBookBuilder(new AddressBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        dataToWrite \u003d new XmlSerializableAddressBook("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                builder.withPerson(new PersonBuilder().build()).withTag(\"Friends\").build());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(dataToWrite, dataFromFile);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to {@code XmlAdaptedPerson}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * objects."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlRootElement(name \u003d \"person\")"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class XmlAdaptedPersonWithRootElement extends XmlAdaptedPerson {}"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 10,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.OrderNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.ProductNotFoundException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new AddCommand with the details of the given person."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommand getAddCommandForPerson(Person person, Model model) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d new AddCommand(person);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void deleteProduct(Product target) throws ProductNotFoundException {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //@@author qinghao1"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        public void addOrder(Order order) throws DuplicateOrderException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        public void deleteOrder(Order order) throws OrderNotFoundException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        public void addProduct(Product product) throws DuplicateProductException {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        public ObservableList\u003cProduct\u003e getFilteredProductList() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public void updateFilteredProductList(Predicate\u003cProduct\u003e predicate) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        public ObservableList\u003cOrder\u003e getFilteredOrderList() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        public void updateFilteredOrderList(Predicate\u003cOrder\u003e predicate) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                throws DuplicatePersonException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always throw a DuplicatePersonException when trying to add a person."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 7,
      "qinghao1": 22,
      "-": 181,
      "YingxuH": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddOrderCommandIntegrationTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.*;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.*;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSubOrders.*;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code AddOrderCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class AddOrderCommandIntegrationTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        model \u003d new ModelManager(TypicalAddressBook.getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void execute_newOrder_success() throws Exception {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cSubOrder\u003e subOrders \u003d new ArrayList\u003c\u003e(Arrays.asList(SO_B, SO_D, SO_G, SO_H));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Order validOrder \u003d new Order(CARL, subOrders);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        expectedModel.addOrder(validOrder);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertCommandSuccess(prepareCommand(validOrder, model), model,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                AddOrderCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void execute_duplicateOrder_throwsCommandException() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Order dupOrder \u003d model.getAddressBook().getOrderList().get(0);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertCommandFailure(prepareCommand(dupOrder, model), model, AddOrderCommand.MESSAGE_DUPLICATE_ORDER);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void execute_invalidOrder_invalidEmail_throwsCommandException() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Invalid email"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cSubOrder\u003e subOrders1 \u003d new ArrayList\u003c\u003e(Arrays.asList(SO_B, SO_D, SO_G, SO_H));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Order invalidOrder1 \u003d new Order(\"wrongemail@email.com\", subOrders1);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertCommandFailure(prepareCommand(invalidOrder1, model), model, AddOrderCommand.MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void execute_invalidOrder_invalidProductId_throwsCommandException() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Invalid product ID"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            List\u003cSubOrder\u003e subOrders2 \u003d new ArrayList\u003c\u003e(Arrays.asList(SO_B, SO_D, SO_G, new SubOrder(999, 1, Money.parsePrice(\"$5\"))));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            Order invalidOrder2 \u003d new Order(CARL, subOrders2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            assertCommandFailure(prepareCommand(invalidOrder2, model), model, AddOrderCommand.MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            //Money.parsePrice() throws IllegalValueException"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void execute_invalidOrder_negativePrice_throwsCommandException() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Negative price"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Money negativePrice \u003d new Money(new BigDecimal(-1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        SubOrder negativeSubOrder \u003d new SubOrder(EGG.getId(), 5, negativePrice);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cSubOrder\u003e negativeSubOrderList \u003d new ArrayList\u003c\u003e(Arrays.asList(negativeSubOrder));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Order invalidOrder3 \u003d new Order(CARL, negativeSubOrderList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertCommandFailure(prepareCommand(invalidOrder3, model), model, AddOrderCommand.MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void execute_invalidOrder_repeatedProducts_throwsCommandException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Repeated product IDs"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cSubOrder\u003e repeatedSubOrders \u003d new ArrayList\u003c\u003e(Arrays.asList(SO_A, SO_A));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Order invalidOrder4 \u003d new Order(CARL, repeatedSubOrders);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertCommandFailure(prepareCommand(invalidOrder4, model), model, AddOrderCommand.MESSAGE_INVALID_ORDER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Generates a new {@code AddOrderCommand} which upon execution, adds {@code order} into the {@code model}."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private AddOrderCommand prepareCommand(Order order, Model model) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        AddOrderCommand command \u003d new AddOrderCommand(order);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 77,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"F\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"M\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String VALID_AGE_AMY \u003d \"23\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String VALID_AGE_BOB \u003d \"34\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String VALID_LATITUDE_AMY \u003d \"1.339160\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String VALID_LATITUDE_BOB \u003d \"1.406916\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String VALID_LONGITUDE_AMY \u003d \"103.745166\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String VALID_LONGITUDE_BOB \u003d \"103.769663\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String AGE_DESC_AMY \u003d \" \" + PREFIX_AGE + VALID_AGE_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String AGE_DESC_BOB \u003d \" \" + PREFIX_AGE + VALID_AGE_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String LATITUDE_DESC_AMY \u003d \" \" + PREFIX_LATITUDE + VALID_LATITUDE_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String LATITUDE_DESC_BOB \u003d \" \" + PREFIX_LATITUDE + VALID_LATITUDE_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String LONGITUDE_DESC_AMY \u003d \" \" + PREFIX_LONGITUDE + VALID_LONGITUDE_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String LONGITUDE_DESC_BOB \u003d \" \" + PREFIX_LONGITUDE + VALID_LONGITUDE_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"A\"; // alphebets other than m and f not allowed"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String INVALID_AGE_DESC \u003d \" \" + PREFIX_AGE + \"131\"; // more than 120 years old"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String INVALID_LATITUDE_DESC \u003d \" \" + PREFIX_LATITUDE + \"12345\"; // out of range"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String INVALID_LONGITUDE_DESC \u003d \" \" + PREFIX_LONGITUDE + \"12345\"; // out of range"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 21,
      "-": 151
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.*;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Person eighthPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(eighthPerson).build();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.push(editCommand);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e editCommand not pushed into undoRedoStack"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.push(editCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command preprocessed when previously equal -\u003e returns false"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        commandWithSameValues.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(index, descriptor);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        return editCommand;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 3,
      "-": 257
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withAge(VALID_AGE_BOB).withLatitude(VALID_LATITUDE_BOB)"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withLongitude(VALID_LONGITUDE_BOB).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, PREAMBLE_WHITESPACE + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // multiple genders - last gender accepted"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_AMY + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + LONGITUDE_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //@todo: add test for multiple age,lat,lon"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withAge(VALID_AGE_BOB).withLatitude(VALID_LATITUDE_BOB).withLongitude(VALID_LONGITUDE_BOB)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY).withLatitude(VALID_LATITUDE_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withLongitude(VALID_LONGITUDE_AMY).withTags().build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertParseSuccess(parser, NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //@todo: add gender, age, lat, lon missing prefix test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + VALID_GENDER_BOB + VALID_AGE_BOB + VALID_LATITUDE_BOB + VALID_LONGITUDE_BOB,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                expectedMessage);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + INVALID_GENDER_DESC + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //@todo: add invalid age, lat, lon test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertParseFailure(parser, INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB ,"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + ADDRESS_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB + LONGITUDE_DESC_BOB"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 61,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getEditablePersonDetails(person));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 143
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalAddressBook.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import com.sun.org.apache.xpath.internal.operations.Or;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTagList());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsAssertionError() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // Repeat ALICE twice"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        List\u003cProduct\u003e newProducts \u003d Arrays.asList(EGG, EGG);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cOrder\u003e newOrders \u003d Arrays.asList(ORDER_ONE, ORDER_ONE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newProducts, newOrders, newTags);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getTagList().remove(0);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private final ObservableList\u003cProduct\u003e products \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        private final ObservableList\u003cOrder\u003e orders \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003cProduct\u003e products, Collection\u003cOrder\u003e orders, Collection\u003c? extends Tag\u003e tags) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.products.setAll(products);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            this.orders.setAll(orders);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cProduct\u003e getProductList() { return products; }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        public ObservableList\u003cOrder\u003e getOrderList() { return orders;}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 95,
      "YingxuH": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueOrderListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.UniqueOrderList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class UniqueOrderListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        UniqueOrderList uniqueOrderList \u003d new UniqueOrderList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        uniqueOrderList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 12,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UniqueProductListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.UniqueProductList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class UniqueProductListTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        UniqueProductList uniqueProductList \u003d new UniqueProductList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        uniqueProductList.asObservableList().remove(0);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 12,
      "-": 6,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderBelongsToPeoplePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static junit.framework.TestCase.assertTrue;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.*;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class OrderBelongsToPeoplePredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void predicateReturnsTrue() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        emails.add(ALICE.getEmail().toString());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        emails.add(BENSON.getEmail().toString());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        OrderBelongsToPeoplePredicate predicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertTrue(predicate.test(ORDER_ONE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertTrue(predicate.test(ORDER_FOUR));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void predicateReturnsFalse() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cString\u003e emails \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        emails.add(CARL.getEmail().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        emails.add(DANIEL.getEmail().toString());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        OrderBelongsToPeoplePredicate predicate \u003d new OrderBelongsToPeoplePredicate(emails);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertFalse(predicate.test(ORDER_ONE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertFalse(predicate.test(ORDER_FOUR));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 22,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/OrderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.*;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class OrderTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void testDecrementCounter() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Creates one order, decrements the counter (to simulate invalid order), then creates another order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        //Their IDs should be the same."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        List\u003cSubOrder\u003e subOrders \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        subOrders.add(new SubOrder(1, 1, new Money()));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Order newOrder \u003d new Order(\"email@email.com\", subOrders);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        int id \u003d newOrder.getId();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Order.decrementOrderCounter();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        Order newOrder2 \u003d new Order(\"email@email.com\", subOrders);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        int id2 \u003d newOrder2.getId();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(id, id2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void getIdTest() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(ORDER_ONE.getId(), 1);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void getPersonIdTest() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(ORDER_ONE.getPersonId(), ALICE.getEmail().toString());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void getTimeTest() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(ORDER_ONE.getTime(), LocalDateTime.parse(\"2017-12-03T10:15:30\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void getOrderTotalTest() throws IllegalValueException {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(ORDER_ONE.getOrderTotal(), Money.parsePrice(\"$27\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Check Order.toString() returns correct format"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void toStringTest() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        String ORDER_ONE_STRING \u003d \"Order ID 1 by alice@example.com at 3 Dec, 2017 10:15:30 AM: \\n\" +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"-------------\\n\" +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"1- Product 1 x2 @$ 0.5\\n\" +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"2- Product 2 x3 @$ 2\\n\" +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"3- Product 7 x4 @$ 5\\n\" +"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"-------------\\n\" +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"Total: $ 27.0\\n\" +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"-------------\\n\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(ORDER_ONE.toString(), ORDER_ONE_STRING);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        String ORDER_TWO_STRING \u003d \"Order ID 2 by alice@example.com at 13 Dec, 2017 12:05:40 PM: \\n\" +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"-------------\\n\" +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"1- Product 1 x2 @$ 0.5\\n\" +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"2- Product 7 x4 @$ 5\\n\" +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"3- Product 5 x5 @$ 2000\\n\" +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"-------------\\n\" +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"Total: $ 10021.0\\n\" +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                                \"-------------\\n\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(ORDER_TWO.toString(), ORDER_TWO_STRING);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 62,
      "-": 15
    }
  },
  {
    "path": "src/test/java/seedu/address/model/order/SubOrderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.order;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSubOrders.*;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class SubOrderTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void getProductIdTest() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(SO_A.getProductID(), EGG.getId());"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(SO_B.getProductID(), MILK.getId());"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void getNumProductTest() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(SO_A.getNumProduct(), 2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(SO_B.getNumProduct(), 3);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void getProductPriceTest() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(SO_A.getProductPrice(), EGG.getPrice());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(SO_B.getProductPrice(), MILK.getPrice());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public void getTotalPriceTest() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(SO_A.getTotalPrice(), EGG.getPrice().times(SO_A.getNumProduct()));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        assertEquals(SO_B.getTotalPrice(), MILK.getPrice().times(SO_B.getNumProduct()));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 26,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AgeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class AgeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Age(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_invalidAge_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String invalidAge \u003d \"121\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Age(invalidAge));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void isValidAge() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Age.isValidAge(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"M*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"90.1234\")); // decimal values"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Age.isValidAge(\"-90\")); // negative values"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Age.isValidAge(\"2\")); //integer with one digit"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Age.isValidAge(\"20\")); //integer with two digit"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Age.isValidAge(\"110\")); //integer with three digit"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AgeWithinRangePredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class AgeWithinRangePredicateTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    Age TEN_YEARS_OLD \u003d new Age(\"10\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    Age TWENTY_YEARS_OLD \u003d new Age(\"20\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    Age THIRTY_YEARS_OLD \u003d new Age(\"30\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        AgeWithinRangePredicate firstPredicate \u003d new AgeWithinRangePredicate(TEN_YEARS_OLD, TWENTY_YEARS_OLD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        AgeWithinRangePredicate firstPredicateCopy \u003d new AgeWithinRangePredicate(TEN_YEARS_OLD, TWENTY_YEARS_OLD);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        AgeWithinRangePredicate secondPredicate \u003d new AgeWithinRangePredicate(TEN_YEARS_OLD, THIRTY_YEARS_OLD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(firstPredicate.equals(10));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // different age range -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void test_ageWithinRange_returnsTrue() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Strictly withing range"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        AgeWithinRangePredicate predicate \u003d new AgeWithinRangePredicate(TEN_YEARS_OLD, TWENTY_YEARS_OLD);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAge(\"15\").build()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Age equal to left boundary"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAge(\"10\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Age equal to left boundary"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAge(\"20\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //Age above upper limit"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        AgeWithinRangePredicate predicate \u003d new AgeWithinRangePredicate(TEN_YEARS_OLD, TWENTY_YEARS_OLD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withAge(\"35\").build()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // Age below lower limit"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withAge(\"2\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //Age range reversed"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        predicate \u003d new AgeWithinRangePredicate(TWENTY_YEARS_OLD, TEN_YEARS_OLD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withAge(\"15\").build()));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 42,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GenderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Gender(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_invalidGender_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String invalidGender \u003d \"q\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Gender(invalidGender));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Gender.isValidGender(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\"M*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Gender.isValidGender(\"M \")); // male with space"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Gender.isValidGender(\"M\")); // male in uppercase"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Gender.isValidGender(\"m\")); // male in lowercase"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Gender.isValidGender(\"F\")); // female in uppercase"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Gender.isValidGender(\"f\")); // female in lowercase"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/LatitudeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "//@@author Sivalavida"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class LatitudeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Latitude(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_invalidLatitude_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String invalidLatitude \u003d \"91\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Latitude(invalidLatitude));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void isValidLatitude() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Latitude.isValidLatitude(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"M*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"90.1234\")); // greater than 90"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"-90.1234\")); // less than 90"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"--90.9\")); // double negative sign"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Latitude.isValidLatitude(\"- 90.1234\")); // space between sign and number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Latitude.isValidLatitude(\"20.1234\")); // positive float"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Latitude.isValidLatitude(\"-20.1234\")); // negative float"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Latitude.isValidLatitude(\"90\")); // integers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Latitude.isValidLatitude(\"-90\")); // negative integer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Latitude latitude\u003d new Latitude(\"1.234\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"01.234000\", latitude.getValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude\u003d new Latitude(\"-1.234\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"-01.234000\", latitude.getValue());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude\u003d new Latitude(\"0\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"00.000000\", latitude.getValue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude\u003d new Latitude(\"2\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"02.000000\", latitude.getValue());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/LongitudeTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "public class LongitudeTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Longitude(null));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void constructor_invalidLongitude_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String invalidLongitude \u003d \"181\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Longitude(invalidLongitude));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void isValidLongitude() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // null gender"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Longitude.isValidLongitude(null));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Longitude.isValidLongitude(\"\")); // empty string"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Longitude.isValidLongitude(\" \")); // spaces only"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Longitude.isValidLongitude(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Longitude.isValidLongitude(\"M*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Longitude.isValidLongitude(\"180.1234\")); // greater than 180"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Longitude.isValidLongitude(\"-180.1234\")); // less than 180"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Longitude.isValidLongitude(\"--180.9\")); // double negative sign"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertFalse(Longitude.isValidLongitude(\"- 180.1234\")); // space between sign and number"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        // valid gender"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Longitude.isValidLongitude(\"20.1234\")); // positive float"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Longitude.isValidLongitude(\"-20.1234\")); // negative float"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Longitude.isValidLongitude(\"180\")); // integers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertTrue(Longitude.isValidLongitude(\"-180\")); // negative integer"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void getValue() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Latitude latitude\u003d new Latitude(\"1.234\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"01.234000\", latitude.getValue());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude\u003d new Latitude(\"-1.234\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"-01.234000\", latitude.getValue());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude\u003d new Latitude(\"0\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"00.000000\", latitude.getValue());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude\u003d new Latitude(\"2\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(\"02.000000\", latitude.getValue());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 55,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/ProductCostsBetweenPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.Age;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.AgeWithinRangePredicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ProductCostsBetweenPredicateTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    Money TEN_DOLLARS \u003d new Money(new BigDecimal(10));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    Money TWENTY_DOLLARS \u003d new Money(new BigDecimal(20));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    Money THIRTY_DOLLARS \u003d new Money(new BigDecimal(30));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductCostsBetweenPredicate firstPredicate \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, TWENTY_DOLLARS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductCostsBetweenPredicate firstPredicateCopy \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, TWENTY_DOLLARS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductCostsBetweenPredicate secondPredicate \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, THIRTY_DOLLARS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(firstPredicate.equals(10));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // different age range -\u003e returns false"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void test_ageWithinRange_returnsTrue() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Strictly withing range"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductCostsBetweenPredicate predicate \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, TWENTY_DOLLARS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Price equal to left boundary"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(10)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Price equal to left boundary"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(20)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        //Price above upper limit"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductCostsBetweenPredicate predicate \u003d new ProductCostsBetweenPredicate(TEN_DOLLARS, TWENTY_DOLLARS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(35)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Price below lower bound"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(2)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        //Price range reversed"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        predicate \u003d new ProductCostsBetweenPredicate(TWENTY_DOLLARS, TEN_DOLLARS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"psp\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 10,
      "lowjiajin": 58,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/model/product/ProductNameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "package seedu.address.model.product;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static org.junit.Assert.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "//@@author lowjiajin"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "public class ProductNameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductNameContainsKeywordsPredicate firstPredicate \u003d new ProductNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductNameContainsKeywordsPredicate secondPredicate \u003d new ProductNameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductNameContainsKeywordsPredicate firstPredicateCopy \u003d new ProductNameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void test_productNameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductNameContainsKeywordsPredicate predicate \u003d new ProductNameContainsKeywordsPredicate(Collections.singletonList(\"game\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"game boy\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        predicate \u003d new ProductNameContainsKeywordsPredicate(Arrays.asList(\"game\", \"boy\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"game boy\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        predicate \u003d new ProductNameContainsKeywordsPredicate(Arrays.asList(\"game\", \"towel\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertTrue(predicate.test(new Product(new ProductName( \"game\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        ProductNameContainsKeywordsPredicate predicate \u003d new ProductNameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"game\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        predicate \u003d new ProductNameContainsKeywordsPredicate(Arrays.asList(\"boy\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "        assertFalse(predicate.test(new Product(new ProductName( \"game\"), new Money(new BigDecimal(15)), new Category(\"toys\"))));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "lowjiajin"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 8,
      "lowjiajin": 54,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlAdaptedPersonTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.storage.XmlAdaptedPerson.MISSING_FIELD_MESSAGE_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPersonTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"a\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String INVALID_AGE \u003d \"123\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String INVALID_LATITUDE \u003d \"1234.352222\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String INVALID_LONGITUDE \u003d \"1034.981970\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d BENSON.getName().toString();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d BENSON.getPhone().toString();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d BENSON.getEmail().toString();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d BENSON.getAddress().toString();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String VALID_GENDER \u003d BENSON.getGender().value;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String VALID_AGE \u003d BENSON.getGender().value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String VALID_LATITUDE \u003d BENSON.getLatitude().value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private static final String VALID_LONGITUDE \u003d BENSON.getLongitude().value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d BENSON.getTags().stream()"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .map(XmlAdaptedTag::new)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .collect(Collectors.toList());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_validPersonDetails_returnsPerson() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(BENSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(BENSON, person.toModelType());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new XmlAdaptedPerson(INVALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullName_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(null, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, INVALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Phone.MESSAGE_PHONE_CONSTRAINTS;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullPhone_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, INVALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullEmail_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, null, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, INVALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_nullAddress_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, null, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void toModelType_invalidGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, INVALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String expectedMessage \u003d Gender.MESSAGE_GENDER_CONSTRAINTS;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public void toModelType_nullGender_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        XmlAdaptedPerson person \u003d new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, null, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                , VALID_LONGITUDE, VALID_TAGS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Gender.class.getSimpleName());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, expectedMessage, person::toModelType);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@todo: add invalid and null tests for age,lat and long"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toModelType_invalidTags_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlAdaptedPerson person \u003d"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                new XmlAdaptedPerson(VALID_NAME, VALID_PHONE, VALID_EMAIL, VALID_ADDRESS, VALID_GENDER, VALID_AGE, VALID_LATITUDE"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                        , VALID_LONGITUDE, invalidTags);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, person::toModelType);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 38,
      "-": 105
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/XmlSerializableAddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import seedu.address.commons.util.XmlUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//public class XmlSerializableAddressBookTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlSerializableAddressBookTest/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    private static final File TYPICAL_PERSONS_FILE \u003d new File(TEST_DATA_FOLDER + \"typicalPersonsAddressBook.xml\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    private static final File INVALID_PERSON_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidPersonAddressBook.xml\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagAddressBook.xml\");"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    @Rule"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    public void toModelType_typicalPersonsFile_success() throws Exception {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_PERSONS_FILE,"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        AddressBook addressBookFromFile \u003d dataFromFile.toModelType();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        AddressBook typicalPersonsAddressBook \u003d TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        assertEquals(addressBookFromFile, typicalPersonsAddressBook);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    public void toModelType_invalidPersonFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_PERSON_FILE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        XmlSerializableAddressBook dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//                XmlSerializableAddressBook.class);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//        dataFromFile.toModelType();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//}"
      }
    ],
    "authorContributionMap": {
      "YingxuH": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 82
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"F\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String DEFAULT_AGE \u003d \"23\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String DEFAULT_LATITUDE \u003d \"1.406916\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final String DEFAULT_LONGITUDE \u003d \"103.769663\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"friends\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Gender gender;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Age age;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Latitude latitude;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    private Longitude longitude;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        gender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        age \u003d new Age(DEFAULT_AGE);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude \u003d new Latitude(DEFAULT_LATITUDE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        longitude \u003d new Longitude(DEFAULT_LONGITUDE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        gender \u003d personToCopy.getGender();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        age \u003d personToCopy.getAge();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        latitude \u003d personToCopy.getLatitude();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        longitude \u003d personToCopy.getLongitude();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author Sivalavida"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.gender \u003d new Gender(gender);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets the {@code Age} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public PersonBuilder withAge(String age) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.age \u003d new Age(age);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets the {@code Latitude} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public PersonBuilder withLatitude(String latitude) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.latitude \u003d new Latitude(latitude);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Sets the {@code Longitude} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public PersonBuilder withLongitude(String longitude) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        this.longitude \u003d new Longitude(longitude);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new Person(name, phone, email, address, gender, age, latitude, longitude, tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 51,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.*;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(Person person) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().value + \" \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        sb.append(PREFIX_AGE + person.getAge().value + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        sb.append(PREFIX_LATITUDE + person.getLatitude().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        sb.append(PREFIX_LONGITUDE + person.getLongitude().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details which can be edited."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static String getEditablePersonDetails(Person person) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 12,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/ProductBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Category;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductName;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "content": "//@@author He Yingxu"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " * A utility class to help with building Product objects."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductBuilder {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_PRODUCTNAME \u003d \"Laptop\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final BigDecimal DEFAULT_PRICE \u003d new BigDecimal(1000);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final String DEFAULT_CATEGORY \u003d \"PC\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ProductName name;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Money price;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private Category category;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        name \u003d new ProductName(DEFAULT_PRODUCTNAME);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        price \u003d new Money(DEFAULT_PRICE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        category \u003d new Category(DEFAULT_CATEGORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Initializes the ProductBuilder with the data of {@code productToCopy}."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder(Product productToCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        name \u003d productToCopy.getName();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        price \u003d productToCopy.getPrice();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        category \u003d productToCopy.getCategory();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Name} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder withName(String name) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.name \u003d new ProductName(name);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Price} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder withPrice(BigDecimal amount) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.price \u003d new Money(amount);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Sets the {@code Category} of the {@code Product} that we are building."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductBuilder withCategory(String category) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        this.category \u003d new Category(category);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public Product build() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        return new Product(name, price, category);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "YingxuH": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.exceptions.DuplicateOrderException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.exceptions.DuplicateProductException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * Class to get typical address book with typical persons, orders and products."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class TypicalAddressBook {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons, orders and products."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (Person person : TypicalPersons.getTypicalPersons()) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                ab.addPerson(person);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (Order order : TypicalOrders.getTypicalOrders()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                ab.addOrder(order);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            } catch (DuplicateOrderException e) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        for (Product product : TypicalProducts.getTypicalProducts()) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                ab.addProduct(product);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            } catch (DuplicateProductException e) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 34,
      "-": 8,
      "YingxuH": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "content": "    //@@author He Yingxu"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_FIRST_PRODUCT \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_SECOND_PRODUCT \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_THIRD_PRODUCT \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_FIRST_ORDER \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_SECOND_ORDER \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static final Index INDEX_THIRD_ORDER \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "-": 12,
      "YingxuH": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalOrders.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.LocalDateTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalSubOrders.*;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * A utility class containing a list of {@code Order} objects to be used in tests."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class TypicalOrders {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    //Orders 1-7 are created manually, 8-10 are created dynamically (time is LocalDateTime.now())"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_ONE \u003d new Order("
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            1,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            ALICE,"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            LocalDateTime.parse(\"2017-12-03T10:15:30\"),"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_A, SO_B, SO_C))"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_TWO \u003d new Order("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            2,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            ALICE,"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            LocalDateTime.parse(\"2017-12-13T12:05:40\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_A, SO_C, SO_D))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_THREE \u003d new Order("
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            3,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            ALICE,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            LocalDateTime.parse(\"2017-12-14T05:14:30\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_B, SO_C, SO_E))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_FOUR \u003d new Order("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            4,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            BENSON,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            LocalDateTime.parse(\"2017-12-18T12:15:30\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_F, SO_G))"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_FIVE \u003d new Order("
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            5,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            BOB,"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            LocalDateTime.parse(\"2017-12-20T10:18:30\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_A, SO_E, SO_H))"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_LARGE \u003d new Order("
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            6,"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            CARL,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            LocalDateTime.parse(\"2017-12-21T10:15:30\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_I, SO_LARGE))"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_SIX \u003d ORDER_LARGE; //alias"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_FREE \u003d new Order("
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            7,"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            KALE,"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            LocalDateTime.parse(\"2017-12-25T20:15:30\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_FREE))"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_SEVEN \u003d ORDER_FREE; //alias"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_EIGHT \u003d new Order("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            FIONA,"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_A, SO_B))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_NINE \u003d new Order("
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            GEORGE,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_C, SO_D, SO_E))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final Order ORDER_TEN \u003d new Order("
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            GEORGE,"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            new ArrayList\u003cSubOrder\u003e(Arrays.asList(SO_C, SO_D))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    );"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static List\u003cOrder\u003e getTypicalOrders() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList("
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                ORDER_ONE, ORDER_TWO, ORDER_THREE, ORDER_FOUR, ORDER_FIVE, ORDER_SIX, ORDER_SEVEN, ORDER_EIGHT, ORDER_NINE, ORDER_TEN"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        ));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 81,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withPhone(\"85355255\").withGender(\"F\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\").withGender(\"F\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").withTags(\"friends\").build();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withGender(\"F\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withGender(\"F\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    //Persons with same uneditable attributes ie Gender, Age, Latitude and Longitude"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final Person JACOB \u003d new PersonBuilder().withName(\"Jacob Becky\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final Person KALE \u003d new PersonBuilder().withName(\"Kale Cook\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "    public static final Person LEE \u003d new PersonBuilder().withName(\"Lee Sim\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withGender(\"M\").withAge(\"23\").withLatitude(\"1.406916\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withLongitude(\"103.769663\").build();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            .build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE, JACOB, KALE, LEE));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 34,
      "-": 42
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalProducts.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import java.math.BigDecimal;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Category;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.ProductName;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * A utility class containing a list of {@code Product} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class TypicalProducts {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    //Prevent instantiation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private TypicalProducts() {};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static Product EGG, MILK, SHIRT, PANTS, LAPTOP, SWEET, PAPER, PEN, PENCIL, SODA;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    //Wrap in static block because Money.parsePrice() throws IllegalValueException"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            //Product IDs are set manually for first few to ensure that IDs 1-6 are present, then automatically set later"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            EGG \u003d new Product(1, new ProductName(\"Egg\"),"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"0.5\"), new Category(\"Food\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            MILK \u003d new Product(2, new ProductName(\"Milk\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"2\"), new Category(\"Food\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            SHIRT \u003d new Product(3, new ProductName(\"Shirt\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"15\"), new Category(\"Fashion\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            PANTS \u003d new Product(4, new ProductName(\"Pants\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"20\"), new Category(\"Fashion\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            LAPTOP \u003d new Product(5, new ProductName(\"Laptop\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"2000\"), new Category(\"Tech\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            SWEET \u003d new Product(6, new ProductName(\"Sweet\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"0.05\"), new Category(\"Food\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            PAPER \u003d new Product(new ProductName(\"Paper\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"5\"), new Category(\"Stationery\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            PEN \u003d new Product(new ProductName(\"Pen\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"1.5\"), new Category(\"Stationery\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            PENCIL \u003d new Product(new ProductName(\"Pencil\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"1\"), new Category(\"Stationery\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            SODA \u003d new Product(new ProductName(\"Soda\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "                    Money.parsePrice(\"2\"), new Category(\"Food\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "            ive.printStackTrace();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static List\u003cProduct\u003e getTypicalProducts() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(EGG, MILK, SHIRT, PANTS, LAPTOP, SWEET, PAPER, PEN, PENCIL, SODA));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 45,
      "-": 5,
      "YingxuH": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalSubOrders.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.money.Money;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.order.SubOrder;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.*;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "//@@author qinghao1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " * A utility class containing a list of {@code SubOrder} objects to be used in tests."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "qinghao1"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "public class TypicalSubOrders {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    //Prevents instantiation"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    private TypicalSubOrders() {};"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_A \u003d new SubOrder(EGG.getId(), 2, EGG.getPrice());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_B \u003d new SubOrder(MILK.getId(), 3, MILK.getPrice());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_C \u003d new SubOrder(PAPER.getId(), 4, PAPER.getPrice());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_D \u003d new SubOrder(LAPTOP.getId(), 5, LAPTOP.getPrice());;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_E \u003d new SubOrder(PEN.getId(), 20, PEN.getPrice());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_F \u003d new SubOrder(SODA.getId(), 1, SODA.getPrice());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_G \u003d new SubOrder(SHIRT.getId(), 2, SHIRT.getPrice());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_H \u003d new SubOrder(EGG.getId(), 12, EGG.getPrice());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_I \u003d new SubOrder(PANTS.getId(), 1, PANTS.getPrice());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    //Edge cases"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_LARGE \u003d new SubOrder(LAPTOP.getId(), 2000, LAPTOP.getPrice());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static final SubOrder SO_FREE \u003d new SubOrder(SHIRT.getId(), 1, new Money());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "qinghao1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    public static List\u003cSubOrder\u003e getTypicalSubOrders() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(SO_A, SO_B, SO_C, SO_D, SO_E, SO_F, SO_G, SO_H, SO_I, SO_LARGE, SO_FREE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "qinghao1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "qinghao1": 26,
      "-": 12,
      "YingxuH": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // associated web page of a person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(BrowserPanel.PERSON_LOCATION_PAGE_URL + ALICE.getName().fullName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 47
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/OrderCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ORDER_ONE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ORDER_THREE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.ORDER_TWO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysOrder;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.OrderCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // first order"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Order orderToTestFirst \u003d ORDER_ONE;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCard orderCard \u003d new OrderCard(orderToTestFirst, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(orderCard);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplay(orderCard, orderToTestFirst, 1);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // second order"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Order orderToTestSecond \u003d ORDER_TWO;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderCard \u003d new OrderCard(orderToTestSecond, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(orderCard);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplay(orderCard, orderToTestSecond, 2);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Order order \u003d ORDER_ONE;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCard orderCard \u003d new OrderCard(order, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same order, same index -\u003e returns true"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCard copy \u003d new OrderCard(order, 0);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(orderCard.equals(copy));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different order, same index -\u003e returns false"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Order differentOrder \u003d ORDER_THREE;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(orderCard.equals(new OrderCard(differentOrder, 0)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same order, different index -\u003e returns false"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(orderCard.equals(new OrderCard(order, 1)));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(orderCard.equals(orderCard));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(orderCard.equals(null));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(orderCard.equals(0));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code orderCard} displays the details of {@code expectedOrder} correctly and matches"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void assertCardDisplay(OrderCard orderCard, Order expectedOrder, int expectedId) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCardHandle orderCardHandle \u003d new OrderCardHandle(orderCard.getRoot());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", orderCardHandle.getId());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // verify order details are displayed correctly"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplaysOrder(expectedOrder, orderCardHandle);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "YingxuH": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/OrderListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_ORDER;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_ORDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalOrders.getTypicalOrders;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysOrder;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertOrderCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.OrderCardHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.OrderListPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class OrderListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final ObservableList\u003cOrder\u003e TYPICAL_ORDERS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            FXCollections.observableList(getTypicalOrders());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_ORDER);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private OrderListPanelHandle orderListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderListPanel orderListPanel \u003d new OrderListPanel(TYPICAL_ORDERS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(orderListPanel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        orderListPanelHandle \u003d new OrderListPanelHandle(getChildNode(orderListPanel.getRoot(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                OrderListPanelHandle.ORDER_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_ORDERS.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            orderListPanelHandle.navigateToCard(TYPICAL_ORDERS.get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Order expectedOrder \u003d TYPICAL_ORDERS.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            OrderCardHandle actualCard \u003d orderListPanelHandle.getOrderCardHandle(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            assertCardDisplaysOrder(expectedOrder, actualCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            /*The index in the order list should be their real id instead of their orders.*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            int expectedIndex \u003d expectedOrder.getId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            assertEquals(Integer.toString(expectedIndex) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCardHandle expectedCard \u003d orderListPanelHandle.getOrderCardHandle(INDEX_THIRD_ORDER.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        OrderCardHandle selectedCard \u003d orderListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertOrderCardEquals(expectedCard, selectedCard);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "YingxuH": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertPersonCardEquals;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final ObservableList\u003cPerson\u003e TYPICAL_PERSONS \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "            FXCollections.observableList(getTypicalPersons());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanelHandle personListPanelHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonListPanel personListPanel \u003d new PersonListPanel(TYPICAL_PERSONS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personListPanel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelHandle \u003d new PersonListPanelHandle(getChildNode(personListPanel.getRoot(),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "                PersonListPanelHandle.PERSON_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PERSONS.size(); i++) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            personListPanelHandle.navigateToCard(TYPICAL_PERSONS.get(i));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            Person expectedPerson \u003d TYPICAL_PERSONS.get(i);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            PersonCardHandle actualCard \u003d personListPanelHandle.getPersonCardHandle(i);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle expectedCard \u003d personListPanelHandle.getPersonCardHandle(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle selectedCard \u003d personListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertPersonCardEquals(expectedCard, selectedCard);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 56,
      "YingxuH": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ProductCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysProduct;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.ProductCardHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.testutil.ProductBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product productWithNoCategory \u003d new ProductBuilder().withCategory(\"random\").build();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCard productCard \u003d new ProductCard(productWithNoCategory, 1);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(productCard);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplay(productCard, productWithNoCategory, 1);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product productWithCategory \u003d new ProductBuilder().build();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productCard \u003d new ProductCard(productWithCategory, 2);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(productCard);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplay(productCard, productWithCategory, 2);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product product \u003d new ProductBuilder().build();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCard productCard \u003d new ProductCard(product, 0);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same product, same index -\u003e returns true"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCard copy \u003d new ProductCard(product, 0);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(productCard.equals(copy));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different product, same index -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        Product differentProduct \u003d new ProductBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(productCard.equals(new ProductCard(differentProduct, 0)));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same product, different index -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(productCard.equals(new ProductCard(product, 1)));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertTrue(productCard.equals(productCard));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(productCard.equals(null));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertFalse(productCard.equals(0));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code productCard} displays the details of {@code expectedProduct} correctly and matches"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private void assertCardDisplay(ProductCard productCard, Product expectedProduct, int expectedId) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCardHandle productCardHandle \u003d new ProductCardHandle(productCard.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", productCardHandle.getId());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        // verify product details are displayed correctly"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertCardDisplaysProduct(expectedProduct, productCardHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 5,
      "YingxuH": 68
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ProductListPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PRODUCT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PRODUCT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.testutil.TypicalProducts.getTypicalProducts;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysProduct;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertProductCardEquals;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.ProductCardHandle;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.ProductListPanelHandle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "//@@author YingxuH"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "public class ProductListPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final ObservableList\u003cProduct\u003e TYPICAL_PRODUCTS \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            FXCollections.observableList(getTypicalProducts());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d new JumpToListRequestEvent(INDEX_SECOND_PRODUCT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    private ProductListPanelHandle productListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductListPanel productListPanel \u003d new ProductListPanel(TYPICAL_PRODUCTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        uiPartRule.setUiPart(productListPanel);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        productListPanelHandle \u003d new ProductListPanelHandle(getChildNode(productListPanel.getRoot(),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "                ProductListPanelHandle.PRODUCT_LIST_VIEW_ID));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        for (int i \u003d 0; i \u003c TYPICAL_PRODUCTS.size(); i++) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            productListPanelHandle.navigateToCard(TYPICAL_PRODUCTS.get(i));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            Product expectedProduct \u003d TYPICAL_PRODUCTS.get(i);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            ProductCardHandle actualCard \u003d productListPanelHandle.getProductCardHandle(i);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            assertCardDisplaysProduct(expectedProduct, actualCard);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            /*The index in the product list should be their real id instead of their orders.*/"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            int expectedIndex \u003d expectedProduct.getId();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "            assertEquals(Integer.toString(expectedIndex)+\". \", actualCard.getId());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public void handleJumpToListRequestEvent() {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        postNow(JUMP_TO_SECOND_EVENT);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCardHandle expectedCard \u003d productListPanelHandle.getProductCardHandle(INDEX_SECOND_PRODUCT.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        ProductCardHandle selectedCard \u003d productListPanelHandle.getHandleToSelectedCard();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertProductCardEquals(expectedCard, selectedCard);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "-": 7,
      "YingxuH": 56
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.OrderCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.ProductCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.order.Order;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import seedu.address.model.product.Product;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code actualPersonCard} displays the same values as {@code expectedPersonCard}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void assertPersonCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(expectedCard.getGender(), actualCard.getGender());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(expectedCard.getAge(), actualCard.getAge());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(expectedCard.getLatitude(), actualCard.getLatitude());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(expectedCard.getLongitude(), actualCard.getLongitude());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(expectedPerson.getGender().value, actualCard.getGender());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(expectedPerson.getAge().value, actualCard.getAge());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(expectedPerson.getLatitude().value, actualCard.getLatitude());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        assertEquals(expectedPerson.getLongitude().value, actualCard.getLongitude());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author YingxuH"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code actualProductCard} displays the same values as {@code expectedProductCard}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void assertProductCardEquals(ProductCardHandle expectedCard, ProductCardHandle actualCard) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getPrice(), actualCard.getPrice());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getCategory(), actualCard.getCategory());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedProduct}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void assertCardDisplaysProduct(Product expectedProduct, ProductCardHandle actualCard) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedProduct.getName().fullProductName, actualCard.getName());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedProduct.getPrice().repMoney, actualCard.getPrice());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedProduct.getCategory().value, actualCard.getCategory());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code actualOrderCard} displays the same values as {@code expectedOrderCard}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void assertOrderCardEquals(OrderCardHandle expectedCard, OrderCardHandle actualCard) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getPersonId(), actualCard.getPersonId());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getTime(), actualCard.getTime());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedCard.getSubOrders(), actualCard.getSubOrders());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedProduct}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public static void assertCardDisplaysOrder(Order expectedOrder, OrderCardHandle actualOrder) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedOrder.getPersonId(), actualOrder.getPersonId());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "        assertEquals(expectedOrder.getTime(), actualOrder.getTime());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 8,
      "-": 71,
      "YingxuH": 47
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        Person toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withAge(VALID_AGE_AMY).withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + PHONE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + GENDER_DESC_AMY + \"   \" + AGE_DESC_AMY"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + \"   \" + LATITUDE_DESC_AMY + \"   \" + LONGITUDE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withGender(VALID_GENDER_AMY).withAge(VALID_AGE_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withLatitude(VALID_LATITUDE_AMY).withLongitude(VALID_LONGITUDE_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //@todo: add test where add person with all fields same except gender, lat, age, lon"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        toAdd \u003d  new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withAge(VALID_AGE_BOB).withLatitude(VALID_LATITUDE_BOB).withLongitude(VALID_LONGITUDE_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .build();;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + TAG_DESC_HUSBAND + EMAIL_DESC_BOB + GENDER_DESC_BOB + AGE_DESC_BOB + LATITUDE_DESC_BOB"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + LONGITUDE_DESC_BOB;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // This test will fail if a new tag that is not in the model is used, see the bug documented in"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // AddressBook#addPerson(Person)"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d PersonUtil.getAddCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + ADDRESS_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        /* Case: missing gender -\u003e rejected */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //@todo: add missing age, lat, lon tests"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                    + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + INVALID_GENDER_DESC + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "        //@todo: add invalid age, lat, lon tests"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + GENDER_DESC_AMY + AGE_DESC_AMY + LATITUDE_DESC_AMY + LONGITUDE_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 52,
      "-": 219
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.MalformedURLException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.OrderListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "import guitests.guihandles.ProductListPanelHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalAddressBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalAddressBook.getTypicalAddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getDataFileLocation() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() { return mainWindowHandle.getPersonListPanel(); }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public ProductListPanelHandle getProductListPanel() { return mainWindowHandle.getProductListPanel(); }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "YingxuH"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "YingxuH"
        },
        "content": "    public OrderListPanelHandle getOrderListPanel() { return mainWindowHandle.getOrderListPanel(); }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, getModel());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedUrl;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "            expectedUrl \u003d new URL(BrowserPanel.PERSON_LOCATION_PAGE_URL + selectedCardName.replaceAll(\" \", \"%20\"));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (MalformedURLException mue) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"URL expected to be valid.\");"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Starting state is wrong.\", e);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 1,
      "-": 289,
      "YingxuH": 7
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.*;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "import seedu.address.model.person.*;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Sivalavida"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit some fields -\u003e edited */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updatePerson("
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException | PersonNotFoundException e) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Sivalavida": 5,
      "-": 255
    }
  }
]
