[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d HuatAh! v1.5"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://travis-ci.org/CS2103JAN2018-F12-B4/main[image:https://travis-ci.org/CS2103JAN2018-F12-B4/main.svg?branch\u003dmaster[Build Status]]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://ci.appveyor.com/project/jonleeyz/main/branch/master[image:https://ci.appveyor.com/api/projects/status/o5fr0a29pv70cubj/branch/master?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://coveralls.io/github/CS2103JAN2018-F12-B4/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103JAN2018-F12-B4/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* HuatAh! is a desktop loan shark manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* It is a Java application intended for 21st century loan shark bosses to streamline their syndicate operations."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *Download our latest release https://github.com/CS2103JAN2018-F12-B4/main/releases[here]!*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *Documentation:*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *The Team:*"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *Contributing*:"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** View our https://github.com/CS2103JAN2018-F12-B4/main[source code]!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Visit our https://github.com/CS2103JAN2018-F12-B4/main/issues[issue tracker]!"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Submit a https://github.com/CS2103JAN2018-F12-B4/main/pulls[pull request]!"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 17,
      "-": 22
    }
  },
  {
    "path": "build.gradle",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": " * Gradle Configuration File"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * For more details take a look at the Java Quickstart chapter in the Gradle"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " * user guide available at http://gradle.org/docs/2.2.1/userguide/tutorial_java_projects.html"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "plugins {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027java\u0027"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027jacoco\u0027"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027checkstyle\u0027"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.kt3k.coveralls\" version \"2.4.0\""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    id \"com.github.johnrengelman.shadow\" version \u00271.2.3\u0027"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027org.asciidoctor.convert\u0027 version \u00271.5.6\u0027"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    id \u0027application\u0027"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "// Specifies the entry point of the application"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "mainClassName \u003d \u0027seedu.address.MainApp\u0027"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "sourceCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "targetCompatibility \u003d JavaVersion.VERSION_1_8"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "repositories {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    mavenCentral()"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    maven { url \"https://oss.sonatype.org/content/repositories/snapshots/\" }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "checkstyle {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    toolVersion \u003d \u00278.1\u0027"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "jacocoTestReport {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        csv.enabled false"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        html.destination \"${buildDir}/jacocoHtml\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "dependencies {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    String testFxVersion \u003d \u00274.0.7-alpha\u0027"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.fxmisc.easybind\u0027, name: \u0027easybind\u0027, version: \u00271.0.3\u0027"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027org.controlsfx\u0027, name: \u0027controlsfx\u0027, version: \u00278.40.11\u0027"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.core\u0027, name: \u0027jackson-databind\u0027, version: \u00272.7.0\u0027"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.fasterxml.jackson.datatype\u0027, name: \u0027jackson-datatype-jsr310\u0027, version: \u00272.7.4\u0027"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    compile group: \u0027com.google.guava\u0027, name: \u0027guava\u0027, version: \u002719.0\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    compile group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.11\u0027"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027junit\u0027, name: \u0027junit\u0027, version: \u00274.12\u0027"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-core\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-junit\u0027, version: testFxVersion"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027testfx-legacy\u0027, version: testFxVersion, {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        exclude group: \u0027junit\u0027, module: \u0027junit\u0027"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    testCompile group: \u0027org.testfx\u0027, name: \u0027openjfx-monocle\u0027, version: \u00271.8.0_20\u0027"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "shadowJar {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    archiveName \u003d \"addressbook.jar\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    destinationDir \u003d file(\"${buildDir}/jar/\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "task wrapper(type: Wrapper) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    gradleVersion \u003d \u00272.12\u0027"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "task coverage(type: JacocoReport) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirectories \u003d files(allprojects.sourceSets.main.allSource.srcDirs)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    classDirectories \u003d  files(allprojects.sourceSets.main.output)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    executionData \u003d files(allprojects.jacocoTestReport.executionData)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    afterEvaluate {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        classDirectories \u003d files(classDirectories.files.collect {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            fileTree(dir: it, exclude: [\u0027**/*.jar\u0027])"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        })"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    reports {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        html.enabled \u003d true"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        xml.enabled \u003d true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "coveralls {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDirs \u003d allprojects.sourceSets.main.allSource.srcDirs.flatten()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    jacocoReportPath \u003d \"${buildDir}/reports/jacoco/coverage/coverage.xml\""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "tasks.coveralls {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    dependsOn coverage"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    onlyIf { System.env.\u0027CI\u0027 }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "task(guiTests)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "task(nonGuiTests)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "// Run `test` task if `guiTests` or `nonGuiTests` is specified"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "guiTests.dependsOn test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "nonGuiTests.dependsOn test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "task(allTests)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "// `allTests` implies both `guiTests` and `nonGuiTests`"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn guiTests"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "allTests.dependsOn nonGuiTests"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "test {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    systemProperty \u0027testfx.setup.timeout\u0027, \u002760000\u0027"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Prints the currently running test\u0027s name in the CI\u0027s build log,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * so that we can check if tests are being silently skipped or"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * stalling the build."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    if (System.env.\u0027CI\u0027) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        beforeTest { descriptor -\u003e"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.lifecycle(\u0027Running test: \u0027 + descriptor)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    jacoco {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        destinationFile \u003d new File(\"${buildDir}/jacoco/test.exec\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    doFirst {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runGuiTests \u003d gradle.taskGraph.hasTask(guiTests)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        boolean runNonGuiTests \u003d gradle.taskGraph.hasTask(nonGuiTests)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests \u0026\u0026 !runNonGuiTests) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            runGuiTests \u003d true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            runNonGuiTests \u003d true;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runNonGuiTests) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/**\u0027"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        if (runGuiTests) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027systemtests/**\u0027"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            test.include \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!runGuiTests) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            test.exclude \u0027seedu/address/ui/**\u0027"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "task headless \u003c\u003c {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    println \"Setting headless mode properties.\""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    test {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027java.awt.robot\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.robot\u0027, \u0027glass\u0027"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027testfx.headless\u0027, \u0027true\u0027"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.order\u0027, \u0027sw\u0027"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        systemProperty \u0027prism.text\u0027, \u0027t2k\u0027"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "// Makes sure that headless properties are set before running tests"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "test.mustRunAfter headless"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    backends \u0027html5\u0027"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    sourceDir \u0027docs\u0027"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    outputDir \"${buildDir}/docs\""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    attributes linkcss: true,"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "               stylesheet: \u0027gh-pages.css\u0027,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "               \u0027source-highlighter\u0027: \u0027coderay\u0027,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "               icons: \u0027font\u0027,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "               experimental: true,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "               sectlinks: true,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "               idprefix: \u0027\u0027,  // for compatibility with GitHub preview"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "               idseparator: \u0027-\u0027"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": " * Copies stylesheets into the directory containing generated HTML files as"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": " * Asciidoctor does not copy linked CSS files to the output directory when rendering."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": " * This is needed for linked stylesheets and embedded stylesheets which import other files."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "task copyStylesheets(type: Copy) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    from \"${asciidoctor.sourceDir}/stylesheets\""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${asciidoctor.outputDir}/html5/stylesheets\""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "asciidoctor.dependsOn copyStylesheets"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "task deployOfflineDocs(type: Copy) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    into(\u0027src/main/resources/docs\u0027)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    from (\"${asciidoctor.outputDir}/html5\") {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027stylesheets/*\u0027"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027images/*\u0027"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        include \u0027UserGuide.html\u0027"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "task copyDummySearchPage(type: Copy) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    from \u0027docs/DummySearchPage.html\u0027"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    into \"${buildDir}/docs/html5\""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "deployOfflineDocs.dependsOn asciidoctor"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "processResources.dependsOn deployOfflineDocs"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "defaultTasks \u0027clean\u0027, \u0027headless\u0027, \u0027allTests\u0027, \u0027coverage\u0027, \u0027asciidoctor\u0027"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 1,
      "-": 207
    }
  },
  {
    "path": "collated/functional/Der-Erlkonig.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# Der-Erlkonig"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\storage\\HtmlWriter.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Writes Person Data to a HTML file"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class HtmlWriter {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String OPENING_LINE \u003d \"\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003chead\u003e\\n\""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\u003cbody style\u003d\\\"background-color:#CEDBFB;\\\"\\n\u003e\""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\u003cfont face\u003d\\\"Segoe UI\\\" size\u003d\\\"5\\\" color\u003d\\\"black\\\"\u003e\""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\u003ctable\u003e\u003ctr\u003e\u003cth align\u003d\\\"left\\\" colspan\u003d\\\"2\\\"\u003e\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final String amountBorrowed;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final String interestRate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final String amountCurrentlyOwed;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final String oweStartDate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final String oweDueDate;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final String runnerAssigned;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final List\u003cPerson\u003e customerList;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final SimpleDateFormat simpledate \u003d new SimpleDateFormat(\"EEE, d MMM yyyy\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public HtmlWriter() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.name \u003d null;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.phone \u003d null;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.address \u003d null;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.email \u003d null;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.amountBorrowed \u003d null;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.interestRate \u003d null;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.amountCurrentlyOwed \u003d null;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweStartDate \u003d null;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweDueDate \u003d null;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.runnerAssigned \u003d null;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.customerList \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Constructs HtmlWriter with Customer\u0027s details"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param customer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public HtmlWriter(Customer customer) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.name \u003d customer.getName().fullName;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.phone \u003d customer.getPhone().value;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.address \u003d customer.getAddress().value;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.email \u003d customer.getEmail().value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.amountBorrowed \u003d String.format(\"%,.2f\", customer.getMoneyBorrowed().value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.interestRate \u003d customer.getStandardInterest().toString();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.amountCurrentlyOwed \u003d String.format(\"%,.2f\", customer.getMoneyCurrentlyOwed());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweStartDate \u003d simpledate.format(customer.getOweStartDate());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweDueDate \u003d simpledate.format(customer.getOweDueDate());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.runnerAssigned \u003d customer.getRunner().getName().fullName;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.customerList \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Constructs HtmlWriter with Runner\u0027s Details"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param runner"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public HtmlWriter(Runner runner) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.name \u003d runner.getName().fullName;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.phone \u003d runner.getPhone().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.email \u003d runner.getEmail().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.address \u003d runner.getAddress().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.amountBorrowed \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.interestRate \u003d \"\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.amountCurrentlyOwed \u003d \"\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweStartDate \u003d \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweDueDate \u003d \"\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.runnerAssigned \u003d \"\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.customerList \u003d runner.getCustomers();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Writes Customer\u0027s data to a HTML file and returns the file location"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String writeCustomer() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String filepath \u003d System.getProperty(\"user.dir\") + File.separator + \"PersonPage.html\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String absoluteFilepath;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            PrintWriter printWriter \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            printWriter.print(OPENING_LINE);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(name + \"\u003c/th\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd style\u003d\\\"width: 240px;\\\"\u003ephone: \u003c/td\u003e\u003ctd\u003e\" + phone + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eaddress: \u003c/td\u003e\u003ctd\u003e\" + address + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eemail: \u003c/td\u003e\u003ctd\u003e\" + email + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eamount borrowed: \u003c/td\u003e\u003ctd\u003e$\" + amountBorrowed + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003einterest (weekly): \u003c/td\u003e\u003ctd\u003e\" + interestRate + \"%\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eamount owed: \u003c/td\u003e\u003ctd\u003e$\" + amountCurrentlyOwed + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003estart date: \u003c/td\u003e\u003ctd\u003e\" + oweStartDate + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003edue date: \u003c/td\u003e\u003ctd\u003e\" + oweDueDate + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003erunner assigned: \u003c/td\u003e\u003ctd\u003e\" + runnerAssigned + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003c/table\u003e\u003c/body\u003e\u003c/html\u003e\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            printWriter.close();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        absoluteFilepath \u003d file.getAbsolutePath();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        absoluteFilepath \u003d absoluteFilepath.replaceAll(\"\\\"\", \"/\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return absoluteFilepath;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Writes Runner\u0027s data to HTML file and returns the file location"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String writeRunner() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String filepath \u003d System.getProperty(\"user.dir\") + File.separator + \"PersonPage.html\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String absoluteFilepath;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int customerListSize \u003d customerList.size();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            PrintWriter printWriter \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            printWriter.print(OPENING_LINE);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(name + \"\u003c/th\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd style\u003d\\\"width: 120px;\\\"\u003ephone: \u003c/td\u003e\u003ctd\u003e\" + phone + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eemail: \u003c/td\u003e\u003ctd\u003e\" + email + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eaddress: \u003c/td\u003e\u003ctd\u003e\" + address + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003c/table\u003e\u003cbr\u003e\u003cbr\u003e\u003ctable\u003e\u003ctr\u003e\u003cth align\u003d\\\"left\\\"\u003e\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"Customers Assigned [\" + customerListSize + \"]\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003c/th\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            for (Person eachCustomer: customerList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                printWriter.println(\"\u003ctr\u003e\u003ctd\u003e\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                printWriter.println(\"- \" + eachCustomer.getName().fullName);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                printWriter.println(\"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            printWriter.println(\"\u003c/table\u003e\u003c/body\u003e\u003c/html\u003e\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            printWriter.close();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        absoluteFilepath \u003d file.getAbsolutePath();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        absoluteFilepath \u003d absoluteFilepath.replaceAll(\"\\\"\", \"/\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return absoluteFilepath;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getAmountBorrowed() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return amountBorrowed;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getInterestRate() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return interestRate;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getAmountCurrentlyOwed() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return amountCurrentlyOwed;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getOweStartDate() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return oweStartDate;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getOweDueDate() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return oweDueDate;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getRunnerAssigned() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return runnerAssigned;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public List getCustomerList() {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return customerList;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\BrowserPanel.java"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Loads a HTML file with person details"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String personfilepath;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (person instanceof Customer) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            htmlWriter \u003d new HtmlWriter((Customer) person);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            personfilepath \u003d htmlWriter.writeCustomer();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else if (person instanceof Runner) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            htmlWriter \u003d new HtmlWriter((Runner) person);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            personfilepath \u003d htmlWriter.writeRunner();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            personfilepath \u003d \"\";"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        loadPage(\"file:///\" + personfilepath);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\resources\\view\\DarkTheme.css"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` css"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " th {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     background-color: ;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     border-bottom: 1px solid white;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     padding: 5px;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     text-align: left;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " td {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     height: 28px;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 107,
      "melvintzw": 118
    }
  },
  {
    "path": "collated/functional/jonleeyz-reused.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# jonleeyz-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonCard.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String[] TAG_COLOUR_STYLES \u003d"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonCard.java"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    // given a tagName, returns the String representation of a colour style"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private String getTagColourStyleFor(String tagName) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // hash code of tag name used to generate random colour"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // colour of tags changes between different runs of the application"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // might want to tweak this behaviour in the LoanShark Tycoon context"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return TAG_COLOUR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOUR_STYLES.length];"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Creates the Labels fot a given {@code Person}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * 1. Creates a new Label object for each tag, initialised with the respective tag."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * 2. Adds a style colour attribute to each Label based on its tag."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * 3. Adds each properly initialised Label to the containing FlowPane object."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColourStyleFor(tag.tagName));    // getStyleClass(): Node class method"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ResultDisplay.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            displayed.setValue(event.message);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (event.isSuccessful()) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                setStyleToIndicateCommandSuccess();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ResultDisplay.java"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void setStyleToIndicateCommandSuccess() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\resources\\view\\DarkTheme.css"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` css"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .red {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: red;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .yellow {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: yellow;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .blue {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: blue;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .orange {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: orange;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .brown {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: brown;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .green {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: green;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .pink {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: pink;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .black {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: black;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .grey {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: grey;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 111,
      "melvintzw": 1
    }
  },
  {
    "path": "collated/functional/jonleeyz.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# jonleeyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\ExecuteCommandRequestEvent.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Indicates that a new request to execute a Command is available."
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class ExecuteCommandRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final String commandWord;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public ExecuteCommandRequestEvent(ImmediatelyExecutableCommand command) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandWord \u003d command.getCommandWord();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this.getClass().getSimpleName() + \": \" + commandWord;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\HomeRequestEvent.java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Indicates a request to execute the home command"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class HomeRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_HOME \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"Home view displayed. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Utilise one of the keyboard shortcuts below to get started!\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Alternatively, press \\\"F12\\\" or type \\\"help\\\" to view the User Guide!\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\PopulatePrefixesRequestEvent.java"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Indicates that a new request to populate the CommandBox is available."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class PopulatePrefixesRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final String commandUsageMessage;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final String commandTemplate;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final int caretIndex;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PopulatePrefixesRequestEvent(PopulatableCommand command) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandUsageMessage \u003d command.getUsageMessage();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTemplate \u003d command.getTemplate();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        caretIndex \u003d command.getCaretIndex();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandWord \u003d command.getCommandWord();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this.getClass().getSimpleName() + \": \" + commandWord;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddCommand.java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return (COMMAND_WORD + \" \" + PREFIX_TYPE + \" \").length();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ClearCommand.java"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\DeleteCommand.java"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getTemplate().length();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\EditCommand.java"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return (COMMAND_WORD + \" \").length();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\FindCommand.java"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getTemplate().length();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\HistoryCommand.java"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ImmediatelyExecutableCommand.java"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * This interface is utilised in the {@code ExecuteCommandRequestEvent} class, where it is used"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * to provide a handle to {@code Commands} that immediately execute on press of their respective"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * keyboard shortcuts."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public interface ImmediatelyExecutableCommand {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the command word of the Command */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    String getCommandWord();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ListCommand.java"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\LocateCommand.java"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD + \" -\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getTemplate().length();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\PopulatableCommand.java"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * This interface is utilised in the {@code ExecuteCommandRequestEvent} class, where it is used"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * to provide a handle to {@code Commands} that immediately execute on press of their respective"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * keyboard shortcuts."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public interface PopulatableCommand {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the command word of the Command */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    String getCommandWord();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the complete template (command word + all prefixes) of the Command */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    String getTemplate();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the index where the cursor should be after population of the Command */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    int getCaretIndex();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the usage message of the Command */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    String getUsageMessage();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\RedoCommand.java"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\SelectCommand.java"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getTemplate().length();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\UndoCommand.java"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\util\\SampleDataUtil.java"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Xiao Ming\"), new Phone(\"88888888\"), new Email(\"xiao@ming.com\"),"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"The Fullerton\"),"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"richxiaoming\", \"mingdynasty\", \"HighSES\"), new MoneyBorrowed(314159265),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2017, 5, 7), createDate(2018, 5, 7),"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(9.71), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Korean Defender\"), new Phone(\"99994321\"),"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Email(\"kalbitanglover@tourism.korea.com\"), new Address(\"The Hwang\u0027s\"),"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"defenderOfTheFree\", \"defenderOfKalbiTang\", \"yummeh\", \"UTownHeritage\"),"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new MoneyBorrowed(413255),"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2010, 10, 3), createDate(2019, 1, 1),"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(5.4), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Bob the Builder\"), new Phone(\"92334532\"), new Email(\"bob@bobthebuilder.com\"),"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"IKEA Alexandra\"),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"FatherOfHDB\", \"InBobWeTrust\"), new MoneyBorrowed(0.24),"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(1965, 8, 9), createDate(2015, 8, 9),"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(0.0005), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"Ah Seng\"), new Phone(\"90011009\"), new Email(\"quick_and_easy_money@hotmail.com\"),"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Marina Bay Sands\"),"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"EmployeeOfTheMonth\", \"InvestorFirstGrade\", \"HighSES\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"Mas Selamat Kastari\"), new Phone(\"999\"), new Email(\"kastari@johorbahru.my\"),"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Internal Security Department\"),"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"BeatTheSystem\", \"BeatByTheSystem\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Aunty Kim\"), new Phone(\"99994321\"), new Email(\"hotkorean1905@hotmail.com\"),"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"I\u0027m Kim Korean BBQ\"),"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"RichAunty\", \"KBBQBossLady\", \"Aunty\"),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new MoneyBorrowed(413255),"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2010, 10, 3), createDate(2019, 1, 1),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(5.4), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"Leon Tay\"), new Phone(\"93498349\"), new Email(\"laoda@leontay349.com\"),"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Bao Mei Boneless Chicken Rice\"),"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"LaoDa\", \"349\", \"Joker\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"Ping An\"), new Phone(\"93698369\"), new Email(\"pingan@houseofahlong.com\"),"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Ang Mo Kio Police Divison HQ\"),"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"UndercoverRunner\", \"TripleAgent\", \"Joker\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Da Ming\"), new Phone(\"83699369\"), new Email(\"da@ming.com\"),"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Fountain of Wealth\"),"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"RicherDaMing\", \"BigMing\", \"MingSuperior\", \"mingdynasty\"), new MoneyBorrowed(98789060),"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2017, 3, 1), createDate(2020, 12, 5),"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(3.14), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\CommandBox.java"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Removes the current {@code field} or {@code prefix}."
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void clearCurrentFieldOrPrefix() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int currentCaretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int lastPrefixPosition \u003d getPreviousPrefixPosition(currentCaretPosition);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // clearing the current field or prefix"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String stringLiteralUpToPrefix \u003d commandTextField.getText().substring(0, lastPrefixPosition);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String stringLiteralAfterCaret \u003d commandTextField.getText().substring(currentCaretPosition);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String newCommandBoxText \u003d stringLiteralUpToPrefix + stringLiteralAfterCaret;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandTextField.setText(newCommandBoxText);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandTextField.positionCaret(lastPrefixPosition);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Positions the caret after the last {@code prefix}."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void moveToPreviousPrefix() {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int currentCaretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int newCaretPosition \u003d getPreviousPrefixPosition(currentCaretPosition);"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandTextField.positionCaret(newCaretPosition);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Positions the caret after the next {@code prefix}."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void moveToNextPrefix() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int currentCaretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int newCaretPosition \u003d getNextPrefixPosition(currentCaretPosition);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandTextField.positionCaret(newCaretPosition);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private int getPreviousPrefixPosition(int currentCaretPosition) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // find last prefix position"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int previousPrefixPosition \u003d commandTextField.getText().lastIndexOf(\":\", currentCaretPosition);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // if last prefix is too close to caret, find the second last prefix position"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (currentCaretPosition - previousPrefixPosition \u003c 3) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            previousPrefixPosition \u003d commandTextField.getText().lastIndexOf(\":\", previousPrefixPosition - 1);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // set new caret position to be in front of chosen prefix. If prefix not found, then set at index 0."
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int newCaretPosition \u003d previousPrefixPosition !\u003d -1 ? previousPrefixPosition + 1 : 0;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // check for space in front of last prefix. If present, move forward one more index."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (commandTextField.getText().substring(newCaretPosition, newCaretPosition + 1).equals(\" \")) {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            newCaretPosition +\u003d 1;"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return newCaretPosition;"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private int getNextPrefixPosition(int currentCaretPosition) {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // find next prefix position"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int nextPrefixPosition \u003d commandTextField.getText().indexOf(\":\", currentCaretPosition);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int newCaretPosition;"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // set new caret position to be in front of chosen prefix. If prefix not found, then set at last index."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (nextPrefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            newCaretPosition \u003d nextPrefixPosition + 1;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            // check for space in front of last prefix. If present, move forward one more index."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (commandTextField.getText().substring(newCaretPosition, newCaretPosition + 1).equals(\" \")) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                newCaretPosition +\u003d 1;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            newCaretPosition \u003d commandTextField.getText().length();"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return newCaretPosition;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where a valid keyboard shortcut is pressed"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * to populate the CommandBox with command prefixes,"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code PopulatePrefixesRequestEvent}."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handlePopulatePrefixesRequestEvent(PopulatePrefixesRequestEvent event) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        replaceText(event.commandTemplate, event.caretIndex);"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where a valid keyboard shortcut is pressed"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * to execute a command immediately"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * {@code ExecuteCommandRequestEvent}."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleExecuteCommandRequestEvent(ExecuteCommandRequestEvent event) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        replaceText(event.commandWord);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        handleCommandInputChanged();"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Handles the event where the Esc key is pressed or \"home\" is input to the CommandBox."
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * {@code HomeRequestEvent}."
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        replaceText(\"\");"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\MainWindow.java"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private MenuItem homeMenuItem;"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem exitMenuItem;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem undoMenuItem;"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem redoMenuItem;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem clearMenuItem;"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem historyMenuItem;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem listMenuItem;"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem findMenuItem;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem addMenuItem;"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem deleteMenuItem;"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem editMenuItem;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem locateMenuItem;"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem selectMenuItem;"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\MainWindow.java"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        setAccelerator(homeMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(exitMenuItem, KeyCombination.valueOf(\"Alt + Q\"));"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(undoMenuItem, KeyCombination.valueOf(\"Ctrl + Z\"));"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(redoMenuItem, KeyCombination.valueOf(\"Ctrl + Y\"));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(clearMenuItem, KeyCombination.valueOf(\"Ctrl + Shift + C\"));"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        setAccelerator(historyMenuItem, KeyCombination.valueOf(\"F3\"));"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(listMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(findMenuItem, KeyCombination.valueOf(\"Ctrl + F\"));"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        setAccelerator(addMenuItem, KeyCombination.valueOf(\"Ctrl + I\"));"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(deleteMenuItem, KeyCombination.valueOf(\"Ctrl + D\"));"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(editMenuItem, KeyCombination.valueOf(\"Ctrl + E\"));"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(locateMenuItem, KeyCombination.valueOf(\"Ctrl + L\"));"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(selectMenuItem, KeyCombination.valueOf(\"Ctrl + S\"));"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(assignMenuItem, KeyCombination.valueOf(\"Ctrl + Shift + A\"));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F12\"));"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\MainWindow.java"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Executes the {@code home} operation"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void handleHome() {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        raise(new HomeRequestEvent());"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code undo} operation"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleUndo() {"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new UndoCommand()));"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code redo} operation"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleRedo() {"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new RedoCommand()));"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code clear} operation"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleClear() {"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new ClearCommand()));"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code history} operation"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHistory() {"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new HistoryCommand()));"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code list} operation"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleList() {"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new ListCommand()));"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code FindCommand} prefixes."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleFind() {"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new FindCommand()));"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code AddCommand} prefixes."
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleAdd() {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new AddCommand()));"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code DeleteCommand} prefixes."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleDelete() {"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new DeleteCommand()));"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code EditCommand} prefixes."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleEdit() {"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new EditCommand()));"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code LocateCommand} prefixes."
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleLocate() {"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new LocateCommand()));"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code SelectCommand} prefixes."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleSelect() {"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new SelectCommand()));"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonListPanel.java"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Handles the event where the Esc key is pressed or \"home\" is input to the CommandBox."
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * {@code HomeRequestEvent}."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //@TODO to be implemented"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ResultDisplay.java"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where a valid keyboard shortcut is pressed"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * to populate the CommandBox with command prefixes,"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code PopulatePrefixesRequestEvent}."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handlePopulatePrefixesRequestEvent(PopulatePrefixesRequestEvent event) {"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setStyleToIndicateCommandSuccess();"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            displayed.setValue(event.commandUsageMessage);"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Handles the event where the Esc key is pressed or \"home\" is input to the CommandBox."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * {@code HomeRequestEvent}."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        setStyleToIndicateCommandSuccess();"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            displayed.setValue(event.MESSAGE_HOME);"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        });"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\resources\\view\\MainWindow.fxml"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"undoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUndo\" text\u003d\"Undo\" /\u003e"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"redoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleRedo\" text\u003d\"Redo\" /\u003e"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"clearMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleClear\" text\u003d\"Clear the Database\" /\u003e"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"historyMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHistory\" text\u003d\"History\" /\u003e"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"listMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleList\" text\u003d\"List all\" /\u003e"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"findMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleFind\" text\u003d\"Find...\" /\u003e"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Actions\"\u003e"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"addMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleAdd\" text\u003d\"Add a Person...\" /\u003e"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"deleteMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleDelete\" text\u003d\"Delete a Person...\" /\u003e"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"editMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleEdit\" text\u003d\"Edit a Person...\" /\u003e"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"locateMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLocate\" text\u003d\"Locate a Person...\" /\u003e"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"selectMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleSelect\" text\u003d\"Select a Person...\" /\u003e"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"assignMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleAssign\" text\u003d\"Assign Customers to a Runner...\" /\u003e"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 442,
      "melvintzw": 197
    }
  },
  {
    "path": "collated/functional/melvintzw-reused.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# melvintzw-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\EditCommand.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //Customer fields"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Date oweStartDate;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Date oweDueDate;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private StandardInterest standardInterest;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private LateInterest lateInterest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Person runner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //Runner fields"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private List\u003cPerson\u003e customers;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setMoneyBorrowed(toCopy.moneyBorrowed);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setOweStartDate(toCopy.oweStartDate);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setOweDueDate(toCopy.oweDueDate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setStandardInterest(toCopy.standardInterest);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setLateInterest(toCopy.lateInterest);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setRunner(toCopy.runner);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setCustomers(toCopy.customers);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags,"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    this.moneyBorrowed, this.oweStartDate, this.oweDueDate, this.standardInterest, this.lateInterest,"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    this.runner);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setMoneyBorrowed(MoneyBorrowed moneyBorrowed) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.moneyBorrowed \u003d moneyBorrowed;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cMoneyBorrowed\u003e getMoneyBorrowed() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(moneyBorrowed);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setOweStartDate(Date oweStartDate) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.oweStartDate \u003d oweStartDate;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cDate\u003e getOweStartDate() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(oweStartDate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setOweDueDate(Date oweDueDate) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.oweDueDate \u003d oweDueDate;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cDate\u003e getOweDueDate() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(oweDueDate);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setStandardInterest(StandardInterest standardInterest) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.standardInterest \u003d standardInterest;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cStandardInterest\u003e getStandardInterest() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(standardInterest);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setLateInterest(LateInterest lateInterest) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.lateInterest \u003d lateInterest;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cLateInterest\u003e getLateInterest() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(lateInterest);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setRunner(Person runner) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.runner \u003d runner;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cPerson\u003e getRunner() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(runner);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setCustomers(List\u003cPerson\u003e customers) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.customers \u003d customers;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cList\u003cPerson\u003e\u003e getCustomers() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(customers);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            //TODO: add .equals for Runner and Customer"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 171,
      "melvintzw": 17
    }
  },
  {
    "path": "collated/functional/melvintzw.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# melvintzw"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\FieldsChangedEvent.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class FieldsChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public FieldsChangedEvent(Person person) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AssignCommand.java"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Adds customers to a runner\u0027s customer list , list must contain unique elements"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class AssignCommand extends UndoableCommand implements PopulatableCommand {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            COMMAND_WORD + \" | assigns customers to a runner associated with the index number used in the last \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"person listing.\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Parameters:\\t\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"RUNNER-INDEX (positive integer) \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + PREFIX_CUSTOMERS + \" CUSTOMER-INDEX (positive integer) \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"[ CUSTOMER-INDEX] ...\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Example:\\t\\t\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + COMMAND_WORD + \" 1 \" + PREFIX_CUSTOMERS + \" 2\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Example:\\t\\t\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + COMMAND_WORD + \" 1 \" + PREFIX_CUSTOMERS + \" 2 5 8\";"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_ASSIGN_PERSON_SUCCESS \u003d \"Successfully assigned!\\nUpdated Runner Info:\\n%1$s\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"The target person cannot be missing\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_INVALID_CUSTOMER_INDEX \u003d \"invalid customer index\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_NOT_A_RUNNER \u003d \"Person at index %d is not a Runner\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    // message"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final Index runnerIndex;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final Index[] customerIndex;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cPerson\u003e oldCustomers \u003d new ArrayList\u003c\u003e(); //customers already in runner\u0027s list of customers"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cPerson\u003e newCustomers \u003d new ArrayList\u003c\u003e(); //customers to be added to runner\u0027s list of customers"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cPerson\u003e updatedCustomers \u003d new ArrayList\u003c\u003e(); //new customers that have been been updated with runner"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cEditPersonDescriptor\u003e listOfEditedCustDesc \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private EditPersonDescriptor editRunnerDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param runnerIndex   of the Runner in the filtered person list to edit"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param customerIndex ... of the customers to add to Runner\u0027s customer list"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public AssignCommand(Index runnerIndex, Index... customerIndex) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(runnerIndex);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(customerIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.runnerIndex \u003d runnerIndex;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.customerIndex \u003d customerIndex;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public AssignCommand() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        runnerIndex \u003d null;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        customerIndex \u003d null;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            deletePrevRunnerCustomer();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            for (Person c : newCustomers) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                model.updatePerson(c, updatedCustomers.get(i));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EventsCenter.getInstance().post(new JumpToListRequestEvent(runnerIndex));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EventsCenter.getInstance().post(new FieldsChangedEvent(editedPerson));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new AssertionError(MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (runnerIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        personToEdit \u003d lastShownList.get(runnerIndex.getZeroBased());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!(personToEdit instanceof Runner)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_A_RUNNER, runnerIndex.getOneBased()));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //NOTE: it is important to call these methods in this order so that the appropriate resources are generated"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        generateNewCustomerList();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        generateCustDescWithAssignedRunner();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        generateUpdatedCustomerList();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        makeEditRunnerDescriptorFromUpdatedCustList(); //modifies editRunnerDescriptor"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editRunnerDescriptor);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Since each Customer should only have 1 Runner, if the customer had a runner previously assigned, then that"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * previous runner should have its association with this customer removed. The customer will now only be associated"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * with the newly assigned runner."
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void deletePrevRunnerCustomer() throws CommandException, PersonNotFoundException,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            DuplicatePersonException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e pl \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //List\u003cPerson\u003e allCustomers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //allCustomers.addAll(oldCustomers);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //allCustomers.addAll(newCustomers);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Person c : newCustomers) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person r \u003d ((Customer) c).getRunner(); //not getting a runner from pl but an incomplete copy"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            int indexOfActualPerson \u003d pl.indexOf(r);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (indexOfActualPerson \u003e\u003d 0) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                //the conditional check is necessary so that I\u0027m only modifying valid existing runners"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Person actualRunner \u003d pl.get(indexOfActualPerson); //getting the actual complete runner from pl"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                //generate editPersonDescriptor with c removed from runner\u0027s customer list"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                EditPersonDescriptor runnerDescWCustRemoved \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setName(actualRunner.getName());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setPhone(actualRunner.getPhone());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setEmail(actualRunner.getEmail());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setAddress(actualRunner.getAddress());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setTags(actualRunner.getTags());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                List\u003cPerson\u003e newList \u003d ((Runner) actualRunner).getCustomers();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                newList.remove(c);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setCustomers(newList);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Person editedPrevRunner \u003d createEditedPerson((Runner) actualRunner, runnerDescWCustRemoved);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                model.updatePerson(actualRunner, editedPrevRunner);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Edit each new customer with the runner to be assigned."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Requires an accompanying list of customer descriptors describing these new customers and reflecting the assigned"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * runner."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void generateUpdatedCustomerList() throws CommandException {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        for (Person c : newCustomers) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            updatedCustomers.add(createEditedPerson(c, listOfEditedCustDesc.get(i)));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Creates and returns an {@code EditPersonDescriptor} with new customers from customerIndex..."
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * the created EditPersonDescriptor is to be used to create editedPerson."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void makeEditRunnerDescriptorFromUpdatedCustList() throws CommandException {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Person runnerToBeEdited \u003d lastShownList.get(runnerIndex.getZeroBased());"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assert (runnerToBeEdited instanceof Runner);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        editRunnerDescriptor.setName(runnerToBeEdited.getName());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        editRunnerDescriptor.setPhone(runnerToBeEdited.getPhone());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        editRunnerDescriptor.setEmail(runnerToBeEdited.getEmail());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        editRunnerDescriptor.setAddress(runnerToBeEdited.getAddress());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        editRunnerDescriptor.setTags(runnerToBeEdited.getTags());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cPerson\u003e allCustomers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        allCustomers.addAll(oldCustomers);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        allCustomers.addAll(updatedCustomers);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        editRunnerDescriptor.setCustomers(allCustomers);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * generates a list of new and unique customers to be assigned to the runner."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void generateNewCustomerList() throws CommandException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Person runnerToBeEdited \u003d lastShownList.get(runnerIndex.getZeroBased());"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        oldCustomers.addAll(((Runner) runnerToBeEdited).getCustomers());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        for (Index index : customerIndex) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Person p \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (!(p instanceof Customer)) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_CUSTOMER_INDEX);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (oldCustomers.indexOf(p) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(String.format(\"customer at %d already assigned to runner\","
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        index.getOneBased()));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (newCustomers.indexOf(p) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                throw new CommandException(\"cannot assign same customer twice\");"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            newCustomers.add((Customer) p);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Generates a list of EditPersonDescriptors for the purpose of updating each customer with the assigned runner"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * This helper method is meant to be called in executeUndoableCommand()."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * references to each other."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void generateCustDescWithAssignedRunner() {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Person runnerToBeEdited \u003d lastShownList.get(runnerIndex.getZeroBased());"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assert (runnerToBeEdited instanceof Runner);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        for (Person c : newCustomers) {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            EditPersonDescriptor custDesc \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setRunner((Runner) runnerToBeEdited);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setName(c.getName());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setPhone(c.getPhone());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setEmail(c.getEmail());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setAddress(c.getAddress());"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setTags(c.getTags());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setMoneyBorrowed(((Customer) c).getMoneyBorrowed());"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setOweStartDate(((Customer) c).getOweStartDate());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setOweDueDate(((Customer) c).getOweDueDate());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setStandardInterest(((Customer) c).getStandardInterest());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            custDesc.setLateInterest(((Customer) c).getLateInterest());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            listOfEditedCustDesc.add(custDesc);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * edited with {@code editRunnerDescriptor}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * This method is borrowed from EditCommand"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) throws"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            CommandException {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (personToEdit instanceof Customer) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            MoneyBorrowed moneyBorrowed \u003d editPersonDescriptor.getMoneyBorrowed().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getMoneyBorrowed());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Date oweStartDate \u003d editPersonDescriptor.getOweStartDate().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getOweStartDate());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Date oweDueDate \u003d editPersonDescriptor.getOweDueDate().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getOweDueDate());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            StandardInterest standardInterest \u003d editPersonDescriptor.getStandardInterest()"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .orElse(((Customer) personToEdit).getStandardInterest());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            LateInterest lateInterest \u003d editPersonDescriptor.getLateInterest().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getLateInterest());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person runner \u003d editPersonDescriptor.getRunner().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getRunner());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new Customer(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, moneyBorrowed,"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    oweStartDate, oweDueDate, standardInterest, lateInterest, runner);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else if (personToEdit instanceof Runner) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            List\u003cPerson\u003e customers \u003d editPersonDescriptor.getCustomers().orElse(((Runner) personToEdit)"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getCustomers());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new Runner(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, customers);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new CommandException(\"Error: Invalid Person\");"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!(o instanceof AssignCommand)) {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        AssignCommand that \u003d (AssignCommand) o;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return Objects.equals(runnerIndex, that.runnerIndex)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Arrays.equals(customerIndex, that.customerIndex)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(oldCustomers, that.oldCustomers)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(newCustomers, that.newCustomers)"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(updatedCustomers, that.updatedCustomers)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(listOfEditedCustDesc, that.listOfEditedCustDesc)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, that.personToEdit)"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(editedPerson, that.editedPerson)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(editRunnerDescriptor, that.editRunnerDescriptor);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int result \u003d Objects.hash(runnerIndex, oldCustomers, newCustomers, updatedCustomers, listOfEditedCustDesc,"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                personToEdit, editedPerson, editRunnerDescriptor);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        result \u003d 31 * result + Arrays.hashCode(customerIndex);"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD + \"  \" + PREFIX_CUSTOMERS + \" \";"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return (COMMAND_WORD + \" \").length();"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //Customer fields"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Date oweStartDate;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private Date oweDueDate;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private StandardInterest standardInterest;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private LateInterest lateInterest;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Person runner;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //Runner fields"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        private List\u003cPerson\u003e customers;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setMoneyBorrowed(toCopy.moneyBorrowed);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setOweStartDate(toCopy.oweStartDate);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setOweDueDate(toCopy.oweDueDate);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setStandardInterest(toCopy.standardInterest);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setLateInterest(toCopy.lateInterest);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setRunner(toCopy.runner);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            setCustomers(toCopy.customers);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags,"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    this.moneyBorrowed, this.oweStartDate, this.oweDueDate, this.standardInterest, this.lateInterest,"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    this.runner);"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setMoneyBorrowed(MoneyBorrowed moneyBorrowed) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.moneyBorrowed \u003d moneyBorrowed;"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cMoneyBorrowed\u003e getMoneyBorrowed() {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(moneyBorrowed);"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setOweStartDate(Date oweStartDate) {"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.oweStartDate \u003d oweStartDate;"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cDate\u003e getOweStartDate() {"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(oweStartDate);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setOweDueDate(Date oweDueDate) {"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.oweDueDate \u003d oweDueDate;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cDate\u003e getOweDueDate() {"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(oweDueDate);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setStandardInterest(StandardInterest standardInterest) {"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.standardInterest \u003d standardInterest;"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cStandardInterest\u003e getStandardInterest() {"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(standardInterest);"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setLateInterest(LateInterest lateInterest) {"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.lateInterest \u003d lateInterest;"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cLateInterest\u003e getLateInterest() {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(lateInterest);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setRunner(Person runner) {"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.runner \u003d runner;"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cPerson\u003e getRunner() {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(runner);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setCustomers(List\u003cPerson\u003e customers) {"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.customers \u003d customers;"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cList\u003cPerson\u003e\u003e getCustomers() {"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return Optional.ofNullable(customers);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getMoneyBorrowed().equals(e.getMoneyBorrowed())"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getOweDueDate().equals(e.getOweDueDate())"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getOweStartDate().equals(e.getOweStartDate())"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getStandardInterest().equals(e.getStandardInterest())"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getLateInterest().equals(e.getLateInterest())"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getRunner().equals(e.getRunner())"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    \u0026\u0026 getCustomers().equals(e.getCustomers());"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\EditCommand.java"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (personToEdit instanceof Customer) {"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            MoneyBorrowed moneyBorrowed \u003d editPersonDescriptor.getMoneyBorrowed().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getMoneyBorrowed());"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Date oweStartDate \u003d editPersonDescriptor.getOweStartDate().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getOweStartDate());"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Date oweDueDate \u003d editPersonDescriptor.getOweDueDate().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getOweDueDate());"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            StandardInterest standardInterest \u003d editPersonDescriptor.getStandardInterest()"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .orElse(((Customer) personToEdit).getStandardInterest());"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            LateInterest lateInterest \u003d editPersonDescriptor.getLateInterest().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getLateInterest());"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person runner \u003d editPersonDescriptor.getRunner().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getRunner());"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (oweDueDate.compareTo(oweStartDate) \u003c 0) {"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(\"OWE_DUE_DATE cannot be before OWE_START_DATE\");"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new Customer(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, moneyBorrowed,"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    oweStartDate, oweDueDate, standardInterest, lateInterest, runner);"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else if (personToEdit instanceof Runner) {"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (editPersonDescriptor.getStandardInterest().isPresent()"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    || editPersonDescriptor.getMoneyBorrowed().isPresent()"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    || editPersonDescriptor.getOweStartDate().isPresent()"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    || editPersonDescriptor.getOweDueDate().isPresent()) {"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(\"Cannot edit Runner using Customer-only fields\");"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            List\u003cPerson\u003e customers \u003d editPersonDescriptor.getCustomers().orElse(((Runner) personToEdit)"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .getCustomers());"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new Runner(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, customers);"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new CommandException(\"Error: Invalid Person\");"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\FindCommand.java"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class FindCommand extends Command implements PopulatableCommand {"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String COMMAND_TEMPLATE \u003d COMMAND_WORD + \" -\";"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            COMMAND_WORD + \" | Finds all persons whose fields contain any of the specified keywords (case-insensitive) \""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"and displays them as a list with index numbers.\""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Parameters:\\t\""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"[SPECIFIER] KEYWORD [KEYWORD] ...\""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Specifiers:\\t\\t\""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"-all, -n, -p, -e, -a, -t : ALL, NAME, PHONE, EMAIL, ADDRESS and TAGS respectively.\""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Example:\\t\\t\" + COMMAND_WORD + \" -n alice bob charlie\";"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public FindCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        predicate \u003d null;"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate));"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddCommandParser.java"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_MONEY_BORROWED, PREFIX_OWESTARTDATE, PREFIX_OWEDUEDATE,"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        PREFIX_INTEREST);"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //TODO: add test case"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddCommandParser.java"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TYPE)"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || !argMultimap.getValue(PREFIX_TYPE).get().matches(\"[cCrR]\")) {"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).orElse(new Phone());"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).orElse(new Email());"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).orElse(new Address());"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TYPE).get().matches(\"[cC]\")) {"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                Date oweStartDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_OWESTARTDATE)).orElse(new Date(0));"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                Date oweDueDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_OWEDUEDATE)).orElse(new Date(0));"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                if (oweDueDate.compareTo(oweStartDate) \u003c 0) {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    throw new ParseException(\"OWE_DUE_DATE cannot be before OWE_START_DATE\");"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                MoneyBorrowed moneyBorrowed \u003d ParserUtil.parseMoneyBorrowed(argMultimap.getValue(PREFIX_MONEY_BORROWED))"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        .orElse(new MoneyBorrowed());"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                StandardInterest standardInterest \u003d ParserUtil.parseStandardInterest(argMultimap"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        .getValue(PREFIX_INTEREST)).orElse(new StandardInterest());"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                Customer customer \u003d new Customer(name, phone, email, address, tagList, moneyBorrowed,"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        oweStartDate, oweDueDate, standardInterest, new LateInterest(), new Runner());"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                return new AddCommand(customer);"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            } else if (argMultimap.getValue(PREFIX_TYPE).get().matches(\"[rR]\")) {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                if (argMultimap.getValue(PREFIX_MONEY_BORROWED).isPresent()"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        || argMultimap.getValue(PREFIX_OWEDUEDATE).isPresent()"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        || argMultimap.getValue(PREFIX_OWESTARTDATE).isPresent()"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        || argMultimap.getValue(PREFIX_INTEREST).isPresent()) {"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            AddCommand.MESSAGE_INVALID_PREFIX));"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                Runner runner \u003d new Runner(name, phone, email, address, tagList, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                return new AddCommand(runner);"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AssignCommandParser.java"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMERS);"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Index runnerIndex; //parameter for AssignCommand"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Index[] customerIndexArray; //parameter for AssignCommand"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            runnerIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            String customers \u003d argMultimap.getValue(PREFIX_CUSTOMERS).get();"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            List\u003cIndex\u003e customerIndexList \u003d parseCustIndex(customers);"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            customerIndexArray \u003d customerIndexList.toArray(new Index[customerIndexList.size()]);"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return new AssignCommand(runnerIndex, customerIndexArray);"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Parses a string of customer numbers (representing indices) into a list of Index objects"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param customers a string of numbers presenting indices"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static List\u003cIndex\u003e parseCustIndex(String customers) throws IllegalValueException, NumberFormatException {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String[] splitIndices \u003d customers.split(\"\\\\s\");"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        for (String s : splitIndices) {"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            int index \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            indexList.add(fromOneBased(index));"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (indexList.size() \u003c 1) {"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new IllegalValueException(\"no customer index has been specified\");"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return indexList;"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditCommandParser.java"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        PREFIX_MONEY_BORROWED, PREFIX_INTEREST, PREFIX_OWEDUEDATE, PREFIX_OWESTARTDATE);"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditCommandParser.java"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (argMultimap.getValue(PREFIX_OWESTARTDATE).isPresent()) {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                Date oweStartDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_OWESTARTDATE).get());"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                editPersonDescriptor.setOweStartDate(oweStartDate);"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (argMultimap.getValue(PREFIX_OWEDUEDATE).isPresent()) {"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                Date oweDueDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_OWEDUEDATE).get());"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                editPersonDescriptor.setOweDueDate(oweDueDate);"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_MONEY_BORROWED).isPresent()) {"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                MoneyBorrowed moneyBorrowed \u003d ParserUtil.parseMoneyBorrowed(argMultimap.getValue(PREFIX_MONEY_BORROWED)"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        .get());"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                editPersonDescriptor.setMoneyBorrowed(moneyBorrowed);"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (argMultimap.getValue(PREFIX_INTEREST).isPresent()) {"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                StandardInterest standardInterest \u003d ParserUtil.parseStandardInterest(argMultimap.getValue"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        (PREFIX_INTEREST).get());"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                editPersonDescriptor.setStandardInterest(standardInterest);"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\FindCommandParser.java"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String[] arguments \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String[] keywords;"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //check arguments[0] for specifier"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (arguments[0].matches(\"\\\\p{Alnum}+.*+\")) {"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(arguments)));"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        switch (arguments[0]) {"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-all\":"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-n\":"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-p\":"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-e\":"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-a\":"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-t\":"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new FindCommand(new TagsContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ParserUtil.java"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @throws IllegalValueException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Date parseDate(String date) {"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        com.joestelmach.natty.Parser dateParser \u003d new Parser();"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cDateGroup\u003e dateGroups \u003d dateParser.parse(trimmedDate);"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return dateGroups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDate\u003e} if {@code date} is present."
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) {"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //TODO: add methods to parse Customer fields and Runner fields"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code string double} into an {@code MoneyBorrowed}."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws IllegalValueException if the given {@code MoneyBorrowed} is invalid."
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static MoneyBorrowed parseMoneyBorrowed(String moneyBorrowed) throws IllegalValueException {"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(moneyBorrowed);"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new MoneyBorrowed(Double.parseDouble(moneyBorrowed));"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(MoneyBorrowed.MESSAGE_MONEY_BORROWED_DOUBLE_ONLY);"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(MoneyBorrowed.MESSAGE_MONEY_BORROWED_NO_NEGATIVE);"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e moneyBorrowed} into an {@code Optional\u003cMoneyBorrowed\u003e} if {@code moneyBorrowed}"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * is present."
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static Optional\u003cMoneyBorrowed\u003e parseMoneyBorrowed(Optional\u003cString\u003e moneyBorrowed) throws"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            IllegalValueException {"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(moneyBorrowed);"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return moneyBorrowed.isPresent() ? Optional.of(parseMoneyBorrowed(moneyBorrowed.get())) : Optional.empty();"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Parses a {@code string double} into an {@code StandardInterest}."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws IllegalValueException if the given {@code StandardInterest} is invalid."
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static StandardInterest parseStandardInterest(String value) throws IllegalValueException {"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d value.trim();"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new StandardInterest(Double.parseDouble(value));"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(StandardInterest.MESSAGE_STANDARD_INTEREST_DOUBLE_ONLY);"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(StandardInterest.MESSAGE_STANDARD_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e standardInterest} into an {@code Optional\u003cStandardInterest\u003e} if {@code"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * value} is present."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static Optional\u003cStandardInterest\u003e parseStandardInterest(Optional\u003cString\u003e value) throws"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            IllegalValueException {"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return value.isPresent() ? Optional.of(parseStandardInterest(value.get())) : Optional.empty();"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code string double} into an {@code LateInterest}."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws IllegalValueException if the given {@code LateInterest} is invalid."
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static LateInterest parseLateInterest(String value) throws IllegalValueException {"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d value.trim();"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new LateInterest(Double.parseDouble(value));"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(LateInterest.MESSAGE_LATE_INTEREST_DOUBLE_ONLY);"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(LateInterest.MESSAGE_LATE_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e lateInterest} into an {@code Optional\u003cLateInterest\u003e} if {@code"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * value} is present."
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Optional\u003cLateInterest\u003e parseLateInterest(Optional\u003cString\u003e value) throws IllegalValueException {"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return value.isPresent() ? Optional.of(parseLateInterest(value.get())) : Optional.empty();"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\AddressContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class AddressContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //test existence of keywords in person\u0027s address."
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword));"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\customer\\Customer.java"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Represents a customer in the address book."
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class Customer extends Person {"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final Date oweStartDate;"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final Date oweDueDate;"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final StandardInterest standardInterest; //in percent"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final LateInterest lateInterest; //in percent"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final Person runner;"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * customer constructor"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public Customer() {"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.setType(PersonType.CUSTOMER);"
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.moneyBorrowed \u003d new MoneyBorrowed();"
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.oweStartDate \u003d new Date(0);"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.oweDueDate \u003d new Date(0);"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.standardInterest \u003d new StandardInterest();"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.lateInterest \u003d new LateInterest();"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.runner \u003d new Runner();"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public Customer(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    MoneyBorrowed moneyBorrowed, Date oweStartDate, Date oweDueDate, StandardInterest"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            standardInterest, LateInterest lateInterest, Person runner) {"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.setType(PersonType.CUSTOMER);"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.moneyBorrowed \u003d moneyBorrowed;"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.standardInterest \u003d standardInterest;"
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.lateInterest \u003d lateInterest;"
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.oweStartDate \u003d oweStartDate;"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.oweDueDate \u003d oweDueDate;"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.runner \u003d runner;"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public MoneyBorrowed getMoneyBorrowed() {"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return moneyBorrowed;"
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public StandardInterest getStandardInterest() {"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return standardInterest;"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public Date getOweStartDate() {"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return oweStartDate;"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public Date getOweDueDate() {"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return oweDueDate;"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public LateInterest getLateInterest() {"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return lateInterest;"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Person getRunner() {"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return runner;"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @return amount of money owed, after compounded standardInterest, based on num of weeks that has passed since"
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * oweStartDate"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public double getMoneyCurrentlyOwed() {"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        final int numOfMsPerWeek \u003d 60 * 60 * 24 * 7 * 1000; //10080 seconds per week; 1000 ms per second"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        long elapsedTime \u003d currentDate.getTime() - oweStartDate.getTime();"
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (elapsedTime \u003c 0) {"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return moneyBorrowed.value;"
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        long elapsedWeeks \u003d elapsedTime / numOfMsPerWeek;"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return moneyBorrowed.value * Math.pow(1 + standardInterest.value / 100, (double) elapsedWeeks);"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Customer otherPerson \u003d (Customer) other;"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getName() + \";\")"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getPhone() + \";\")"
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getEmail() + \";\")"
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getAddress() + \";\")"
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        SimpleDateFormat simpledate \u003d new SimpleDateFormat(\"EEE, d MMM yyyy\");"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String oweStartDate \u003d simpledate.format(getOweStartDate());"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String oweDueDate \u003d simpledate.format(getOweDueDate());"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        builder.append(\"\\nMoney Owed: \")"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(String.format(\"$%.2f\", getMoneyCurrentlyOwed()))"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Weekly Interest Rate: \")"
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getStandardInterest() + \"%\" + \";\")"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(oweStartDate + \";\")"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Due Date: \")"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(oweDueDate)"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\"\\nRunner Assigned: \")"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(runner.getName());"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\customer\\LateInterest.java"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Represents a customer\u0027s late interest rate."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class LateInterest {"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_LATE_INTEREST_DOUBLE_ONLY \u003d"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED can only contain numbers\";"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_LATE_INTEREST_NO_NEGATIVE \u003d"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED cannot be negative\";"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public LateInterest() {"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param value an amount borrowed form the loanshark"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public LateInterest(double value) {"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        checkArgument(isValidInterest(value), MESSAGE_LATE_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Returns true if a give value is zero or positive, returns false otherwise"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static boolean isValidInterest(double test) {"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return (!(test \u003c 0));"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof LateInterest // instanceof handles nulls"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.value \u003d\u003d ((LateInterest) other).value); // state check"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return new Double(value).hashCode();"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\customer\\MoneyBorrowed.java"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Represents a customer\u0027s amount of money that he/she borrowed."
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class MoneyBorrowed {"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_MONEY_BORROWED_DOUBLE_ONLY \u003d"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED can only contain numbers\";"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_MONEY_BORROWED_NO_NEGATIVE \u003d"
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED cannot be negative\";"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public MoneyBorrowed() {"
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param value an amount borrowed form the loanshark"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public MoneyBorrowed(double value) {"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        checkArgument(isValidMoneyBorrowed(value), MESSAGE_MONEY_BORROWED_NO_NEGATIVE);"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Returns true if a given value is zero or positive, returns false otherwise"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static boolean isValidMoneyBorrowed(double test) {"
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return (!(test \u003c 0));"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof MoneyBorrowed // instanceof handles nulls"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.value \u003d\u003d ((MoneyBorrowed) other).value); // state check"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return new Double(value).hashCode();"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\customer\\StandardInterest.java"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Represents a customer\u0027s standard interest rate."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class StandardInterest {"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_STANDARD_INTEREST_DOUBLE_ONLY \u003d"
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED can only contain numbers\";"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_STANDARD_INTEREST_NO_NEGATIVE \u003d"
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED cannot be negative\";"
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public StandardInterest() {"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param value an amount borrowed form the loanshark"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public StandardInterest(double value) {"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        checkArgument(isValidInterest(value), MESSAGE_STANDARD_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Returns true if a give value is zero or positive, returns false otherwise"
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static boolean isValidInterest(double test) {"
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return (!(test \u003c 0));"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof StandardInterest // instanceof handles nulls"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.value \u003d\u003d ((StandardInterest) other).value); // state check"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return new Double(value).hashCode();"
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\EmailContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class EmailContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //test existence of keywords in person\u0027s full name and tags."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //TODO: write helper method here or in Email class to extract values before \u0027@\u0027 symbol in email address."
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\NameContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //test existence of keywords in person\u0027s full name and tags."
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\PersonContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class PersonContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //test existence of keywords in person\u0027s full name, address and tags."
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String stringOfTags \u003d getStringOfTags(person);"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword))"
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(stringOfTags, keyword))"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword))"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword))"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private String getStringOfTags(Person person) {"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String stringOfTags \u003d \"\";"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        for (Tag x : person.getTags()) {"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            stringOfTags \u003d stringOfTags + \" \" + x.tagName;"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return stringOfTags.trim();"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof PersonContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((PersonContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\PhoneContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class PhoneContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //test existence of keywords in person\u0027s phone."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\runner\\Runner.java"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Represents a runner in the address book."
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class Runner extends Person {"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final List\u003cPerson\u003e customers;"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public Runner() {"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.setType(PersonType.RUNNER);"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public Runner(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, List\u003cPerson\u003e customers) {"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.setType(PersonType.RUNNER);"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.customers \u003d customers;"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public List\u003cPerson\u003e getCustomers() {"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return customers;"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!(other instanceof Runner)) {"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Runner otherPerson \u003d (Runner) other;"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getName() + \";\")"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getPhone() + \";\")"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getEmail() + \";\")"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getAddress() + \";\")"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        builder.append(\"Customers: \");"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (customers.size() \u003e 0) {"
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            builder.append(customers.get(0).getName());"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (customers.size() \u003e 1) {"
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            for (int i \u003d 1; i \u003c customers.size(); i++) {"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                builder.append(\", \");"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                builder.append(customers.get(i).getName());"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\TagsContainsKeywordsPredicate.java"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class TagsContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //test existence of keywords in person\u0027s full name and tags."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String stringOfTags \u003d getStringOfTags(person);"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(stringOfTags, keyword));"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private String getStringOfTags(Person person) {"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String stringOfTags \u003d \"\";"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        for (Tag x : person.getTags()) {"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            stringOfTags \u003d stringOfTags + \" \" + x.tagName;"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return stringOfTags.trim();"
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof TagsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((TagsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\util\\SampleDataUtil.java"
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"The Terminator\"), new Phone(\"84444448\"), new Email(\"protection@money.com\"),"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Fountain of Wealth\"),"
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"Arnold\", \"HealthIsWealth\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"Donny J\"), new Phone(\"0013451945\"), new Email(\"protection@money.com\"),"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Changi Prison Complex\"),"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"Inactive\", \"Disavowed\", \"Joker\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Zhong Ming\"), new Phone(\"91121345\"), new Email(\"important@ming.com\"),"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Merlion\"),"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"ImportantMing\", \"ZhongMing\", \"MingGreatest\", \"mingdynasty\", \"HighSES\"),"
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new MoneyBorrowed(98789060),"
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2014, 6, 7), createDate(2016, 11, 9),"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(1.75), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"Wu Lui\"), new Phone(\"90011009\"), new Email(\"nigerian_prince@bankofchina.com\"),"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"The LINQ Hotel \u0026 Casino\"),"
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"OnTheStrip\", \"HighRoller\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Queen Samsung\"), new Phone(\"000\"), new Email(\"king@kim.com\"),"
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Samsung Innovation Museum\"),"
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"Korean\", \"Royalty\", \"Untouchable\", \"HighSES\"), new MoneyBorrowed(999999999),"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2000, 1, 1), createDate(2112, 12, 12),"
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(0.01), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Ma Qing Da Wen\"), new Phone(\"764543543123\"), new Email(\"important@ming.com\"),"
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Town Green\"),"
      },
      {
        "lineNumber": 1649,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"ForeignContact\", \"Code49\"), new MoneyBorrowed(1124),"
      },
      {
        "lineNumber": 1650,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2003, 4, 11), createDate(2028, 5, 29),"
      },
      {
        "lineNumber": 1651,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(5.76), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 1652,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Lim Tin Ken\"), new Phone(\"81140976\"), new Email(\"limtincan@u.nus.edu\"),"
      },
      {
        "lineNumber": 1653,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Cinnamon College\"),"
      },
      {
        "lineNumber": 1654,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"USP\", \"Cinnamonster\"), new MoneyBorrowed(0.1),"
      },
      {
        "lineNumber": 1655,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2018, 4, 1), createDate(2018, 11, 11),"
      },
      {
        "lineNumber": 1656,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(1000), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 1657,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Master Wu Gui\"), new Phone(\"94523112\"), new Email(\"turtle@dojo.net\"),"
      },
      {
        "lineNumber": 1658,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"The Singapore Island Country Club\"),"
      },
      {
        "lineNumber": 1659,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"MOJO\", \"HighSES\"), new MoneyBorrowed(645644),"
      },
      {
        "lineNumber": 1660,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2012, 3, 17), createDate(2015, 7, 30),"
      },
      {
        "lineNumber": 1661,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(0.9), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 1662,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Hilarious Kleiny\"), new Phone(\"91208888\"), new Email(\"turtle@dojo.net\"),"
      },
      {
        "lineNumber": 1663,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Institute of Mental Health\"),"
      },
      {
        "lineNumber": 1664,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"SiaoLiao\", \"Joker\"), new MoneyBorrowed(12064543),"
      },
      {
        "lineNumber": 1665,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2010, 10, 10), createDate(2022, 9, 22),"
      },
      {
        "lineNumber": 1666,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(2.309), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 1667,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 1668,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1669,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1670,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1671,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * helper method to generate a custom meaningful date."
      },
      {
        "lineNumber": 1672,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1673,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1674,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1675,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private static Date createDate(int year, int month, int dayOfMonth) {"
      },
      {
        "lineNumber": 1676,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return createDate(year, month, dayOfMonth, 0, 0, 0);"
      },
      {
        "lineNumber": 1677,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1678,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1679,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1680,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * helper method to generate a custom meaningful date."
      },
      {
        "lineNumber": 1681,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1682,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 1683,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1684,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static Date createDate(int year, int month, int dayOfMonth, int hourOfDay, int minute, int second) {"
      },
      {
        "lineNumber": 1685,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        GregorianCalendar calendar \u003d new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);"
      },
      {
        "lineNumber": 1686,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 1687,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1688,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1689,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\storage\\XmlAdaptedPerson.java"
      },
      {
        "lineNumber": 1690,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1691,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1692,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 1693,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 1694,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 1695,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1696,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 1697,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1698,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1699,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private Person.PersonType personType;"
      },
      {
        "lineNumber": 1700,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1701,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1702,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 1703,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1704,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 1705,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1706,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 1707,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1708,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 1709,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1710,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 1711,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1712,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1713,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //Customer fields"
      },
      {
        "lineNumber": 1714,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1715,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 1716,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1717,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private StandardInterest standardInterest;"
      },
      {
        "lineNumber": 1718,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1719,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private LateInterest lateInterest;"
      },
      {
        "lineNumber": 1720,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1721,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private Date oweStartDate;"
      },
      {
        "lineNumber": 1722,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1723,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private Date oweDueDate;"
      },
      {
        "lineNumber": 1724,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1725,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private XmlAdaptedPerson runner;"
      },
      {
        "lineNumber": 1726,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1727,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //Runner fields"
      },
      {
        "lineNumber": 1728,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 1729,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1730,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1731,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1732,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 1733,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 1734,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1735,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 1736,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1737,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1738,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 1739,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1740,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 1741,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 1742,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 1743,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 1744,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 1745,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 1746,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 1747,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1748,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.personType \u003d Person.PersonType.PERSON;"
      },
      {
        "lineNumber": 1749,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1750,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1751,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1752,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 1753,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1754,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 1755,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1756,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 1757,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 1758,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 1759,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 1760,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 1761,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1762,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 1763,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 1764,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1765,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        personType \u003d source.getType();"
      },
      {
        "lineNumber": 1766,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1767,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (source instanceof Customer) {"
      },
      {
        "lineNumber": 1768,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            moneyBorrowed \u003d ((Customer) source).getMoneyBorrowed();"
      },
      {
        "lineNumber": 1769,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            standardInterest \u003d ((Customer) source).getStandardInterest();"
      },
      {
        "lineNumber": 1770,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            lateInterest \u003d ((Customer) source).getLateInterest();"
      },
      {
        "lineNumber": 1771,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            oweStartDate \u003d ((Customer) source).getOweStartDate();"
      },
      {
        "lineNumber": 1772,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            oweDueDate \u003d ((Customer) source).getOweDueDate();"
      },
      {
        "lineNumber": 1773,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runner \u003d new XmlAdaptedPerson(((Customer) source).getRunner());"
      },
      {
        "lineNumber": 1774,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1775,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1776,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (source instanceof Runner) {"
      },
      {
        "lineNumber": 1777,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1778,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            for (Person person : ((Runner) source).getCustomers()) {"
      },
      {
        "lineNumber": 1779,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                customers.add(new XmlAdaptedPerson(person));"
      },
      {
        "lineNumber": 1780,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1781,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1782,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1783,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1784,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1785,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 1786,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 1787,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 1788,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1789,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 1790,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1791,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 1792,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 1793,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1794,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1795,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 1796,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 1797,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1798,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 1799,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 1800,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1801,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 1802,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1803,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 1804,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 1805,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1806,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 1807,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 1808,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1809,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 1810,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1811,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (this.email \u003d\u003d null) {"
      },
      {
        "lineNumber": 1812,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 1813,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1814,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!Email.isValidEmail(this.email)) {"
      },
      {
        "lineNumber": 1815,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 1816,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1817,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 1818,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1819,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 1820,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 1821,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1822,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 1823,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 1824,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1825,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 1826,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1827,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 1828,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1829,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (this.personType \u003d\u003d Person.PersonType.CUSTOMER) {"
      },
      {
        "lineNumber": 1830,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            //moneyBorrowed"
      },
      {
        "lineNumber": 1831,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (this.moneyBorrowed \u003d\u003d null) {"
      },
      {
        "lineNumber": 1832,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, MoneyBorrowed.class"
      },
      {
        "lineNumber": 1833,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 1834,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1835,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (!MoneyBorrowed.isValidMoneyBorrowed(this.moneyBorrowed.value)) {"
      },
      {
        "lineNumber": 1836,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(MoneyBorrowed.MESSAGE_MONEY_BORROWED_NO_NEGATIVE);"
      },
      {
        "lineNumber": 1837,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1838,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            final MoneyBorrowed moneyBorrowed \u003d new MoneyBorrowed(this.moneyBorrowed.value);"
      },
      {
        "lineNumber": 1839,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1840,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            //oweStartDate"
      },
      {
        "lineNumber": 1841,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (this.oweStartDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 1842,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName"
      },
      {
        "lineNumber": 1843,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        ()));"
      },
      {
        "lineNumber": 1844,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1845,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1846,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            final Date oweStartDate \u003d this.oweStartDate;"
      },
      {
        "lineNumber": 1847,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1848,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            //oweDueDate"
      },
      {
        "lineNumber": 1849,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (this.oweDueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 1850,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName"
      },
      {
        "lineNumber": 1851,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        ()));"
      },
      {
        "lineNumber": 1852,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1853,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1854,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            final Date oweDueDate \u003d this.oweDueDate;"
      },
      {
        "lineNumber": 1855,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1856,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            //standardInterest"
      },
      {
        "lineNumber": 1857,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (this.standardInterest \u003d\u003d null) {"
      },
      {
        "lineNumber": 1858,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, StandardInterest.class"
      },
      {
        "lineNumber": 1859,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 1860,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1861,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (!standardInterest.isValidInterest(this.standardInterest.value)) {"
      },
      {
        "lineNumber": 1862,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(standardInterest.MESSAGE_STANDARD_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 1863,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1864,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            final StandardInterest standardInterest \u003d this.standardInterest;"
      },
      {
        "lineNumber": 1865,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1866,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            //lateInterest"
      },
      {
        "lineNumber": 1867,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (this.lateInterest \u003d\u003d null) {"
      },
      {
        "lineNumber": 1868,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, LateInterest.class"
      },
      {
        "lineNumber": 1869,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 1870,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1871,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (!standardInterest.isValidInterest(this.lateInterest.value)) {"
      },
      {
        "lineNumber": 1872,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(standardInterest.MESSAGE_STANDARD_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 1873,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1874,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            final LateInterest lateInterest \u003d this.lateInterest;"
      },
      {
        "lineNumber": 1875,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1876,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //runner"
      },
      {
        "lineNumber": 1877,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (this.runner \u003d\u003d null) {"
      },
      {
        "lineNumber": 1878,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, LateInterest.class"
      },
      {
        "lineNumber": 1879,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 1880,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1881,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            final Person runner \u003d this.runner.toModelType();"
      },
      {
        "lineNumber": 1882,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1883,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new Customer(name, phone, email, address, tags, moneyBorrowed, oweStartDate, oweDueDate,"
      },
      {
        "lineNumber": 1884,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    standardInterest, lateInterest, runner);"
      },
      {
        "lineNumber": 1885,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1886,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else if (this.personType \u003d\u003d Person.PersonType.RUNNER) {"
      },
      {
        "lineNumber": 1887,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (this.customers \u003d\u003d null) {"
      },
      {
        "lineNumber": 1888,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, StandardInterest.class"
      },
      {
        "lineNumber": 1889,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 1890,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1891,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1892,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            final List\u003cPerson\u003e customerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1893,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            for (XmlAdaptedPerson person : customers) {"
      },
      {
        "lineNumber": 1894,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                customerList.add(person.toModelType());"
      },
      {
        "lineNumber": 1895,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1896,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1897,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new Runner(name, phone, email, address, tags, customerList);"
      },
      {
        "lineNumber": 1898,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1899,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1900,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 1901,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1902,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1903,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1904,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1905,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1906,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 1907,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 1908,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 1909,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1910,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1911,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1912,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 1913,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1914,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1915,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1916,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 1917,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 1918,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 1919,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 1920,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 1921,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 1922,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1923,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 1924,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1925,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\ui\\BrowserPanel.java"
      },
      {
        "lineNumber": 1926,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1927,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 1928,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void handleFieldsChangedEvent(FieldsChangedEvent event) {"
      },
      {
        "lineNumber": 1929,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 1930,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        loadPersonPage(event.person);"
      },
      {
        "lineNumber": 1931,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1932,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1933,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 1934,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 1935,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonListPanel.java"
      },
      {
        "lineNumber": 1936,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1937,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 1938,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 1939,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 1940,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                setStyle(\"    -fx-label-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 1941,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + \"    -fx-graphic-text-gap : 0;\""
      },
      {
        "lineNumber": 1942,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + \"    -fx-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 1943,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + \"    -fx-background-color: derive(-main-colour, 0%);\");"
      },
      {
        "lineNumber": 1944,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 1945,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                if (person.person instanceof Customer) {"
      },
      {
        "lineNumber": 1946,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    setGraphic(person.getRoot());"
      },
      {
        "lineNumber": 1947,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    setStyle(\"    -fx-label-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 1948,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-graphic-text-gap : 0;\""
      },
      {
        "lineNumber": 1949,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 1950,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-background-color: derive(-main-colour, 0%);\");"
      },
      {
        "lineNumber": 1951,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 1952,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    setGraphic(person.getRoot());"
      },
      {
        "lineNumber": 1953,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    setStyle(\"    -fx-label-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 1954,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-graphic-text-gap : 0;\""
      },
      {
        "lineNumber": 1955,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 1956,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-background-color: derive(-main-colour, 50%);\");"
      },
      {
        "lineNumber": 1957,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 1958,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1959,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 1581,
      "melvintzw": 378
    }
  },
  {
    "path": "collated/functional/zhangriqi.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# zhangriqi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\commons\\events\\ui\\LocateRequestEvent.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Indicates a request to locate the list of persons"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class LocateRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final int target;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public LocateRequestEvent(int target) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddCommand.java"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"i\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\LocateCommand.java"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.LocateRequestEvent;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Locate the address of a person by keywords on Google Map."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class LocateCommand extends Command implements PopulatableCommand {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"locate\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            COMMAND_WORD + \" | Locates all persons whose fields contain any of the specified keywords \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"(case-insensitive) and displays them as a list with index numbers.\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Parameters:\\t\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"[SPECIFIER] KEYWORD [KEYWORD] ...\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Specifiers:\\t\\t\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"-all, -n, -p, -e, -a, -t : ALL, NAME, PHONE, EMAIL, ADDRESS and TAGS respectively.\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Example:\\t\\t\" + COMMAND_WORD + \" -n alice bob charlie\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_LOCATE_SUCCESS \u003d \"Locate successful\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_NO_PERSON \u003d \"Locate Command unsuccessful: \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"No such person with those keyword(s) found!\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_LOCATE_SELECT \u003d \"More than one person found! \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_NOADDRESS_PERSON \u003d \"This person has no address!\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final int target \u003d 0;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final int targetOne \u003d 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public LocateCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public LocateCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        predicate \u003d null;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (model.getFilteredPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_PERSON));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else if (model.getFilteredPersonList().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person person \u003d lastShownList.get(target);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            String address \u003d person.getAddress().toString();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (address.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NOADDRESS_PERSON));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                // Open Google Map on BrowserPanel"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                MainWindow.loadUrl(\"https://www.google.com.sg/maps/place/\""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + address);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                EventsCenter.getInstance().post(new LocateRequestEvent(target));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_LOCATE_SUCCESS));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person person \u003d lastShownList.get(target);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            String address \u003d person.getAddress().toString();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (address.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NOADDRESS_PERSON));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                // Open Google Map on BrowserPanel"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                MainWindow.loadUrl(\"https://www.google.com.sg/maps/place/\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + address);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                EventsCenter.getInstance().post(new LocateRequestEvent(target));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_LOCATE_SELECT, targetOne));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((LocateCommand) other).predicate));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParser.java"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case LocateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case LocateCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new LocateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\LocateCommandParser.java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.LocateCommand;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Parse input arguments and create a new LocateCommand object"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class LocateCommandParser implements Parser\u003cLocateCommand\u003e {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public LocateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String[] arguments \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String[] keywords;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //check arguments[0] for specifier"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (arguments[0].matches(\"\\\\p{Alnum}+.++\")) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new LocateCommand(new PersonContainsKeywordsPredicate(Arrays.asList(arguments)));"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        switch (arguments[0]) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-n\":"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new LocateCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-p\":"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new LocateCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-e\":"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new LocateCommand(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-a\":"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new LocateCommand(new AddressContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"-t\":"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return new LocateCommand(new TagsContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\ModelManager.java"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\MainWindow.java"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static void loadUrl(String url) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        browserPanel.loadPage(url);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonListPanel.java"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void locate(int index) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\PersonListPanel.java"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleLocateRequestEvent(LocateRequestEvent event) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        locate(event.target);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\resources\\view\\MainWindow.fxml"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    \u003cImage url\u003d\"@/images/loanshark_logo.png\" /\u003e"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\resources\\view\\StatusBarFooter.fxml"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` fxml"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003cGridPane styleClass\u003d\"grid-pane\" minHeight\u003d\"10\" maxHeight\u003d\"10\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 193,
      "melvintzw": 63
    }
  },
  {
    "path": "collated/test/Der-Erlkonig.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# Der-Erlkonig"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\storage\\HtmlWriterTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class HtmlWriterTest {"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Customer customer;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Runner runner;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private HtmlWriter htmlWriter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private HtmlWriter htmlWriterCustomer;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private HtmlWriter htmlWriterRunner;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        customer \u003d new PersonBuilder().buildCustomer();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        runner \u003d new PersonBuilder().buildRunner();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        htmlWriter \u003d new HtmlWriter();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        htmlWriterCustomer \u003d new HtmlWriter(customer);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        htmlWriterRunner \u003d new HtmlWriter(runner);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void checkOpeningLine() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String testOpeningLine \u003d \"\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003chead\u003e\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + \"\u003cbody style\u003d\\\"background-color:#CEDBFB;\\\"\\n\u003e\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + \"\u003cfont face\u003d\\\"Segoe UI\\\" size\u003d\\\"5\\\" color\u003d\\\"black\\\"\u003e\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + \"\u003ctable\u003e\u003ctr\u003e\u003cth align\u003d\\\"left\\\" colspan\u003d\\\"2\\\"\u003e\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(testOpeningLine, htmlWriter.OPENING_LINE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void checkCustomerFields() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getName(), \"Alice Pauline\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getPhone(), \"85355255\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getEmail(), \"alice@gmail.com\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getAddress(), \"123, Jurong West Ave 6, #08-111\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getAmountBorrowed(), \"0.00\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getInterestRate(), \"0.0\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getAmountCurrentlyOwed(), \"0.00\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getOweStartDate(), \"Thu, 1 Jan 1970\");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getOweDueDate(), \"Thu, 1 Jan 1970\");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterCustomer.getRunnerAssigned(), \"Not Assigned\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNull(htmlWriterCustomer.getCustomerList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void checkRunnerFields() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getName(), \"Alice Pauline\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getPhone(), \"85355255\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getEmail(), \"alice@gmail.com\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getAddress(), \"123, Jurong West Ave 6, #08-111\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getAmountBorrowed(), \"\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getInterestRate(), \"\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getAmountCurrentlyOwed(), \"\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getOweStartDate(), \"\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getOweDueDate(), \"\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(htmlWriterRunner.getRunnerAssigned(), \"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotNull(htmlWriterRunner.getCustomerList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 18,
      "melvintzw": 42
    }
  },
  {
    "path": "collated/test/jonleeyz-reused.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# jonleeyz-reused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\guitests\\guihandles\\PersonCardHandle.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Gets the style class for a given tag"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * IllegalArgumentException is thrown if tag cannot be found"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Every Label with the same tag content should have the same style class"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag\"));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\LocateCommandParserTest.java"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private LocateCommandParser parser \u003d new LocateCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                LocateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_invalidSpecifier_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //\"-e\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"-z Alice Bob\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                LocateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * PLACEHOLDEER: to address checkstyle violation"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @TODO remove after test is fixed"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_validArgs_returnsLocateCommand() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        LocateCommand expectedLocateCommand \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new LocateCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedLocateCommand);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-all specifier"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-all Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-n specifier"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-n Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-p specifier"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-p Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-a specifier"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new AddressContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-a Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-t specifier"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new TagsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-t Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-e specifier"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new EmailContainsKeywordsPredicate(Arrays.asList(\"alice@example.com\","
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \"bob@example.com\")));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-e alice@example.com bob@example.com\", expectedLocateCommand);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\CommandBoxTest.java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - {@code NewResultAvailableEvent} is posted"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        eventsCollectorRule.eventsCollector.reset();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - {@code NewResultAvailableEvent} is posted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        eventsCollectorRule.eventsCollector.reset();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ResultDisplayTest.java"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_SUCCESS_EVENT_STUB \u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new NewResultAvailableEvent(\"Stub\", true);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_FAILURE_EVENT_STUB \u003d"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new NewResultAvailableEvent(\"Stub\", false);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cString\u003e defaultStyleOfResultDisplay;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cString\u003e errorStyleOfResultDisplay;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\ui\\ResultDisplayTest.java"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // receiving new results"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertResultDisplay(NEW_RESULT_SUCCESS_EVENT_STUB);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertResultDisplay(NEW_RESULT_FAILURE_EVENT_STUB);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Posts the {@code event} to the {@code EventsCentre}, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the text on the result display matches the {@code event}\u0027s message \u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the result display\u0027s style is the same as {@code defaultStyleOfResultDisplay} if event is successful,"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - {@code errorStyleOfResultDisplay} otherwise."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertResultDisplay(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        postNow(event);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cString\u003e expectedStyleClass \u003d event.isSuccessful()"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ? defaultStyleOfResultDisplay"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                : errorStyleOfResultDisplay;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(event.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedStyleClass, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 95,
      "melvintzw": 57
    }
  },
  {
    "path": "collated/test/jonleeyz-unused.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "# jonleeyz-unused"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\ui\\testutil\\GuiTestAssert.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Returns the colour style for {@code tagName}\u0027s label. The tag colour is determined by looking up the colour in"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * {@code PersonCard#TAG_COLOUR_STYLES}, using an index generated by {@code hashcode()} of the tag\u0027s content."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @see PersonCard#getTagColourStyleFor(String)"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private static String getTagColourStyleFor(String tagName) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return \"brown\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            fail(tagName + \"does not have a colour assigned.\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all tags in {@code expectedPerson} with correct colours."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags()"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColourStyleFor(tag)),  // why two args in asList?"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\systemtests\\AddCommandSystemTest.java"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\systemtests\\DeleteCommandSystemTest.java"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(deleteCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(deleteCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\systemtests\\EditCommandSystemTest.java"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(editCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(editCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\systemtests\\FindCommandSystemTest.java"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(findCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(findCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\systemtests\\HelpCommandSystemTest.java"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\systemtests\\SelectCommandSystemTest.java"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(selectCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(selectCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 135
    }
  },
  {
    "path": "collated/test/jonleeyz.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# jonleeyz"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\guitests\\guihandles\\CommandBoxHandle.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets text in the command box"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean setInput(String text) {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(text));"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Clears all text in the command box."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @return true if the command succeeded, false otherwise."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean clear() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().clear());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getRootNode().getText().equals(\"\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Gets caret position in the command box"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public int getCaretPosition() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return getRootNode().getCaretPosition();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets caret position in the command box"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void setCaretPosition(int index) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().positionCaret(index));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\guitests\\guihandles\\MainMenuHandle.java"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Simulates press of given keyboard shortcut"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void useAccelerator(KeyCode... combination) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.push(combination);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ClearCommandTest.java"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(new ClearCommand().getCommandWord(), ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\HistoryCommandTest.java"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(new HistoryCommand().getCommandWord(), HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\ListCommandTest.java"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(new ListCommand().getCommandWord(), ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\RedoCommandTest.java"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(new RedoCommand().getCommandWord(), RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\UndoCommandTest.java"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(new UndoCommand().getCommandWord(), UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditCommandParserTest.java"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MONEY_BORROWED_NOT_DOUBLE,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                MoneyBorrowed.MESSAGE_MONEY_BORROWED_DOUBLE_ONLY); // invalid money borrowed: not a double"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MONEY_BORROWED_NEGATIVE,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                MoneyBorrowed.MESSAGE_MONEY_BORROWED_NO_NEGATIVE); // invalid money borrowed: negative"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STANDARD_INTEREST_NOT_DOUBLE,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                StandardInterest.MESSAGE_STANDARD_INTEREST_DOUBLE_ONLY); // invalid standard interest: not a double"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STANDARD_INTEREST_NEGATIVE,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                StandardInterest.MESSAGE_STANDARD_INTEREST_NO_NEGATIVE); // invalid standard interest: negative"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditCommandParserTest.java"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // money borrowed"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MONEY_BORROWED_314159265;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withMoneyBorrowed(VALID_MONEY_BORROWED_314159265).build();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // owe start date"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OWE_START_DATE_070518;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withOweStartDate(VALID_OWE_START_DATE_070518).build();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // owe due date"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OWE_DUE_DATE_121221;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withOweDueDate(VALID_OWE_DUE_DATE_121221).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // standard interest"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STANDARD_INTEREST_971;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withStandardInterest(VALID_STANDARD_INTEREST_971).build();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditCommandParserTest.java"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + TAG_DESC_FRIEND + MONEY_BORROWED_314159265"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + OWE_START_DATE_070518 + OWE_DUE_DATE_121221 + STANDARD_INTEREST_971"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND + MONEY_BORROWED_314159265"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + OWE_START_DATE_070518 + OWE_DUE_DATE_121221 + STANDARD_INTEREST_971"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + MONEY_BORROWED_20481028"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + OWE_START_DATE_121221 + OWE_DUE_DATE_070528 + STANDARD_INTEREST_314;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\EditCommandParserTest.java"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + PHONE_DESC_BOB + MONEY_BORROWED_20481028 + OWE_START_DATE_070518 + OWE_DUE_DATE_121221"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + STANDARD_INTEREST_314;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withMoneyBorrowed(VALID_MONEY_BORROWED_20481028)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withOweStartDate(OWE_DUE_DATE_070528).withOweDueDate(OWE_DUE_DATE_121221)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withStandardInterest(VALID_STANDARD_INTEREST_314).build();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\ParserUtilTest.java"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseMoneyBorrowed_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMoneyBorrowed((String) null));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMoneyBorrowed((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseMoneyBorrowed_invalidValueNotDouble_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(INVALID_MONEY_BORROWED_NOT_DOUBLE));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(Optional.of(INVALID_MONEY_BORROWED_NOT_DOUBLE)));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseMoneyBorrowed_invalidValueNegative_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(INVALID_MONEY_BORROWED_NEGATIVE));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(Optional.of(INVALID_MONEY_BORROWED_NEGATIVE)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseMoneyBorrowed_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(ParserUtil.parseMoneyBorrowed(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseMoneyBorrowed_validValueWithoutWhitespace_returnsMoneyBorrowed() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        MoneyBorrowed expectedMoneyBorrowed \u003d new MoneyBorrowed(Double.parseDouble(VALID_MONEY_BORROWED));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(expectedMoneyBorrowed, ParserUtil.parseMoneyBorrowed(VALID_MONEY_BORROWED));"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(Optional.of(expectedMoneyBorrowed),"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(Optional.of(VALID_MONEY_BORROWED)));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseMoneyBorrowed_validValueWithWhitespace_returnsTrimmedMoneyBorrowed() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String moneyBorrowedWithWhitespace \u003d WHITESPACE + VALID_MONEY_BORROWED + WHITESPACE;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        MoneyBorrowed expectedMoneyBorrowed \u003d new MoneyBorrowed(Double.parseDouble(moneyBorrowedWithWhitespace));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(expectedMoneyBorrowed, ParserUtil.parseMoneyBorrowed(VALID_MONEY_BORROWED));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(Optional.of(expectedMoneyBorrowed),"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(Optional.of(VALID_MONEY_BORROWED)));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseStandardInterest_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseStandardInterest((String) null));"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseStandardInterest((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseStandardInterest_invalidValueNotDouble_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseStandardInterest(INVALID_STANDARD_INTEREST_NOT_DOUBLE));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseStandardInterest(Optional.of(INVALID_STANDARD_INTEREST_NOT_DOUBLE)));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseStandardInterest_invalidValueNegative_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseStandardInterest(INVALID_STANDARD_INTEREST_NEGATIVE));"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseStandardInterest(Optional.of(INVALID_STANDARD_INTEREST_NEGATIVE)));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseStandardInterest_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(ParserUtil.parseStandardInterest(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseStandardInterest_validValueWithoutWhitespace_returnsStandardInterest() throws Exception {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        StandardInterest expectedStandardInterest \u003d new StandardInterest(Double.parseDouble(VALID_STANDARD_INTEREST));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(expectedStandardInterest, ParserUtil.parseStandardInterest(VALID_STANDARD_INTEREST));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(Optional.of(expectedStandardInterest),"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseStandardInterest(Optional.of(VALID_STANDARD_INTEREST)));"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseStandardInterest_validValueWithWhitespace_returnsTrimmedStandardInterest() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String standardInterestWithWhitespace \u003d WHITESPACE + VALID_STANDARD_INTEREST + WHITESPACE;"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        StandardInterest expectedStandardInterest \u003d"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new StandardInterest(Double.parseDouble(standardInterestWithWhitespace));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(expectedStandardInterest, ParserUtil.parseStandardInterest(VALID_STANDARD_INTEREST));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(Optional.of(expectedStandardInterest),"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseStandardInterest(Optional.of(VALID_STANDARD_INTEREST)));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseLateInterest_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLateInterest((String) null));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLateInterest((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseLateInterest_invalidValueNotDouble_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseLateInterest(INVALID_LATE_INTEREST_NOT_DOUBLE));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseLateInterest(Optional.of(INVALID_LATE_INTEREST_NOT_DOUBLE)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseLateInterest_invalidValueNegative_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseLateInterest(INVALID_LATE_INTEREST_NEGATIVE));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseLateInterest(Optional.of(INVALID_LATE_INTEREST_NEGATIVE)));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseLateInterest_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(ParserUtil.parseLateInterest(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseLateInterest_validValueWithoutWhitespace_returnsLateInterest() throws Exception {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        LateInterest expectedLateInterest \u003d new LateInterest(Double.parseDouble(VALID_LATE_INTEREST));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(expectedLateInterest, ParserUtil.parseLateInterest(VALID_LATE_INTEREST));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(Optional.of(expectedLateInterest),"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseLateInterest(Optional.of(VALID_LATE_INTEREST)));"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parseLateInterest_validValueWithWhitespace_returnsTrimmedLateInterest() throws Exception {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String lateInterestWithWhitespace \u003d WHITESPACE + VALID_LATE_INTEREST + WHITESPACE;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        LateInterest expectedLateInterest \u003d"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new LateInterest(Double.parseDouble(lateInterestWithWhitespace));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(expectedLateInterest, ParserUtil.parseLateInterest(VALID_LATE_INTEREST));"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(Optional.of(expectedLateInterest),"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ParserUtil.parseLateInterest(Optional.of(VALID_LATE_INTEREST)));"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\AddressBookTest.java"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testHashcode_symmetric() throws DuplicatePersonException {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AddressBook addressBookA \u003d new AddressBook();"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AddressBook addressBookB \u003d new AddressBook();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AddressBook addressBookC \u003d new AddressBook();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AddressBook addressBookD \u003d new AddressBook();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person samplePerson \u003d new Person();"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        addressBookC.addPerson(samplePerson);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        addressBookD.addPerson(samplePerson);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(addressBookA.hashCode(), addressBookB.hashCode());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(addressBookC.hashCode(), addressBookD.hashCode());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addressBookA.hashCode(), addressBookC.hashCode());"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addressBookA.hashCode(), addressBookD.hashCode());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addressBookB.hashCode(), addressBookC.hashCode());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addressBookB.hashCode(), addressBookD.hashCode());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\AddressTest.java"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Address addressA \u003d new Address();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Address addressB \u003d new Address();"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Address addressC \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Address addressD \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(addressA.hashCode(), addressB.hashCode());"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(addressC.hashCode(), addressD.hashCode());"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addressA.hashCode(), addressC.hashCode());"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addressA.hashCode(), addressD.hashCode());"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addressB.hashCode(), addressC.hashCode());"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(addressB.hashCode(), addressD.hashCode());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\customer\\LateInterestTest.java"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class LateInterestTest {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testToString_success() {"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(\"9.71\", new LateInterest(9.71).toString());"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        LateInterest lateInterestA \u003d new LateInterest();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        LateInterest lateInterestB \u003d new LateInterest();"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        LateInterest lateInterestC \u003d new LateInterest(9.71);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        LateInterest lateInterestD \u003d new LateInterest(9.71);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(lateInterestA.hashCode(), lateInterestB.hashCode());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(lateInterestC.hashCode(), lateInterestD.hashCode());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(lateInterestA.hashCode(), lateInterestC.hashCode());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(lateInterestA.hashCode(), lateInterestD.hashCode());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(lateInterestB.hashCode(), lateInterestC.hashCode());"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(lateInterestB.hashCode(), lateInterestD.hashCode());"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\customer\\MoneyBorrowedTest.java"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class MoneyBorrowedTest {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testToString_success() {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(\"9.71\", new MoneyBorrowed(9.71).toString());"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        MoneyBorrowed moneyBorrowedA \u003d new MoneyBorrowed();"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        MoneyBorrowed moneyBorrowedB \u003d new MoneyBorrowed();"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        MoneyBorrowed moneyBorrowedC \u003d new MoneyBorrowed(9.71);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        MoneyBorrowed moneyBorrowedD \u003d new MoneyBorrowed(9.71);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(moneyBorrowedA.hashCode(), moneyBorrowedB.hashCode());"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(moneyBorrowedC.hashCode(), moneyBorrowedD.hashCode());"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(moneyBorrowedA.hashCode(), moneyBorrowedC.hashCode());"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(moneyBorrowedA.hashCode(), moneyBorrowedD.hashCode());"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(moneyBorrowedB.hashCode(), moneyBorrowedC.hashCode());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(moneyBorrowedB.hashCode(), moneyBorrowedD.hashCode());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\customer\\StandardInterestTest.java"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class StandardInterestTest {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testToString_success() {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(\"9.71\", new StandardInterest(9.71).toString());"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        StandardInterest standardInterestA \u003d new StandardInterest();"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        StandardInterest standardInterestB \u003d new StandardInterest();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        StandardInterest standardInterestC \u003d new StandardInterest(9.71);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        StandardInterest standardInterestD \u003d new StandardInterest(9.71);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(standardInterestA.hashCode(), standardInterestB.hashCode());"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(standardInterestC.hashCode(), standardInterestD.hashCode());"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(standardInterestA.hashCode(), standardInterestC.hashCode());"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(standardInterestA.hashCode(), standardInterestD.hashCode());"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(standardInterestB.hashCode(), standardInterestC.hashCode());"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(standardInterestB.hashCode(), standardInterestD.hashCode());"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\EmailTest.java"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Email emailA \u003d new Email();"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Email emailB \u003d new Email();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Email emailC \u003d new Email(\"test@email.com\");"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Email emailD \u003d new Email(\"test@email.com\");"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(emailA.hashCode(), emailB.hashCode());"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(emailC.hashCode(), emailD.hashCode());"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(emailA.hashCode(), emailC.hashCode());"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(emailA.hashCode(), emailD.hashCode());"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(emailB.hashCode(), emailC.hashCode());"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(emailB.hashCode(), emailD.hashCode());"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\NameTest.java"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Name nameA \u003d new Name(\"Aron\");"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Name nameB \u003d new Name(\"Aron\");"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Name nameC \u003d new Name(\"Aaron\");"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Name nameD \u003d new Name(\"Aaron\");"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(nameA.hashCode(), nameB.hashCode());"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(nameC.hashCode(), nameD.hashCode());"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(nameA.hashCode(), nameC.hashCode());"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(nameA.hashCode(), nameD.hashCode());"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(nameB.hashCode(), nameC.hashCode());"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(nameB.hashCode(), nameD.hashCode());"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\PhoneTest.java"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Phone phoneA \u003d new Phone();"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Phone phoneB \u003d new Phone();"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Phone phoneC \u003d new Phone(\"999\");"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Phone phoneD \u003d new Phone(\"999\");"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(phoneA.hashCode(), phoneB.hashCode());"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(phoneC.hashCode(), phoneD.hashCode());"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(phoneA.hashCode(), phoneC.hashCode());"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(phoneA.hashCode(), phoneD.hashCode());"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(phoneB.hashCode(), phoneC.hashCode());"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(phoneB.hashCode(), phoneD.hashCode());"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\UniquePersonListTest.java"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void testHashcode_symmetric() throws DuplicatePersonException {"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UniquePersonList uniquePersonListA \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UniquePersonList uniquePersonListB \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UniquePersonList uniquePersonListC \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UniquePersonList uniquePersonListD \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person samplePerson \u003d new Person();"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        uniquePersonListC.add(samplePerson);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        uniquePersonListD.add(samplePerson);"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(uniquePersonListA.hashCode(), uniquePersonListB.hashCode());"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(uniquePersonListC.hashCode(), uniquePersonListD.hashCode());"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(uniquePersonListA.hashCode(), uniquePersonListC.hashCode());"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(uniquePersonListA.hashCode(), uniquePersonListD.hashCode());"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(uniquePersonListB.hashCode(), uniquePersonListC.hashCode());"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(uniquePersonListB.hashCode(), uniquePersonListD.hashCode());"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\ui\\CommandBoxTest.java"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void handleKeyPress_shiftTab_whenNoPrefixesPresent() {"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int expectedCaretPosition \u003d COMMAND_THAT_FAILS.length();"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setCaretPosition(expectedCaretPosition);"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertShiftTabPressBehaviour(expectedCaretPosition, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void handleKeyPress_shiftTab_whenPrefixesPresent() {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // initialisation"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setInput(EXAMPLE_COMMAND_TEMPLATE);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int expectedCaretPosition \u003d EXAMPLE_COMMAND_TEMPLATE.length();"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setCaretPosition(expectedCaretPosition);"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test skipping past third prefix\u0027s argument and one trailing space"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                assertShiftTabPressBehaviour(expectedCaretPosition, EXAMPLE_PHONE + \" \");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test skipping past second prefix\u0027s argument and third prefix, with no trailing spaces"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                assertShiftTabPressBehaviour(expectedCaretPosition, EXAMPLE_NAME + \" \" + PREFIX_PHONE);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test skipping past second prefix, with one trailing space following second prefix\u0027s argument"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                assertShiftTabPressBehaviour(expectedCaretPosition, \" \" + PREFIX_NAME + \" \");"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test skipping past command word and first prefix, to before the entire CommandBox input"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertShiftTabPressBehaviour(expectedCaretPosition, AddCommand.COMMAND_WORD + \" \" + PREFIX_TYPE + \" \");"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void handleKeyPress_tab_whenNoPrefixesPresent() {"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int expectedCaretPosition \u003d 0;"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setCaretPosition(expectedCaretPosition);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTabPressBehaviour(expectedCaretPosition, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void handleKeyPress_tab_whenPrefixesPresent() {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // initialisation"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setInput(EXAMPLE_COMMAND_TEMPLATE);"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int expectedCaretPosition \u003d 0;"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setCaretPosition(expectedCaretPosition);"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test skipping past command word and first prefix"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                assertTabPressBehaviour(expectedCaretPosition, AddCommand.COMMAND_WORD + \" \" + PREFIX_TYPE + \" \");"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test skipping past second prefix, with one trailing space following second prefix"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                assertTabPressBehaviour(expectedCaretPosition, \" \" + PREFIX_NAME + \" \");"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test skipping past second prefix\u0027s argument and third prefix, without no trailing spaces"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                assertTabPressBehaviour(expectedCaretPosition, EXAMPLE_NAME + \" \" + PREFIX_PHONE);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test skipping past third prefix\u0027s argument and one trailing space, to after the entire CommandBox input"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTabPressBehaviour(expectedCaretPosition, EXAMPLE_PHONE + \" \");"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void handleKeyPress_shiftBackspace_whenNoPrefixesPresent() {"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int initialCaretPosition \u003d COMMAND_THAT_FAILS.length();"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setCaretPosition(initialCaretPosition);"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertShiftBackspacePressBehaviour(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void handleKeyPress_shiftBackspace_whenPrefixesPresent() {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // initialisation"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setInput(EXAMPLE_COMMAND_TEMPLATE);"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int initialCaretPosition \u003d EXAMPLE_COMMAND_TEMPLATE.length();"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandBoxHandle.setCaretPosition(initialCaretPosition);"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test deleting third prefix\u0027s argument and one trailing space"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertShiftBackspacePressBehaviour(EXAMPLE_PHONE + \" \");"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test deleting second prefix\u0027s argument and third prefix, with no trailing spaces"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertShiftBackspacePressBehaviour(EXAMPLE_NAME + \" \" + PREFIX_PHONE);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test deleting second prefix, with one trailing space following second prefix\u0027s argument"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertShiftBackspacePressBehaviour(\" \" + PREFIX_NAME + \" \");"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // test deleting command word and first prefix"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertShiftBackspacePressBehaviour(AddCommand.COMMAND_WORD + \" \" + PREFIX_TYPE + \" \");"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Presses the keyboard shortcut Shift + Tab, then ensures \u003cbr\u003e"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *      - the command box\u0027s caret position is expected."
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private int assertShiftTabPressBehaviour(int lastCaretPosition, String stringLiteralSkipped) {"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.push(KeyCode.SHIFT, KeyCode.TAB);"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int expectedCaretPosition \u003d lastCaretPosition - stringLiteralSkipped.length();"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(expectedCaretPosition, commandBoxHandle.getCaretPosition());"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return expectedCaretPosition;"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Presses the keyboard shortcut Tab, then ensures \u003cbr\u003e"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *      - the command box\u0027s caret position is expected."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private int assertTabPressBehaviour(int lastCaretPosition, String stringLiteralSkipped) {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.push(KeyCode.TAB);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int expectedCaretPosition \u003d lastCaretPosition + stringLiteralSkipped.length();"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(expectedCaretPosition, commandBoxHandle.getCaretPosition());"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return expectedCaretPosition;"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Presses the keyboard shortcut Shift + Backspace, then ensures \u003cbr\u003e"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *      - the command box\u0027s input is updated as expected."
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertShiftBackspacePressBehaviour(String stringLiteralDeleted) {"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String inputBeforePush \u003d commandBoxHandle.getInput();"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        guiRobot.push(KeyCode.SHIFT, KeyCode.BACK_SPACE);"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String inputAfterPush \u003d"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                inputBeforePush.substring(0, inputBeforePush.length() - stringLiteralDeleted.length());"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(inputAfterPush, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\AddCommandSystemTest.java"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnCommandBox_populateAddCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingAccelerator();"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnResultDisplay_populateAddCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingAccelerator();"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnPersonListPanel_populateAddCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingAccelerator();"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnBrowserPanel_populateAddCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingAccelerator();"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void populateAddCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingMenu();"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\AddCommandSystemTest.java"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(AddCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(AddCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the AddCommand template"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateAddCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.I);"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the AddCommand template"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateAddCommandUsingMenu() {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"Actions\", \"Add a Person...\");"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\AddressBookSystemTest.java"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes {@code command} associated with the given keyboard shortcut."
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void executeUsingAccelerator(KeyCode... combination) {"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        mainWindowHandle.getMainMenu().useAccelerator(combination);"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the appropriate {@code command} template in the application\u0027s"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code CommandBox} given a keyboard shortcut."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void populateUsingAccelerator(KeyCode... combination) {"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        mainWindowHandle.getMainMenu().useAccelerator(combination);"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes {@code command} associated with the given menu item."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void executeUsingMenuItem(String... menuItems) {"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        mainWindowHandle.getMainMenu().clickOnMenuItemsSequentially(menuItems);"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the appropriate {@code command} template in the application\u0027s"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code CommandBox} given the appropriate menu item."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void populateUsingMenu(String... menuItems) {"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        mainWindowHandle.getMainMenu().clickOnMenuItemsSequentially(menuItems);"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\ClearCommandSystemTest.java"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: simulate press of Ctrl + Shift + C -\u003e cleared */"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // undoes last clear command: address book still will be empty"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertKeyboardShortcutSuccess(ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new ModelManager(),"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                KeyCode.CONTROL,"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                KeyCode.SHIFT,"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                KeyCode.C);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: simulate click of \"Clear the Database\" menu item -\u003e cleared */"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertMenuItemSuccess(ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new ModelManager(),"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \"Edit\","
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \"Clear the Database\");"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\ClearCommandSystemTest.java"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, String, Model)} except that the command"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * is executed using its keyboard shortcut."
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertKeyboardShortcutSuccess(String expectedResultMessage,"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                                               Model expectedModel,"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                                               KeyCode... combination) {"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeUsingAccelerator(combination);"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, String, Model)} except that the command"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * is executed using its menu item."
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertMenuItemSuccess(String expectedResultMessage,"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                                               Model expectedModel,"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                                               String... menuItems) {"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeUsingMenuItem(menuItems);"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\DeleteCommandSystemTest.java"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnCommandBox_populateDeleteCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingAccelerator();"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnResultDisplay_populateDeleteCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingAccelerator();"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnPersonListPanel_populateDeleteCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingAccelerator();"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnBrowserPanel_populateDeleteCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingAccelerator();"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void populateDeleteCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingMenu();"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\DeleteCommandSystemTest.java"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(DeleteCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(DeleteCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the DeleteCommand template"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateDeleteCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.D);"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the DeleteCommand template"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateDeleteCommandUsingMenu() {"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"Actions\", \"Delete a Person...\");"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\EditCommandSystemTest.java"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnCommandBox_populateEditCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingAccelerator();"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnResultDisplay_populateEditCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingAccelerator();"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnPersonListPanel_populateEditCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingAccelerator();"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnBrowserPanel_populateEditCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingAccelerator();"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void populateEditCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingMenu();"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\EditCommandSystemTest.java"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(EditCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(EditCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the EditCommand template"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateEditCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.E);"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the EditCommand template"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateEditCommandUsingMenu() {"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"Actions\", \"Edit a Person...\");"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\FindCommandSystemTest.java"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnCommandBox_populateFindCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingAccelerator();"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnResultDisplay_populateFindCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingAccelerator();"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnPersonListPanel_populateFindCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingAccelerator();"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnBrowserPanel_populateFindCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingAccelerator();"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void populateFindCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingMenu();"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\FindCommandSystemTest.java"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(FindCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(FindCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the FindCommand template"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateFindCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.F);"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the FindCommand template"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateFindCommandUsingMenu() {"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"View\", \"Find...\");"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\HelpCommandSystemTest.java"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the HelpCommand using its accelerator in {@code MainMenu}"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void executeHelpCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeUsingAccelerator(KeyCode.F12);"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the HelpCommand using its menu bar item in {@code MainMenu}."
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void executeHelpCommandUsingMenu() {"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeUsingMenuItem(\"Help\", \"F12\");"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\SelectCommandSystemTest.java"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnCommandBox_populateSelectCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingAccelerator();"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnResultDisplay_populateSelectCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingAccelerator();"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnPersonListPanel_populateSelectCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingAccelerator();"
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void focusOnBrowserPanel_populateSelectCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingAccelerator();"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void populateSelectCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingMenu();"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\SelectCommandSystemTest.java"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(SelectCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(SelectCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the SelectCommand template"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateSelectCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.S);"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the SelectCommand template"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateSelectCommandUsingMenu() {"
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"Actions\", \"Select a Person...\");"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 404,
      "melvintzw": 657
    }
  },
  {
    "path": "collated/test/melvintzw.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# melvintzw"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\FindCommandTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test FindCommand object that uses the PersonContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String arguments \u003d \"carl daniel elle\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String[] splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        FindCommand command \u003d prepareCommand(new PersonContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test FindCommand object that uses the NameContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        arguments \u003d \"carl daniel elle\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d prepareCommand(new NameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test Command object that uses the PhoneContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        arguments \u003d \"95352563 87652533 9482224\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d prepareCommand(new PhoneContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test FindCommand object that uses the EmailContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        arguments \u003d \"heinz@example.com cornelia@example.com werner@example.com\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d prepareCommand(new EmailContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test FindCommand object that uses the AddressContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        arguments \u003d \"wall 10th michegan\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d prepareCommand(new AddressContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AssignCommandParserTest.java"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class AssignCommandParserTest {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private AssignCommandParser parser \u003d new AssignCommandParser();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_validArgsAndOneCustomer_returnsAssignCommand() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"1 c: 2\", new AssignCommand(Index.fromOneBased(1), Index.fromOneBased(2)));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_validArgsAndTwoCustomers_returnsAssignCommand() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"1 c: 2 3\", new AssignCommand(Index.fromOneBased(1), Index.fromOneBased(2),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Index.fromOneBased(3)));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_alphabet_throwsParseException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_negativeIndex_throwsParseException() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"-1 c: 2 3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\FindCommandParserTest.java"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-all specifier"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-all Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-n specifier"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-n Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-p specifier"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-p Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-a specifier"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-a Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-t specifier"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new TagsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-t Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-e specifier"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(\"alice@example.com\","
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \"bob@example.com\")));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-e alice@example.com bob@example.com\", expectedFindCommand);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\model\\person\\PersonContainsKeywordsPredicateTest.java"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class PersonContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new PersonContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void test_personContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Street\").build()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Charlie\").build()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Bob Street\").build()));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Carol Street\").build()));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Street\").build()));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Charlie\").build()));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void test_personDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d new PersonContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\testutil\\PersonBuilder.java"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //Customer fields"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private Date oweStartDate;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private Date oweDueDate;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private StandardInterest standardInterest;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private LateInterest lateInterest;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Person runner;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //Runner fields:"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private List\u003cPerson\u003e customers;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //Customer fields"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        moneyBorrowed \u003d new MoneyBorrowed();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        oweStartDate \u003d new Date(0);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        oweDueDate \u003d new Date(0);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        standardInterest \u003d new StandardInterest();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        lateInterest \u003d new LateInterest();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        runner \u003d new Runner();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //Runner fields:"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (personToCopy instanceof Customer) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            moneyBorrowed \u003d ((Customer) personToCopy).getMoneyBorrowed();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            oweStartDate \u003d ((Customer) personToCopy).getOweStartDate();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            oweDueDate \u003d ((Customer) personToCopy).getOweDueDate();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            standardInterest \u003d ((Customer) personToCopy).getStandardInterest();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            lateInterest \u003d ((Customer) personToCopy).getLateInterest();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runner \u003d ((Customer) personToCopy).getRunner();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (personToCopy instanceof Runner) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code MoneyBorrowed} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withMoneyBorrowed(MoneyBorrowed moneyBorrowed) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.moneyBorrowed \u003d moneyBorrowed;"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code OweStartDate} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withOweStartDate(Date date) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.oweStartDate \u003d date;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code OweDueDate} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withOweDueDate(Date date) {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.oweDueDate \u003d date;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code StandardInterest} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withStandardInterest(StandardInterest interest) {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.standardInterest \u003d interest;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code LateInterest} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withLateInterest(LateInterest interest) {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.lateInterest \u003d interest;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code Runner} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PersonBuilder withRunner(Runner runner) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.runner \u003d runner;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code customers} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withCustomers(List\u003cPerson\u003e customers) {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.customers \u003d customers;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Constructs a Person"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Constructs a Customer"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public Customer buildCustomer() {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return new Customer(name, phone, email, address, tags, moneyBorrowed,"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                oweStartDate, oweDueDate, standardInterest, lateInterest, runner);"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Runner buildRunner() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new Runner(name, phone, email, address, tags, customers);"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "###### \\java\\systemtests\\AssignCommandSystemTest.java"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class AssignCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private static final String MESSAGE_INVALID_ASSIGN_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* ----------------- Performing assign operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* Case: assign first person in the list to sixth person in the list, command with leading spaces and"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        trailing spaces -\u003e sixth person (customer) assigned to first person (runner)*/"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_assignOneCustomerToOneRunnerWithExtraWhiteSpaces_success() throws Exception {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Model expectedModel \u003d getModel(); //data is from TypicalPersons.java"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String command \u003d \"     \" + AssignCommand.COMMAND_WORD + \"      \" + INDEX_SIXTH_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + PREFIX_CUSTOMERS + \" \" + INDEX_FIRST_PERSON.getOneBased();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //get runner"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person runner \u003d expectedModel.getFilteredPersonList().get(INDEX_SIXTH_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Index[] customerIndexes \u003d {INDEX_FIRST_PERSON};"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //get customers"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Index index : customerIndexes) {"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person customer \u003d expectedModel.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers.add(customer);"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //build editedRunner (assigned with customers)"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedRunner \u003d new PersonBuilder(runner).withCustomers(customers).buildRunner();"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //update expected model"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updatePerson(runner, editedRunner);"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //build editedCustomers (assigned with runner)"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e editedCustomers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Person c : customers) {"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedCustomer \u003d new PersonBuilder(c).withRunner((Runner) runner).buildCustomer();"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            editedCustomers.add(editedCustomer);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            expectedModel.updatePerson(c, editedCustomer);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_ASSIGN_PERSON_SUCCESS, editedRunner);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\systemtests\\FindCommandSystemTest.java"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "         */"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //TODO: implement test cases for specifiers: -n -p -e -a -t"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //ModelHelper.setFilteredList()"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //refer to TypicalPersons.java and test.data.sandbox.sampleData.xml for fields to check"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-------------INVALID CASES---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find address of person in address book -\u003e 3 persons found */"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL, GEORGE);"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find email of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 6 persons found */"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL, ELLE, FIONA, GEORGE);"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 365,
      "melvintzw": 199
    }
  },
  {
    "path": "collated/test/zhangriqi.md",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "# zhangriqi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\commons\\util\\AppUtilTest.java"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/loanshark_logo.png\"));"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\AddCommandTest.java"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\commands\\LocateCommandTest.java"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class LocateCommandTest {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LocateCommand locateFirstCommand \u003d new LocateCommand(firstPredicate);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LocateCommand locateSecondCommand \u003d new LocateCommand(secondPredicate);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(locateFirstCommand.equals(locateFirstCommand));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(locateFirstCommand.equals(1));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(locateFirstCommand.equals(null));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(locateFirstCommand.equals(locateSecondCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String arguments \u003d \" \";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String[] splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LocateCommand command \u003d prepareCommand(new PersonContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Parses {@code userInput} into a {@code LocateCommand}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private LocateCommand prepareCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LocateCommand command \u003d"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new LocateCommand(predicate);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Executes a {@code LocateCommand}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * the {@code AddressBook} in model remains the same after executing the {@code command}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertExecutionFailure(LocateCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String arguments \u003d \" \";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String[] splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        LocateCommand locateCommand \u003d prepareCommand(new PersonContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            locateCommand.execute();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            assertEquals(expectedMessage, ce.getMessage());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertCommandSuccess(LocateCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedAddressBook, model.getAddressBook());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseCommand_addAlias() throws Exception {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + TYPE_DESC_CUSTOMER + \" \""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseCommand_findAlias() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseCommand_selectAlias() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "###### \\java\\seedu\\address\\logic\\parser\\AddressBookParserTest.java"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "``` java"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "```"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 190,
      "melvintzw": 24
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "HuatAh! was developed by https://se-edu.github.io/docs/Team.html[Huat Ah Finance Pte Ltd]. +"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d Zhang Ruiqi"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "image::ruiqi.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "{empty}[http://github.com/zhangriqi[github]] [\u003c\u003cZhangRuiqi#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Responsibilities: UI, Commands"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d Melvin Tan"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "image::melvin.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "{empty}[http://github.com/melvintzw[github]] [\u003c\u003cmelvintzw#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Responsibilities: Model, Commands"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d Jonathan Lee"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "image::jonlee.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "{empty}[http://github.com/jonleeyz[github]] [\u003c\u003cjonleeyz#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Responsibilities: Usability, Commands"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d Choi Wi Su"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "image::wisu.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "{empty}[http://github.com/Der-Erlkonig[github]] [\u003c\u003cDer-Erlkonig#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Responsibilities: GUI, Data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 5,
      "zhangriqi": 4,
      "melvintzw": 8,
      "-": 27,
      "Der-Erlkonig": 1
    }
  },
  {
    "path": "docs/ContactUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Contact Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *Bug reports, Suggestions* : Post in our https://github.com/CS2103JAN2018-F12-B4/main/issues[issue tracker]!"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *Contributing* : We welcome https://github.com/CS2103JAN2018-F12-B4/main/pulls[pull requests]!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Follow the process described https://github.com/oss-generic/process[here]."
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 3,
      "-": 3
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d HuatAh! v1.5 - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "By: `Huat Ah Finance Ptd Ltd`      Since: `Jan 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "IntelliJ by default has Gradle and JavaFx plugins installed. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Setting up the project in your computer"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Updating documentation to match your fork"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "After forking the repo, links in the documentation will still point to the `se-edu/addressbook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/addressbook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up CI"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "When you are ready to start coding,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Architecture]]"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ".Architecture Diagram"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "* At app launch: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "* At shut down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".Class Diagram of the Logic Component"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 1)"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ".Component interactions for `delete 1` command (part 2)"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Ui]]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the UI Component"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, `BrowserPanel` etc. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Logic]]"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "[[fig-LogicClassDiagram]]"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Logic Component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".Interactions Inside the Logic Component for the `delete 1` Command"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//tag::ModelTwo[]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Model]]"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Model Component"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//end::ModelTwo[]"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Storage]]"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ".Structure of the Storage Component"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "[[Design-Commons]]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Common classes"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "Classes used by multiple components are in the `seedu.addressbook.commons` package."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo feature"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Current Implementation"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Hard for new developers to understand the template pattern."
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Just override `execute()`"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Does not involve the template pattern, easier for new developers to understand."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Saves the entire address book."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to implement."
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: May have performance issues in terms of memory usage."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Individual command knows how to undo/redo by itself."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Will use less memory (e.g. for `delete`, just save the person being deleted)."
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Include all commands."
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Might be more intuitive for the user."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "**Additional Info:** See our discussion  https://github.com/se-edu/addressbook-level4/issues/390#issuecomment-298936672[here]."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 1 (current choice):** Use separate stack for undo and redo"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::dataencryption[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d [Proposed] Data Encryption"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "_{Explain here how the data encryption feature will be implemented}_"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "// end::dataencryption[]"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "[[Implementation-Configuration]]"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//tag::FindCommandEnhancement[]"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d Find Command Enhancements"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "In the original AddressBook, the `find` command only searches through the `Name` field of the `Person`. The current implementation enables the user to search through all fields in a Person. This is bound to be useful when the user may be interested in quickly finding someone whose address or tags contains a certain word. Furthermore, the current implementation allows the user to enter certain specifier parameters to narrow down the search range, which allows more relevant results to appear to the user."
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d Basic Enhancement"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Most of the useful work done in the Find Command is done by constructing a `FindCommand` object and passing an appropriate `Predicate\u003c\u003e` as a parameter to it."
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "----"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public FindCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "----"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "In this case, the `FindCommand` object expects a `Predicate\u003cPerson\u003e` as an argument, and then uses that Predicate object in `execute()` to filter the list in the `Model`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "All that is needed now is to create an appropriate `Predicate\u003cPerson\u003e` class that checks the correct fields in a `Person` instance."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "For example, in a `PersonContainsKeywordsPredicate`, the test field is overridden as such:"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "----"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public boolean test(Person person) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String stringOfTags \u003d getStringOfTags(person);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword))"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(stringOfTags, keyword))"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword))"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword))"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "----"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "a `stream` is generated from the user-entered keywords and each keyword is checked against all the words in specific fields such as `person.getName().fullName`."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d Further Enhancement"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "The `find` command accepts a specifier, such as `-t` or `-p` as the first argument to the program to search through a specific field. `FindCommandParser` then recognises the specifers and constructs the correct `FindCommand` object with the correct `Predicate\u003cPerson\u003e`. `FindCommand.execute()` is then called, and it searches for the keywords in the correct fields according to the Predicate that was passed to it."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "These are the names of the `Predicate\u003cPerson\u003e` classes currently implemented:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** PersonContainsKeywordsPredicate"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** NameContainsKeywordsPredicate"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** AddressContainsKeywordsPredicate"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** EmailContainsKeywordsPredicate"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** PhoneContainsKeywordsPredicate"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** TagsContainsKeywordsPredicate"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "In order to implement this further enhancement, we have to modify `FindCommandParser` to recognize the specifier and then to construct the correct `FindCommand` object. The code is shown below."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "----"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " String[] arguments \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String[] keywords;"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //check arguments[0] for specifier"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (arguments[0].matches(\"\\\\p{Alnum}+.++\")) {"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(arguments)));"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        switch (arguments[0]) {"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-all\":"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-n\":"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-p\":"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-e\":"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-a\":"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-t\":"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new TagsContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "----"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "The first if-block captures the case for no specifiers, while the switch-case block captures the case for valid specifiers and throws an exception when the specifier is invalid."
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "The rationale for improving the `find` command is the fact that users of an application containing contact data would like to be able to search for a contact easily using keywords."
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "It was important to make sure that the `find` command would search through fields other than the Name of the Person, as relevant information may be contained in other fields."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "It was also important to be able to specify the field the user was interested in searching as this would increase the relevance of search results or reduce the occurence of irrelevant results. For example, if I searched \"Baker\" and there was a contact whose address was \"Baker Street\" and there was another contact who had been tagged as \"Baker\" I would receive two search results. But if I wanted to only view contacts who had been _tagged_ as \"Baker\", then I need only enter the specifier `-t` to increase the relevance of the results. This becomes more important as the size of the addressbook gets larger. Having more relevant results also increases the speed at which a user can use the application."
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//end::FindCommandEnhancement[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author zhangriqi"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//tag::locatecommand[]"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d Locate on Google Map"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "The `locate` command accepts a specifier, such as `-t` or `-p` as the first argument to the program to search through a specific field. `LocateCommandParser` then recognises the specifers and constructs the correct `LocateCommand` object with the correct `Predicate\u003cPerson\u003e`. `LocateCommand.execute()` is then called, and it searches for the keywords in the correct fields according to the Predicate that was passed to it."
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "Then it gets the address of the person specified by the parameter and pass it to the method loadUrl in browerPanel in MainWindow. The user can use \u0027locate\u0027 / \u0027lo\u0027 command with a specifier as the parameter to locate a person on google map."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "`LocateCommand` relies on `LocateRequestEvent` which is handled by `BrowserPanel` to call the appropriate method for loading `Person` address using Google Map."
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "The current implementation enables the user to search through all fields in a Person. If there\u0027re more than one person with the same specifier passed in by the user, it automatically locates the address of the person on top of the filteredList and ask the user to be more specific given the filtered list."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "`locate` will locate the first person on the filtered list and present a message for the user to select one from the listed persons."
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "For example, `locate` a person without address will return a red error message."
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "image::locate1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "Locate command is implemented this way:"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "The sequence diagram for locate command is presented below:"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "image::locateSequencediagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "----"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "public LocateCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "----"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "With loadUrl, the Google Map url is passed to \u0027BrowserPanel\u0027to display the location indicated by the index in BrowserPanel."
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "----"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            Person location \u003d lastShownList.get(target);"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            // Open Google Map on BrowserPanel"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            MainWindow.loadUrl(\"https://www.google.com.sg/maps/place/\""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + location.getAddress().toString());"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            EventsCenter.getInstance().post(new LocateRequestEvent(target));"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            if (model.getFilteredPersonList().size() \u003e 1) {"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_LOCATE_SELECT, targetOne));"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_LOCATE_SUCCESS, targetOne));"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "----"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "As we can see from the picture below, once the command is executed, the location is presented on Google Map is loaded in the BrowserPanel."
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "image::locate2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "The rationale for implementing the `locate` command is that there\u0027s actual need of the users to find a person as easily as possible while using this application. By locating the person on Google Map in this application, the user can directly see the location of a person instead of a simple line of address that\u0027s not so useful."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "It was important to make sure that the `locate` command would use parameters other than the Index, as relevant information may be more easily to be obtained."
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//end::locatecommand[]"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author zhangriqi"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//tag::alias[]"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d Add Command Alias Enhancement"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "In the original enhancement, all the command must be in full text to be considered as a valid command."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "----"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "public class AddCommand extends UndoableCommand implements PopulatableCommand {"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"i\";"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            requireNonNull(model);"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                model.addPerson(toAdd);"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "----"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "The alias command for all other commands will follow a similar implementation."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "This feature is implemented to allow a user to enter a command without specifying the entire word of the command."
      },
      {
        "lineNumber": 590,
        "content": "//@@author"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//end::alias[]"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::tagcolours[]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Tag Colours Enhancement"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "In the original AddressBook, all tags were of the same colour, irrespective of the `Person` they were tagged to or the content of the tag. Users were able to visually identify the tags a `Person` is associated with by the textual content of each tag. The current implementation enables colours for tags and tags with the same textual content will consistently bear the same colour. This is substantially more useful than the previous application as users are able to visually identify multiple `Person` objects with the same tag with much more ease. Also, users can now more easily compare and contrast the tags that two distinct `Person` objects are associated with."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Basic Enhancement"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The colours for the tags are first created in `resources/main/view/DarkTheme.css`."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The textual representations of the colours are then initialised and placed into a `String[]`."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "private static final String[] TAG_COLOUR_STYLES \u003d"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\t{ \"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\" };"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "A helper method is then created to return a specific tag colour style given a `String` input. The `hashcode()` method of each `String` is utilised in this method to ensure that the colour assigned is **consistently random**: equivalent `Strings` will receive identical colours while different `Strings` will receive \"random\" colours that will be in most cases distinct. This behaviour is consistent over repeated runs of the Application."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "private String getTagColourStyleFor(String tagName) {"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    return TAG_COLOUR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOUR_STYLES.length];"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "All that remains to be done is to implement a new method to initialise all tags of a Person object with the appropriate colours. This method calls the above helper method, utilising it to associate each tag with a appropriate colour based on its `String` content."
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "private void initTags(Person person) {"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        tagLabel.getStyleClass().add(getTagColourStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        tagLabel.getStyleClass().add(getTagColourStyleFor(tag.tagName));"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     });"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Further Enhancement"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This enhancement can be taken steps further in the coming weeks by assigning certain set colours to certain tags instead of using the `hashCode()` method to assign colours."
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This would be useful in the content of our Application as it is important for the User to discern between `Runners` and `Customers`, and to be able to tell at a glance whether and what actions need to be taken or assigned to respective `Customers` or `Runners`."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The rationale for adding tag colours stems from two facts: firstly, that in the context of this Application, tags are used to categorise, group and distinguish between `Person` objects and that secondly, colours are an excellent way to visually and manually group and distinguish between groups of objects."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "As a result, implementing tag colours utilises these two facts in tandom to make it significantly easier for the User to group different `Persons` and in combination with our newly implement `find` command, which enables wide sweeping, flexible search and filtering functionality, these tag colours add much value to the searching and filtering user experience."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "These tag colours will be significantly more useful with the further enhancement mentioned above and hence, this basic enhancement is the first step towards the finished product."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::tagcolours[]"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::keyboardshortcuts[]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Keyboard shortcuts"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "In the original AddressBook, the only keyboard shortcut that was implemented was kbd:[F1], which brought out the Help Window."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The current implementation allows the user to use many different keyboard shortcuts to speed up common tasks."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The new keyboard shortcuts either run their associated command immediately, or populate the `CommandBox` with the command\u0027s prefixes."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This way, the user just needs to fill in the appropriate arguments, saving them time on typing the prefixes."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Basic Enhancement"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "For each of the keyboard-enabled commands, an associated menu item is created for them."
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The accelerator for each menu item is then set to its respective keyboard shortcut."
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The `MainWindow.fxml` file is also updated to enable the functionality and appearance of the new menu items."
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "An event handler method is associated with each menu item, being called upon the input of the respective keyboard shortcut or upon the selection of the menu item."
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Each event handler will raise a new event, which will then be handled by the CommandBox and ResultDisplay UI elements."
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Code for `handleUndo()`:"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleUndo() {"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(\"undo\"));"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Upon the input of a valid keyboard shortcut, both the CommandBox and ResultDisplay UI elements handle the raised event in their own way."
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Both UI elements are registered as event handlers and have distinct methods to handle the two types of raised events."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "For `PopulatePrefixesRequestEvents`, the CommandBox replaces its current text with the given command and its prefixes."
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "For `ExecuteCommandRequestEvents`, the CommandBox replaces its current text with the given command and then calls `handleCommandInputChanged()` to immediately execute the command."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "For `PopulatePrefixesRequestEvents`, the ResultDisplay displays the given help information for the input command."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "For `ExecuteCommandRequestEvents`, the ResultDisplay does not directly handle the event; instead the result of the keyboard shortcut input is determined by the `CommandBox` and its associated `LogicManager`."
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Further Enhancement"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This enhancement can be taken steps further in the coming weeks by allowing kdb:[Tab] to move between generated prefixes in the `CommandBox`."
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Ideally, the user would be able to press one keyboard shortcut to populate the CommandBox, fill in the appropriate argument for the first prefix, press kbd:[Tab] to move past the next prefix to the correct input position."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This way, the user would be able to focus on just on the input of the salient parameters instead of worrying about the syntax of the command."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Also, it would be possible to implement a confirmation dialog that could come up should the user want to make many changes at once;"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "for instance, clearing the database, or tagging multiple people at once, or deleting multiple people at once."
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "It is important for the application to ensure that the user does indeed want to carry out the task at hand should it result in widespread and lasting changes to the database."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The rationale for implementing these keyboard shortcuts using menu items and accelerators is twofold."
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Firstly, adding the menu items to the already present menu UI element makes the application look more professional."
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Secondly, making use of accelerators allows the keyboard shortcuts to be functional even when the CommandBox is not focused."
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This is expected behaviour by the user."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "On the other hand, if the keyboard shortcuts were instead implemented at the CommandBox level, they would only be functional when the focus is on the CommandBox (eg. when the user _clicks_ on the CommandBox, not ideal)."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "It would be difficult for the CommandBox to raise events and have them be handled by the ResultDisplay UI element as well, as in the current implementation, there is no interaction between the `CommandBox` and `ResultDisplay` unless a command is input."
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This would have posed problems when implementing the keyboard shortcuts that populate the CommandBox but do not run the command."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Limitation: when the focus is on the BrowserPanel UI element, the implemented keyboard shortcuts do not work as a user would expect them to."
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This is a limitation of the BrowserPanel UI element."
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::keyboardshortcuts[]"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "//@@author Der-Erlkonig"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "// tag::BrowserPanel[]"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d\u003d BrowserPanel Enhancement"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "In the original AddressBook, the BrowserPanel displayed a dummy page when a Person was selected. A more useful implementation shows some more important details of the `Runner` or `Customer`."
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "These are important fields for a loan shark manager to get a quick grasp of a customer\u0027s details, as well as who the runners are in charge of."
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d\u003d\u003d Enhancement"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "`SelectCommand` manages the displaying of a Person\u0027s details."
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "The `loadPersonPage` method in `BrowserPanel` has been modified to show the details of a Person, rather than a dummy page, as outlined below:"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "----"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            String personfilepath;"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            if (person instanceof Customer) {"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                htmlWriter \u003d new HtmlWriter((Customer) person);"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                personfilepath \u003d htmlWriter.writeCustomer();"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            } else if (person instanceof Runner) {"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                htmlWriter \u003d new HtmlWriter((Runner) person);"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                personfilepath \u003d htmlWriter.writeRunner();"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                personfilepath \u003d \"\";"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            }"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            loadPage(\"file:///\" + personfilepath);"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "----"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "A `Person` will be passed into a `HtmlWriter` and"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "depending on whether the selected `Person` is a `Runner` or `Customer`, the respective HTML file with the desired fields are generated."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "A HtmlWriter gathers data on the particular Person using the getter methods available in the Customer and Runner classes."
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "Both `Customer` and `Runner` will have the fields: name, phone, email, address."
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "Fields exclusively for the `Customer` are: amount borrowed, amount owed, due date, and runner assigned."
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "image::BrowserPanelCustomer.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "Fields exclusively for the `Runner` are: a list of customers assigned to the specified runner."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "image::BrowserPanelRunner.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "The BrowserPanel then displays this HTML file."
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "The background and font colors are matched to the HuatAh! application."
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "A customer\u0027s amount owed and due dates are very important variables which directly affect the PnL of the loan shark boss\u0027 enterprise."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "Being able to view a runner\u0027s list of assigned customers is important for managing human resource."
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "Therefore, this feature is suitable, and definitely desirable from the perspective of a loan shark boss."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "The following methods of implementations were considered."
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "* **Alternative 1 (current choice):** Write the data to a .html file and use the current implementation of `loadPersonPage`."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Pros: Does not interfere with the implementation of `LocateCommand`, default page which shows keyboard shortcuts (also in .html)"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Cons: May not be the most native."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "* **Alternative 2:** Use `HistoryManager` for undo/redo"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Pros: More secure as details are kept within the app."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Cons: Will require a new implementation of the whole BrowserPanel,"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "will not be compatible with the above implementation `LocateCommand`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "and the default page which shows keyboard shortcuts."
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "// end::BrowserPanel[]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@melvintzw"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//tag::ModelTwoImplementation[]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d New Model"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d Modelling"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ".The Model class diagram illustrates the new Runner and Customer classes and the fields they contain."
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "a Runner class and a Customer class were created to allow our app to manage operations on subtypes of Person and to encapsulate the data belonging to these different types of persons. These are located in the *Model* package."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d Saving the new objects into XML"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "In order to _save_ these new objects into the XML data file, a modification was made to the `XmlAdaptedPerson.java` file in the *Storage* package. This is shown in the code snippet below."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        personType \u003d source.getType();"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (source instanceof Customer) {"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            moneyBorrowed \u003d ((Customer) source).getMoneyBorrowed();"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            standardInterest \u003d ((Customer) source).getStandardInterest();"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            lateInterest \u003d ((Customer) source).getLateInterest();"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            oweStartDate \u003d ((Customer) source).getOweStartDate();"
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            oweDueDate \u003d ((Customer) source).getOweDueDate();"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runner \u003d new XmlAdaptedPerson(((Customer) source).getRunner());"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (source instanceof Runner) {"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            for (Person person : ((Runner) source).getCustomers()) {"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                customers.add(new XmlAdaptedPerson(person));"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "```"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d Loading the new objects from an XML file."
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "In order to be able to _load_ the data of Customers and Runners from the XML file into the application, the `XmlAdaptedPerson.toModelType()` method required modifications as well. The code snippet is long and is thus not shown."
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d Viewing the new types through the GUI"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "In order to view the new types on the GUI, two enhancements were implemented. 1. Display the type as *text* on the PersonCard. 2. Change the *background colour* of the PersonCard according to the person type."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "1. Was done by editing the PersonCard.java to have a new @FXML`Label` called personType, and calling the `Person.getType()` method then `setText()`. The FXML file PersonListCard.fxml has to be updated with a new line containing the label id personType."
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "2. Was done by editing PersonListPanel.java\u0027s `updateItem()` method. The setStyle() method with appropriate arguments was called depending on whether the person was `instanceof Customer` or `instanceof Runner`. Appropriate changes were made in the DarkTheme.css file located in _resources/view_ as well to facilitate this change (removing the list-cell:filled:even and list-cell:filled:odd styles, setting appropriate border thickness and colours for list-cell and #cardPane etc...)"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "The result is as such:"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "image::PersonListPanel.PNG[width\u003d\"600\"]"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//end::ModelTwoImplementation[]"
      },
      {
        "lineNumber": 828,
        "content": "//@@author"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::home[]"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Home View Enhancement"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "In the original AddressBook, there was no real way to clear the CommandBox or ResultDisplay without entering a new"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "command. The current implementation allows the User to press kbd:[F1] to return to the \"home\" view, where the"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "ResultDisplay and BrowserPanel display helpful information to the User, while the CommandBox is emptied and focused"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "so that the User may immediately start typing into the CommandBox."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Basic Enhancement"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This home \"command\" is implemented in the same way as the other \u003c\u003ckeyboardshortcuts, keyboard shortcuts\u003e\u003e but it does not have a corresponding text"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "command. It is only associated with its menu item and upon keypress, will raise a HomeRequestEvent that will be handled"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "by the CommandBox, ResultDisplay and BrowserPanel UI elements."
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Code for `handleHome()`:"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "@FXML"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHome() {"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new HomeRequestEvent(\"undo\"));"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The CommandBox handles the HomeRequestEvent by clearing all its text and requesting focus."
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        replaceText(\"\");"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The ResultDisplay handles the HomeRequestEvent by replacing its existing text with an informative message that tells"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "the User how to get more detailed information about the commands should they need it."
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setStyleToIndicateCommandSuccess();"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            displayed.setValue(event.MESSAGE_HOME);"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The BrowserPanel handles the HomeRequestEvent by loading its defauly page, which shows all available commands and their"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "associated keyboard shortcuts and aliases."
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Further Enhancement"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This enhancement can be taken steps further by fine-tuning the message and page displayed in the ResultDisplay and"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "BrowserPanel to be more informative or actionable."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Also, this enhancement could be more useful if the PersonListPanel were to update to the state before the previous"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "command was executed."
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Implementation rationale follows from the \u003c\u003ckeyboardshortcuts, Keyboard Shortcuts\u003e\u003e enhancement as both enhancements"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "are implemented similarly."
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::home[]"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::navigationshortcuts[]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Navigation Shortcuts"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Upon the implementation of the \u003c\u003ckeyboardshortcuts, keyboard shortcuts\u003e\u003e that populate the CommandBox, sometimes with"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "many prefixes, it became important to have an efficient method of navigating amongst the populated prefixes and possibly"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "their associated values. The implementation of this enhancement allows the User to press the kbd:[Tab] or"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "kbd:[Shift+Tab] keys to navigate back and forth between different prefixes and their values. Also, pressing"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "kbd:[Shift+Backspace] allows the User to immediately delete the field or prefix that the CommandBox cursor is currently"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "positioned on. The combination of these navigation shortcuts along with the other keyboard shortcuts allows the User to"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "quickly and efficiently populate the CommandBox with all prefixes, delete those that are not relevant and then be able"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "to focus on just the input of the salient parameters before executing the Command."
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Basic Enhancement"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "These three navigation keyboard shortcuts were implemented differently from the other"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003ckeyboardshortcuts, keyboard shortcuts\u003e\u003e. Instead of each shortcut being an accelerator that actives a menu item,"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "these three shortcuts are handled directly by the CommandBox TextField."
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "If the CommandBox detects that kbd:[Tab], kbd:[Shift+Tab] or kbd:[Shift+Backspace] are pressed, it will call the"
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "appropriate method."
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Code for `handleKeyPress()`:"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (keyEvent.isShiftDown()) {"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                moveToPreviousPrefix();"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                moveToNextPrefix();"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case BACK_SPACE:"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (keyEvent.isShiftDown()) {"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                clearCurrentFieldOrPrefix();"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The three helper methods, `moveToPreviousPrefix()`, `moveToNextPrefix()` and `clearCurrentFieldOrPrefix()`, call"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "associated helper methods to achieve their functionality. The respective helper methods then work by executing a series"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "of logical checks for whitespace, the `:` operator and other cases."
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "As an example, the code for `moveToNextPrefix()` and its helper method `getNextPrefixPosition()` can be seen below:"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void moveToNextPrefix() {"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int currentCaretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int newCaretPosition \u003d getNextPrefixPosition(currentCaretPosition);"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.positionCaret(newCaretPosition);"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private int getNextPrefixPosition(int currentCaretPosition) {"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // find next prefix position"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int nextPrefixPosition \u003d commandTextField.getText().indexOf(\":\", currentCaretPosition);"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int newCaretPosition;"
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // set new caret position to be in front of chosen prefix. If prefix not found, then set at last index."
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (nextPrefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            newCaretPosition \u003d nextPrefixPosition + 1;"
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // check for space in front of last prefix. If present, move forward one more index."
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (commandTextField.getText().substring(newCaretPosition, newCaretPosition + 1).equals(\" \")) {"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                newCaretPosition +\u003d 1;"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            newCaretPosition \u003d commandTextField.getText().length();"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return newCaretPosition;"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "----"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Further Enhancement"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "This enhancement can be taken steps further in the coming weeks by ensuring that the navigation shortcuts pick out only"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "the accepted prefixes instead of just any character sequence with a `:` following directly after."
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The behaviour of kbd:[Shift+Backspace] also could be fine-tuned more to improve usability."
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d Rationale"
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The main rationale for implementing these navigation shortcuts by handling it at the CommandBox UI element level instead of"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "using menu items and accelerators similar to the other shortcuts is simply that using accelerators allow the keyboard shortcuts"
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "to be used through the application, even when focus is not on the CommandBox. However, this additional functionality is"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "not required for these navigation shortcuts as the User will only be wanting to navigate throughout the CommandBox when"
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "he is typing or when he has just populated the CommandBox with a command template."
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "As a result, implementing this enhancement using accelerators and menu items offers unneeded functionality and results"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "in unnecessary abstraction."
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::navigationshortcuts[]"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "-"
        },
        "content": ".Saving documentation as PDF files in Chrome"
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "-"
        },
        "content": "[[Testing]]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Coverage Reporting"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Documentation Previews"
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming]]"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Suggested Programming Tasks to Get Started"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": "Suggested path for new programmers:"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "1. First, add small local-impact (i.e. the impact of the change does not go beyond the component) enhancements to one component at a time. Some suggestions are given in \u003c\u003cGetStartedProgramming-EachComponent\u003e\u003e."
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": "2. Next, add a feature that touches multiple components to learn how to implement an end-to-end feature across all components. \u003c\u003cGetStartedProgramming-RemarkCommand\u003e\u003e explains how to go about adding such a feature."
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-EachComponent]]"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Improving each component"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "-"
        },
        "content": "Each individual exercise in this section is component-based (i.e. you would not need to modify the other components to get it to work)."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Logic` component"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `logic`. During dog-fooding, your team realize that it is troublesome for the user to type the whole command in order to execute a command. Your team devise some strategies to help cut down the amount of typing necessary, and one of the suggestions was to implement aliases for the command words. Your job is to implement such aliases."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Logic\u003e\u003e before attempting to modify the `Logic` component."
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a shorthand equivalent alias for each of the individual commands. For example, besides typing `clear`, the user can also type `c` to remove all persons in the list."
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "-"
        },
        "content": "** Just like we store each individual command word constant `COMMAND_WORD` inside `*Command.java` (e.g.  link:{repoURL}/src/main/java/seedu/address/logic/commands/FindCommand.java[`FindCommand#COMMAND_WORD`], link:{repoURL}/src/main/java/seedu/address/logic/commands/DeleteCommand.java[`DeleteCommand#COMMAND_WORD`]), you need a new constant for aliases as well (e.g. `FindCommand#COMMAND_ALIAS`)."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] is responsible for analyzing command words."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the switch statement in link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser#parseCommand(String)`] such that both the proper command word and alias can be used to execute the same intended command."
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the aliases that you have added."
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "-"
        },
        "content": "** Update the user guide to document the new aliases."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/785[PR] for the full solution."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Model` component"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `model`. One day, the `logic`-in-charge approaches you for help. He wants to implement a command such that the user is able to remove a particular tag from everyone in the address book, but the model API does not support such a functionality at the moment. Your job is to implement an API method, so that your teammate can use your API to implement his command."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Model\u003e\u003e before attempting to modify the `Model` component."
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `removeTag(Tag)` method. The specified tag will be removed from everyone in the address book."
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "-"
        },
        "content": "** The link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model`] and the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] API need to be updated."
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "-"
        },
        "content": "** Think about how you can use SLAP to design the method. Where should we place the main logic of deleting tags?"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "-"
        },
        "content": "**  Find out which of the existing API methods in  link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] classes can be used to implement the tag removal logic. link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`] allows you to update a person, and link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] allows you to update the tags."
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement a `removeTag(Tag)` method in link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. Loop through each person, and remove the `tag` from each person."
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "-"
        },
        "content": "** Add a new API method `deleteTag(Tag)` in link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`]. Your link:{repoURL}/src/main/java/seedu/address/model/ModelManager.java[`ModelManager`] should call `AddressBook#removeTag(Tag)`."
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "-"
        },
        "content": "** Add new tests for each of the new public methods that you have added."
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/790[PR] for the full solution."
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "-"
        },
        "content": "*** The current codebase has a flaw in tags management. Tags no longer in use by anyone may still exist on the link:{repoURL}/src/main/java/seedu/address/model/AddressBook.java[`AddressBook`]. This may cause some tests to fail. See issue  https://github.com/se-edu/addressbook-level4/issues/753[`#753`] for more information about this flaw."
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "-"
        },
        "content": "*** The solution PR has a temporary fix for the flaw mentioned above in its first commit."
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Ui` component"
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `ui`. During a beta testing session, your team is observing how the users use your address book application. You realize that one of the users occasionally tries to delete non-existent tags from a contact, because the tags all look the same visually, and the user got confused. Another user made a typing mistake in his command, but did not realize he had done so because the error message wasn\u0027t prominent enough. A third user keeps scrolling down the list, because he keeps forgetting the index of the last person in the list. Your job is to implement improvements to the UI to solve all these problems."
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Ui\u003e\u003e before attempting to modify the `UI` component."
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "-"
        },
        "content": ". Use different colors for different tags inside person cards. For example, `friends` tags can be all in brown, and `colleagues` tags can be all in yellow."
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-before.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-tag-after.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "-"
        },
        "content": "** The tag labels are created inside link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[the `PersonCard` constructor] (`new Label(tag.tagName)`). https://docs.oracle.com/javase/8/javafx/api/javafx/scene/control/Label.html[JavaFX\u0027s `Label` class] allows you to modify the style of each Label, such as changing its color."
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "-"
        },
        "content": "** Use the .css attribute `-fx-background-color` to add a color."
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "-"
        },
        "content": "** You may wish to modify link:{repoURL}/src/main/resources/view/DarkTheme.css[`DarkTheme.css`] to include some pre-defined colors using css, especially if you have experience with web-based css."
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "-"
        },
        "content": "** You can modify the existing test methods for `PersonCard` \u0027s to include testing the tag\u0027s color as well."
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/798[PR] for the full solution."
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "-"
        },
        "content": "*** The PR uses the hash code of the tag names to generate a color. This is deliberately designed to ensure consistent colors each time the application runs. You may wish to expand on this design to include additional features, such as allowing users to set their own tag colors, and directly saving the colors to storage, so that tags retain their colors even if the hash code algorithm changes."
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] such that link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] can show a different style on error (currently it shows the same regardless of errors)."
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-before.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-result-after.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] is raised by link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] which also knows whether the result is a success or failure, and is caught by link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay`] which is where we want to change the style to."
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "-"
        },
        "content": "** Refer to link:{repoURL}/src/main/java/seedu/address/ui/CommandBox.java[`CommandBox`] for an example on how to display an error."
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java[`NewResultAvailableEvent`] \u0027s constructor so that users of the event can indicate whether an error has occurred."
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify link:{repoURL}/src/main/java/seedu/address/ui/ResultDisplay.java[`ResultDisplay#handleNewResultAvailableEvent(NewResultAvailableEvent)`] to react to this event appropriately."
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "-"
        },
        "content": "** You can write two different kinds of tests to ensure that the functionality works:"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "-"
        },
        "content": "*** The unit tests for `ResultDisplay` can be modified to include verification of the color."
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "-"
        },
        "content": "*** The system tests link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest#assertCommandBoxShowsDefaultStyle() and AddressBookSystemTest#assertCommandBoxShowsErrorStyle()`] to include verification for `ResultDisplay` as well."
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/799[PR] for the full solution."
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "-"
        },
        "content": "*** Do read the commits one at a time if you feel overwhelmed."
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify the link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to show the total number of people in the address book."
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "-"
        },
        "content": "**Before**"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-before.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "-"
        },
        "content": "**After**"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "-"
        },
        "content": "image::getting-started-ui-status-after.png[width\u003d\"500\"]"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "-"
        },
        "content": "* Hints"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/resources/view/StatusBarFooter.fxml[`StatusBarFooter.fxml`] will need a new `StatusBar`. Be sure to set the `GridPane.columnIndex` properly for each `StatusBar` to avoid misalignment!"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "-"
        },
        "content": "** link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] needs to initialize the status bar on application start, and to update it accordingly whenever the address book is updated."
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "-"
        },
        "content": "** Modify the constructor of link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter`] to take in the number of persons when the application just started."
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "-"
        },
        "content": "** Use link:{repoURL}/src/main/java/seedu/address/ui/StatusBarFooter.java[`StatusBarFooter#handleAddressBookChangedEvent(AddressBookChangedEvent)`] to update the number of persons whenever there are new changes to the addressbook."
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "-"
        },
        "content": "** For tests, modify link:{repoURL}/src/test/java/guitests/guihandles/StatusBarFooterHandle.java[`StatusBarFooterHandle`] by adding a state-saving functionality for the total number of people status, just like what we did for save location and sync status."
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "-"
        },
        "content": "** For system tests, modify link:{repoURL}/src/test/java/systemtests/AddressBookSystemTest.java[`AddressBookSystemTest`] to also verify the new total number of persons status bar."
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/803[PR] for the full solution."
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d `Storage` component"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are in charge of `storage`. For your next project milestone, your team plans to implement a new feature of saving the address book to the cloud. However, the current implementation of the application constantly saves the address book after the execution of each command, which is not ideal if the user is working on limited internet connection. Your team decided that the application should instead save the changes to a temporary local backup file first, and only upload to the cloud after the user closes the application. Your job is to implement a backup API for the address book storage."
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "-"
        },
        "content": "Do take a look at \u003c\u003cDesign-Storage\u003e\u003e before attempting to modify the `Storage` component."
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `backupAddressBook(ReadOnlyAddressBook)`, so that the address book can be saved in a fixed temporary location."
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "-"
        },
        "content": "* Hint"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "-"
        },
        "content": "** Add the API method in link:{repoURL}/src/main/java/seedu/address/storage/AddressBookStorage.java[`AddressBookStorage`] interface."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "-"
        },
        "content": "** Implement the logic in link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager`] and link:{repoURL}/src/main/java/seedu/address/storage/XmlAddressBookStorage.java[`XmlAddressBookStorage`] class."
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution"
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "-"
        },
        "content": "** See this https://github.com/se-edu/addressbook-level4/pull/594[PR] for the full solution."
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "-"
        },
        "content": "[[GetStartedProgramming-RemarkCommand]]"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Creating a new command: `remark`"
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "-"
        },
        "content": "By creating this command, you will get a chance to learn how to implement a feature end-to-end, touching all major components of the app."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "-"
        },
        "content": "*Scenario:* You are a software maintainer for `addressbook`, as the former developer team has moved on to new projects. The current users of your application have a list of new feature requests that they hope the software will eventually have. The most popular request is to allow adding additional comments/notes about a particular contact, by providing a flexible `remark` field for each contact, rather than relying on tags alone. After designing the specification for the `remark` command, you are convinced that this feature is worth implementing. Your job is to implement the `remark` command."
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for a person specified in the `INDEX`. +"
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `remark INDEX r/[REMARK]`"
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "-"
        },
        "content": "Edits the remark for the first person to `Likes to drink coffee.`"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "-"
        },
        "content": "* `remark 1 r/` +"
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "-"
        },
        "content": "Removes the remark for the first person."
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Step-by-step Instructions"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 1] Logic: Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s start by teaching the application how to parse a `remark` command. We will add the logic of `remark` later."
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `RemarkCommand` that extends link:{repoURL}/src/main/java/seedu/address/logic/commands/UndoableCommand.java[`UndoableCommand`]. Upon execution, it should just throw an `Exception`."
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to accept a `RemarkCommand`."
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandTest` that tests that `executeUndoableCommand()` throws an Exception."
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "-"
        },
        "content": ". Add new test method to link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`], which tests that typing \"remark\" returns an instance of `RemarkCommand`."
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 2] Logic: Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s teach the application to parse arguments that our `remark` command will accept. E.g. `1 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to take in an `Index` and `String` and print those two parameters as the error message."
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParser` that knows how to parse two arguments, one index and one with prefix \u0027r/\u0027."
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/logic/parser/AddressBookParser.java[`AddressBookParser`] to use the newly implemented `RemarkCommandParser`."
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommandTest` to test the `RemarkCommand#equals()` method."
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `RemarkCommandParserTest` that tests different boundary values"
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "for `RemarkCommandParser`."
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/logic/parser/AddressBookParserTest.java[`AddressBookParserTest`] to test that the correct command is generated according to the user input."
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 3] Ui: Add a placeholder for remark in `PersonCard`"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "-"
        },
        "content": "Let\u0027s add a placeholder on all our link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] s to display a remark for each person later."
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a `Label` with any random text inside link:{repoURL}/src/main/resources/view/PersonListCard.fxml[`PersonListCard.fxml`]."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "-"
        },
        "content": ". Add FXML annotation in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] to tie the variable to the actual label."
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/guitests/guihandles/PersonCardHandle.java[`PersonCardHandle`] so that future tests can read the contents of the remark label."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 4] Model: Add `Remark` class"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "We have to properly encapsulate the remark in our link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`] class. Instead of just using a `String`, let\u0027s follow the conventional class structure that the codebase already uses by adding a `Remark` class."
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `Remark` to model component (you can copy from link:{repoURL}/src/main/java/seedu/address/model/person/Address.java[`Address`], remove the regex and change the names accordingly)."
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify `RemarkCommand` to now take in a `Remark` instead of a `String`."
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": ". Add test for `Remark`, to test the `Remark#equals()` method."
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 5] Model: Modify `Person` to support a `Remark` field"
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "Now we have the `Remark` class, we need to actually use it inside link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": ". Add `getRemark()` in link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ". You may assume that the user will not be able to use the `add` and `edit` commands to modify the remarks field (i.e. the person will be created without a remark)."
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/model/util/SampleDataUtil.java/[`SampleDataUtil`] to add remarks for the sample data (delete your `addressBook.xml` so that the application will load the sample data when you launch it.)"
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6] Storage: Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "We now have `Remark` s for `Person` s, but they will be gone when we exit the application. Let\u0027s modify link:{repoURL}/src/main/java/seedu/address/storage/XmlAdaptedPerson.java[`XmlAdaptedPerson`] to include a `Remark` field so that it will be saved."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new Xml field for `Remark`."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ". Fix `invalidAndValidPersonAddressBook.xml`, `typicalPersonsAddressBook.xml`, `validAddressBook.xml` etc., such that the XML tests will not fail due to a missing `\u003cremark\u003e` element."
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 6b] Test: Add withRemark() for `PersonBuilder`"
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "Since `Person` can now have a `Remark`, we should add a helper method to link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`], so that users are able to create remarks when building a link:{repoURL}/src/main/java/seedu/address/model/person/Person.java[`Person`]."
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": ". Add a new method `withRemark()` for link:{repoURL}/src/test/java/seedu/address/testutil/PersonBuilder.java[`PersonBuilder`]. This method will create a new `Remark` for the person that it is currently building."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ". Try and use the method on any sample `Person` in link:{repoURL}/src/test/java/seedu/address/testutil/TypicalPersons.java[`TypicalPersons`]."
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 7] Ui: Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": "Our remark label in link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`] is still a placeholder. Let\u0027s bring it to life by binding it with the actual `remark` field."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/main/java/seedu/address/ui/PersonCard.java[`PersonCard`]\u0027s constructor to bind the `Remark` field to the `Person` \u0027s remark."
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": ". Modify link:{repoURL}/src/test/java/seedu/address/ui/testutil/GuiTestAssert.java[`GuiTestAssert#assertCardDisplaysPerson(...)`] so that it will compare the now-functioning remark label."
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d\u003d [Step 8] Logic: Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": "We now have everything set up... but we still can\u0027t modify the remarks. Let\u0027s finish it up by adding in actual logic for our `remark` command."
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "**Main:**"
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": ". Replace the logic in `RemarkCommand#execute()` (that currently just throws an `Exception`), with the actual logic to modify the remarks of a person."
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "**Tests:**"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ". Update `RemarkCommandTest` to test that the `execute()` logic works."
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Full Solution"
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": "See this https://github.com/se-edu/addressbook-level4/pull/599[PR] for the step-by-step solution."
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Scope"
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": "*Target user profile*:"
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Loan Shark Bosses"
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Need to manage a significant number of contacts (customers and runners)."
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Prefer desktop apps over other types since he will be operating the syndicate from his den / headquarters and not out in the field."
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Can type fast as he is tech-savvy and is comfortable with using technology to manage data and streamline his workflow."
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Prefer typing over mouse mouse input as he has fast fingers."
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Is reasonable comfortable using CLI apps."
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Value proposition*:"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* Manage the operations of the loan shark syndicate substantially more efficiently and quickly than a typical mouse / GUI-driven app. The Application features keyboard shortcuts and quick commands."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Untapped market potential."
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* Integrated with map to aid in decisions to do with geographic proximity"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*Feature Contribution:*"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "~Zhang Rui Qi~"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "Major: Implementation of `Locate` command to bring up address of target on Google Maps."
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Minor: Addition of command aliases to improve speed of using CLI."
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "~Melvin Tan~"
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Major: Implementation of the model and all related components to enable the use of attributes and functionality related to two subclasses of Person: Customer and Runner."
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Minor: Enhancement to `Find` command to improve searching."
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "~Jonathan Lee~"
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Major: Speed up User workflow using keyboard shortcuts and other input enhancements."
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Minor: Implemented usability improvements by differentiating tag colours and adding context menu elements."
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "~Choi Wi Su~"
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Major: Implement UI element and methods for displaying summary statistics and relevant information of selected Customers or Runners."
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Minor: Recolouring of the GUI to improve look and feel"
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author zhangriqi"
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//tag::userstories[]"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |new user |view help information |find out how to use the application"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |list all my customers |have an overview of all customers"
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |add a new customer |store the data of a new customer as well as related deals and contracts"
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |clear the list of customers |start on a clean state"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |delete a customer |remove unwanted data"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |edit a customer\u0027s data |correct mistakes or update the data with the latest information"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |exit the application |call it a day"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |find a customer with a keyword and specify which data field to search |search up a customer quickly without looking at the whole list"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |view history of previously entered commands |trace my workflow"
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |undo a command |easily revert to a previous state"
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |redo a command |redo a command that was undone"
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |select a person from the previously retrieved list |view more details about the particular customer"
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |view a customer\u0027s address on Google Maps |visualize the location of the customer"
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |back up my list |create backup copies of the current data in case of data corruption"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |list all my runners |get an overview of all subordinates"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |schedule collection of payment |plan  meetings with customers and facilitate timely collection of payments"
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |schedule a house visit |send a friendly, personal reminder to a customer regarding payments"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |add a customer with partial information |add a customer entry without requiring all the details"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |easily make ad hoc calculations |perform simple payment calculations without disrupting my workflow"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |view customer or transaction statistics |make informed decisions or get relevant information about customers or transactions"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |rate my customers |know who the most reliable customers are"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |filter customers by area |make operations, collections and visitations more time and cost efficient"
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |hide my application quickly |prevent unwanted eyes from confidential data and the activities of the syndicate"
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |view information about a customer\u0027s collateral (family members, relatives, property)  |nalyse possible courses of action against recalcitrant customers who do not pay up"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |view a compact status view of customers using small symbols or pictorial representations |see general status information about customers at a glance"
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |view different configurations of one or more routes, all together encompassing a given set of customers\u0027 locations |find the optimal route in terms of cost, time and effort that can be taken to collect from a given set of customers"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* *` |user |export data of customers and runners |view the data in another format or on another platform"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`* *` |user |view a route encompassing a given set of customers\u0027 locations |access the cost, time and effort involved in collecting from a set of customers"
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`**` |user | enter commands with aliases | type commands faster and improve speed of using the application"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|`*` |user |export my current view to another format |view specific information in another format or print out a hardcopy and pass the information to subordinates"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//end::userstories[]"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "3.  User requests to delete a specific person in the list"
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": "4.  AddressBook deletes the person"
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "-"
        },
        "content": "* 3a. The given index is invalid."
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "-"
        },
        "content": "_{More to be added}_"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]] Mainstream OS::"
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]] Private contact detail::"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "-"
        },
        "content": "A contact detail that is not meant to be shared with others"
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Product Survey"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*HuatAh!*"
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "Author:"
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "-"
        },
        "content": "Pros:"
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": "Cons:"
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "-"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Instructions for Manual Testing"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "-"
        },
        "content": "Given below are instructions to test the app manually."
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": "These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Launch and Shutdown"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": ". Initial launch"
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": ".. Download the jar file and copy into an empty folder"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": ".. Double-click the jar file +"
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": ". Saving window preferences"
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": ".. Resize the window to an optimum size. Move the window to a different location. Close the window."
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": ".. Re-launch the app by double-clicking the jar file. +"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: The most recent window size and location is retained."
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Deleting a person"
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": ". Deleting a person while all persons are listed"
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "-"
        },
        "content": ".. Prerequisites: List all persons using the `list` command. Multiple persons in the list."
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 1` +"
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "-"
        },
        "content": ".. Test case: `delete 0` +"
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: No person is deleted. Error details shown in the status message. Status bar remains the same."
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "-"
        },
        "content": ".. Other incorrect delete commands to try: `delete`, `delete x` (where x is larger than the list size) _{give more}_ +"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "-"
        },
        "content": "   Expected: Similar to previous."
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//tag::ManualTestDelete[]"
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ".. Test Case: `delete 1`, where 1 is a CUSTOMER, and 1 is assigned to a RUNNER +"
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated. The associated Runner should no longer have that Customer assigned."
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ".. Test Case: `delete 1`, where 1 is a RUNNER, and CUSTOMERS 2, 3, 4 are assigned to the RUNNER +"
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    Expected: First contact is deleted from the list. Details of the deleted contact shown in the status message. Timestamp in the status bar is updated. The associated Customers at INDEX 2, 3, 4 should no longer have that Runner assigned to them."
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//end::ManualTestDelete[]"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1633,
        "content": "//@@author Der-Erlkonic"
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d\u003d Select Command"
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ". Checking if the fields of a selected `Person` are displayed correctly correct."
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ".. Prerequisites: Clear the list, add a `Customer` to index 1, add a `Runner` to index 2, add a (non-duplicate) `Customer` to index 3. Assign both the customers to the runner."
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ".. Test case: `select 1` +"
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     Expected: First contact is selected from the list. The `Person` should be a `Customer`."
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     Details of the `Customer` shown in the BrowserPanel."
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     Fields should be the same as what was entered in the Prerequisite step."
      },
      {
        "lineNumber": 1643,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     \"Runner assigned\" should be the name of `Runner` in index 2."
      },
      {
        "lineNumber": 1644,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ".. Test case: `select 2` +"
      },
      {
        "lineNumber": 1645,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     Expected: First contact is selected from the list. The `Person` should be a `Runner`."
      },
      {
        "lineNumber": 1646,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     Details of the `Runner` shown in the BrowserPanel."
      },
      {
        "lineNumber": 1647,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     Fields should be the same as what was entered in the Prerequisite step."
      },
      {
        "lineNumber": 1648,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     \"Customers assigned\" should indicate number two beside it, and name of `Customer` in index 1 and index 3 listed below."
      },
      {
        "lineNumber": 1649,
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "null": 4,
      "jonleeyz": 306,
      "zhangriqi": 171,
      "melvintzw": 204,
      "-": 884,
      "Der-Erlkonig": 80
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d HuatAh! v1.5 - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":xrefstyle: full"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ":repoURL: https://github.com/CS2103JAN2018-F12-B4/main"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "By: `Huat Ah Finance Pte Ltd`      Since: `Feb 2018`      Licence: `MIT`"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "If you:"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* are a 21st Century modern loan shark boss,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* prefer to use a desktop app for managing operations,"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* prefer to work with a Command Line Interface* (CLI) while still having the benefits of a Graphical User Interface (GUI),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* can type fast and prefer a keyboard as your main input method,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "HuatAh! can get your operations management tasks done faster than traditional GUI apps. Interested? Read on!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ".  Download the latest `HuatAh.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for your application."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "image::Ui-start.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ".  Type your selected command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ".  If you would like more detailed information about the commands, you may take a look at the \u003c\u003cCommand Summary, Command Summary\u003e\u003e."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Keyboard shortcuts and aliases are also available for you to speed up your workflow!"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Lists all persons._"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " add ty: c n: Xiao Ming p: 88888888 e: xiao@ming.com a: The Fullerton s: today d: 7 June 2018 m: 31415926535897 i: 9.71 t: richxiaoming t: HighSES t: mingdynasty"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Adds a new `Customer` named \"Xiao Ming\"._"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " delete 3"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Deletes the third person displayed in the current view."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " exit"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Exits the application._"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d Known Issues"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* Default date is January 1, 1970 (default Java Date value), when no start date or due date"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "is specified when adding a customer."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::commandsummary[]"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Words in `UPPER_CASE` are the parameters to be supplied by the user e.g. in `add n: NAME`, `NAME` is a parameter which can be used as `add n: John Doe`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Items in square brackets are optional e.g `n: NAME [t: TAG]` can be used as `n: John Doe t: friend` or as `n: John Doe`."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times e.g. `[t: TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t: friend`, `t: friend t: family` etc."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Parameters can be in any order e.g. if the command specifies `n: NAME p: PHONE_NUMBER`, `p: PHONE_NUMBER n: NAME` is also acceptable."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[%header,cols\u003d\"1,2,7\"]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|Command"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|Keyboard shortcut"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|Syntax"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|help"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[F12]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`help`"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003chome, home\u003e\u003e"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[F1]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003clist, list\u003e\u003e"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[F2]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`list`"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003chistory, history\u003e\u003e (`h`)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[F3]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`history`"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003cadd, add\u003e\u003e (`i`)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+I]"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`add ty: r(or c) n: NAME [p: PHONE_NUMBER] [e: EMAIL] [a: ADDRESS] [s: OWE_START_DATE] [d: OWE_DUE_DATE] [m: MONEY_OWED] [i: INTEREST_RATE] [t: TAG] ...`"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003cassign, assign\u003e\u003e (`a`)"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+Shift+A]"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`assign RUNNER-INDEX c: CUSTOMER-INDEX [CUSTOMER-INDEX] ...`"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003cclear, clear\u003e\u003e (`c`)"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+Shift+C]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`clear`"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003cdelete, delete\u003e\u003e (`d`)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+D]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`delete INDEX`"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003cedit, edit\u003e\u003e (`e`)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+E]"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`edit INDEX [n: NAME] [p: PHONE_NUMBER] [e: EMAIL] [a: ADDRESS] [s: OWE_START_DATE] [d: OWE_DUE_DATE] [m: MONEY_OWED] [i: INTEREST_RATE] [t: TAG] ...`"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003cfind, find\u003e\u003e (`f`)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+F]"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`find [SPECIFIER] KEYWORD [KEYWORD] ...`"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003clocate, locate\u003e\u003e (`l`)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+L]"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`locate [SPECIFIER] KEYWORD [KEYWORD] ...`"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003cselect, select\u003e\u003e (`s`)"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+S]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`select INDEX`"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003cundo, undo\u003e\u003e (`u`)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+Z]"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`undo`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003c\u003credo, redo\u003e\u003e (`r`)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Ctrl+Y]"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`redo`"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|exit"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Alt+Q]"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|`exit`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::commandsummary[]"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::navigationshortcuts[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d Navigation shortcuts [since v1.5]"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* These keyboard shortcuts may be used to traverse or delete text from the CommandBox."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* These keyboard shortcuts are best used with the keyboard shortcuts that populate command templates"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "(eg. \u003c\u003cadd, add: kbd:[Ctrl+I]\u003e\u003e, \u003c\u003cedit, edit: kbd:[Ctrl+E]\u003e\u003e, \u003c\u003clocate, locate: kbd:[Ctrl+L]\u003e\u003e, etc). This integrated"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "functionality will allow you to quickly and efficiently manage your data with minimal typing."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Try them out to see how they work!"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[%header,cols\u003d\"1,4\"]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|Keyboard shortcut"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|Function"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Tab]"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|Positions the cursor after the next prefix. +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "If no prefixes are present, positions the cursor after the last character in the CommandBox."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Shift+Tab]"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|Positions the cursor after the previous prefix. +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "If no prefixes are present, brings the cursor before the first character in the CommandBox."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|kbd:[Shift+Backspace]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|Deletes the text in between the cursor and the previous prefix. +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "If the cursor is on a prefix, deletes the prefix. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "If no prefixes, deletes all text before the cursor."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::navigationshortcuts[]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d Feature details"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::home[]"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Displaying the home view : kbd:[F1] [since v1.5] [[home]]"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Utilising this keyboard shortcut will display the home view."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** The CommandBox will be empty and focused (will be ready to receive input)."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** The ResultDisplay will show a welcome message."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** The BrowserPanel will display a list of commands, as well as their respective aliases and"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "keyboard shortcuts."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::home[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "***"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Displaying all Runners and Customers : `list`, kbd:[F2] [[list]]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " list"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* This command will display all `Runners` and `Customers` in the database."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* The `Runners` and `Customers` will be displayed in the order they were added into the database,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "with the latest addition at the bottom."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "***"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Showing history of commands entered : `history`, kbd:[F3] [[history]]"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " history"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* This command will list all the commands that you have previously entered in *reverse chronological order*."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "***"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`, kbd:[Ctrl+I] [since v1.3] [[add]]"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " add ty: r(or c) n: NAME [p: PHONE_NUMBER] [e: EMAIL] [a: ADDRESS] [s: OWE_START_DATE] [d: OWE_DUE_DATE] [m: MONEY_OWED] [i: INTEREST_RATE] [t: TAG] ..."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* This command adds a new `Customer` or `Runner` with the specified details."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* A person can have any number of tags (including 0)."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* `NAME` and `TYPE` must be provided. The other details are optional."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* The additional details after type and name can be entered in any order."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* The start and end dates can be specified in natural language (eg. \"today\", \"this Friday\", etc)."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Interest will be compounded weekly."
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Usage examples:*"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " add ty: c n: Xiao Ming p: 88888888 e: xiao@ming.com a: The Fullerton s: today d: 7 June 2018 m: 31415926535897 i: 9.71 t: richxiaoming t: HighSES t: mingdynasty"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Adds a new `Customer` named \"Xiao Ming\", with phone number \"88888888\", email address \"xiao@ming.com\", address"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\"The Fullerton\", and tags \"richxiaoming\", \"HighSES\" and mingdynasty\", who borrows $31 415 926 535 897 at a weekly"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "interest rate of 9.71% on the date this command is entered and is due to return the full amount on 7 June 2018._"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " add ty: c  p: 88888888 n: Xiao Ming e: xiao@ming.com s: today a: The Fullerton d: 5 May 2018 m: 314159265 i: 9.71 t: richxiaoming t: mingdynasty t: HighSES"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Adds the same `Customer` as above, just with values specified in a different order._"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " add ty: r n: Ping An p: 93698369 e: pingan@houseofahlong.com a: Ang Mo Kio Police Divison HQ t: UndercoverRunner t: TripleAgent t: Joker"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Adds a new `Runner` named \"Ping An\", with phone number \"93698369\", email address \"pingan@houseofahlong.com\","
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "address \"Ang Mo Kio Police Divison HQ\" and tags \"UndercoverRunner\", \"TripleAgent\" and \"Joker\"._"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "***"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//tag::AssignCommand[]"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d Assigning one or more Customers to a Runner : `assign`, kbd:[Ctrl+Shift+A] [since v1.4] [[assign]]"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " assign RUNNER-INDEX c: CUSTOMER-INDEX [CUSTOMER-INDEX] ..."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* This command assigns one or more `Customers` to a `Runner` according to a specified `RUNNER-INDEX`"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "and `CUSTOMER-INDICES`."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Each `INDEX` refers to the index number shown in the last person listing."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Each `INDEX` must be a *positive integer*: 1, 2, 3, ..."
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* The `RUNNER-INDEX` must always be specified and at least one `CUSTOMER-INDEX` must be specified as well."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*Usage examples:*"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "`assign 1 c: 2`"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "_Assigns the Customer associated with index `2` to the Runner associated with index `1` based on the last shown listing._"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "`assign 1 c: 2 5 8`"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "_Assigns the Customers associated with indices `2`, `5`, `8` to the Runner associated with index `1` based on the last shown listing._"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//end::AssignCommand[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "***"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Clearing the database : `clear`, kbd:[Ctrl+Shift+C] [[clear]]"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " clear"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* This command will clear all `Runners` and `Customers` from the database."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* This command may be undone."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "***"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::deletecommand[]"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Deleting a person : `delete`, kbd:[Ctrl+D] [[delete]]"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " delete INDEX"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* This command deletes the person associated with the specified `INDEX`."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** The `INDEX` refers to the index number shown in the most recent listing."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** The `INDEX` must be a *positive integer*: 1, 2, 3, ..."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Usage examples:*"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " list"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " delete 2"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Deletes the second person in the database._"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " find Betsy"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " delete 1"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Deletes the first person in the results of the `find` command._"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::deletecommand[]"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "***"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Editing a person : `edit`, kbd:[Ctrl+E] [since v1.3] [[edit]]"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " edit INDEX [n: NAME] [p: PHONE_NUMBER] [e: EMAIL] [a: ADDRESS] [s: OWE_START_DATE] [d: OWE_DUE_DATE] [m: MONEY_OWED] [i: INTEREST_RATE] [t: TAG] …"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* This command edits the person associated with the specified `INDEX`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** The `INDEX` refers to the index number shown in the last person listing."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** The `INDEX` must be a *positive integer*: 1, 2, 3, ..."
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* At least one of the optional fields must be provided."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Existing values will be updated to the input values."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* When editing tags, the existing tags of the person will be replaced i.e adding of tags is not cumulative."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* You can remove all the person\u0027s tags by typing `t:` without specifying any tags after it."
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* You cannot Edit a Runner with Customer-only fields"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Usage examples:*"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " edit 1 p: 999 e: ahlong@houseofhuat.com"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Edits the phone number and email address of the first person to be `999` and `ahlong@houseofhuat.com` respectively._"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " edit 2 n: Kimmy Aunty t:"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Edits the name of the second person to be `Kimmy Aunty` and clears all existing tags from that person._"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "***"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//tag::FindCommand[]"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Searching for relevant persons : `find`, kbd:[Ctrl+F] [since v1.1] [[find]]"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " find [SPECIFIER] KEYWORD [KEYWORD] ..."
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* This command searches for relevant persons with the specified information."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Name, phone, email, address and tags are searched by default (no `SPECIFIER` or `-all` `SPECIFIERS`)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* `Customer` and `Runner` specific fields cannot be searched in this version [coming in v2.0]"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Only one `SPECIFIER` can be used at a time."
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* If more than one `SPECIFIER` is specified, only the first will be considered. The others will be ignored."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Description of `SPECIFIERS`:"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** `-n` to search only names."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** `-p` to search only phones."
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** `-e` to search only emails."
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** `-a` to search only addresses."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** `-t` to search only tags."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Persons matching at least one keyword will be returned (i.e. `OR` search). e.g. `Hans Bo` will return `Hans Gruber`, `Bo Yang`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* The order of the keywords does not matter. e.g. `Hans Bo` will match `Bo Hans`."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Usage examples:*"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " find John"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Returns all persons with name, address or tags matching `John`._"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " find -all John"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Returns all persons with name, address or tags matching `John`._"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " find Betsy Tim John"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Returns all persons with names, addresses or tags matching `Betsy`, `Tim`, or `John`._"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " find -p 91234567"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Returns all persons with phone number \"91234567\"._"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//end::FindCommand[]"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author zhangriqi"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//tag::locatecommand[]"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "***"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d Displaying a person\u0027s address using Google Maps : `locate`, kbd:[Ctrl+L] [[locate]]"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " locate [SPECIFIER] KEYWORD [KEYWORD] ..."
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* This command searches for relevant persons with the specified information then displays the first relevant person\u0027s address on google maps."
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* Name, phone, email, address and tags are searched by when no `SPECIFIER` or the `-all` `SPECIFIER` is input)"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* `Customer` and `Runner` specific fields are not queried in this version [coming in v2.0]"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* Select using Index when more than one person with the same information are found is not provided in this version [coming in v2.0]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* Only one `SPECIFIER` can be used at a time."
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* If more than one `SPECIFIER` is specified, only the first will be considered. The others will be ignored."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* Description of `SPECIFIERS`:"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** `-n` to search only names."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** `-p` to search only phones."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** `-e` to search only emails."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** `-a` to search only addresses."
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** `-t` to search only tags."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*Usage examples:*"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " locate David"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "_Locates any persons with name, address or tag \"David\" and displays the address associated with the first result on Google Maps._"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " locate -n David"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "_Locates any persons with name \"David\" and displays the address associated with the first result on Google Maps._"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " locate -a Blk 30"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "_Locates the address \"Blk 30\" on Google Maps and displays the person with that address in the PersonListPanel._"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " locate -p 91234567"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "_Locates any persons with phone number \"91234567\" and displays the address associated with the first result on Google Maps._"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//end::locatecommand[]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "***"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Selecting and displaying details about a person : `select`, kbd:[Ctrl+S] [since v1.4] [[select]]"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " select INDEX"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* This command selects and displays details about the person associated with the specified `INDEX`."
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** The `INDEX` refers to the index number shown in the last person listing."
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** The `INDEX` must be a *positive integer*: 1, 2, 3, ..."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Usage examples:*"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " list"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " select 2"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Selects the second person in the database._"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " find Betsy"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " select 1"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_Selects the first person from the results of the `find` command._"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "***"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d Undoing the last undoable command : `undo`, kbd:[Ctrl+Z] [[undo]]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " undo"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* Only undoable commands can be undone."
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*Usage examples:*"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " delete 1"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " list"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " undo (reverses the \"delete 1\" command)"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " select 1"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " list"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " undo"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "_The `undo` command fails as there are no undoable commands executed previously._"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " delete 1"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " clear"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " undo (reverses the \"clear\" command)"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " undo (reverses the \"delete 1\" command)"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "***"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`, kbd:[Ctrl+Y] [[redo]]"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*Syntax:*"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " redo"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*Usage examples:*"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " delete 1"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " undo (reverses the \"delete 1\" command)"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " redo (reapplies the \"delete 1\" command)"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " delete 1"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " redo"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "_The `redo` command fails as there are no `undo` commands executed previously._"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " delete 1"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " clear"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " undo (reverses the \"clear\" command)"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " undo (reverses the \"delete 1\" command)"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " redo (reapplies the \"delete 1\" command)"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " redo (reapplies the \"clear\" command)"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003c\u003cCommand Summary, Back to Command Summary\u003e\u003e"
      },
      {
        "lineNumber": 609,
        "content": "//@@author"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::v2features[]"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d Features coming in v2.0"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*Improvements to existing features:*"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* `Find` Command: Searching fields specific to Runners and Customers."
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* `Find` Command: ability to filter the currently displayed list further"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* `Locate` Command: ability to select by index when there are conflicts"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*Other New Features:*"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* *Functional:*"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** `Unassign` customers from a runner"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Add multiple persons by inputting a file"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** `Schedule` dates for runners to visit customers"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Change the status of customers (whether they\u0027ve paid or not)"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Display countdown timers for Customers\u0027 due dates"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** `Sort` customers and runners by certain fields"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** More useful statistics on the home page"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* *Cosmetic:*"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Improvement of the UI to display one list of Customers and a separate list of Runners"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Aesthetic improvements for the display of data"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** `Theme` command to choose and switch between UI theme/colours"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::v2features[]"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// tag::FAQ[]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[qanda]"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "How do I transfer my data to another Computer?::"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Install the app in the other computer and overwrite the empty data file it creates with the file that contains"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "the data of your previous Address Book folder. By default, the path for the data file is \"data/addressbook.xml\"."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "How do I save my data?::"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "The state of the database is saved in the hard disk automatically after any command that changes the data."
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Therefore, there is no need to save manually."
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "How can I report a bug or suggest improvements to this application?::"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Open an issue https://github.com/CS2103JAN2018-F12-B4/main/issues[here]! We would love to hear your feedback! :)"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "What if I am not a loan shark boss yet?::"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Work hard and collect more protection money! Maybe one day you\u0027ll make it! ;)"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "What if I am a law enforcement officer?::"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Huat Ah Finance Pte Ltd takes no responsibility for the actions of its users."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "We just like to make software that makes a positive impact on the world! :)"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*On a serious note, this is just a student project with a humourous stance.*"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "// end::FAQ[]"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "jonleeyz": 457,
      "zhangriqi": 59,
      "melvintzw": 103,
      "-": 44
    }
  },
  {
    "path": "docs/team/Der-Erlkonig.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d Choi Wi Su - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d PROJECT: HuatAh!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "//@@author Der-Erlkonig"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "HuatAh! is a desktop loan shark manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "* *Major enhancement*: added *the ability to view the various details of Customers and Runners on the BrowserPanel*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** What it does: Upon executing a valid `SelectCommand`, all the Person\u0027s  details will be shown on the BrowserPanel."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "Depending on whether the Person is a Customer or Runner, their respective fields will be shown accordingly."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Justification: This feature improves the product significantly because a Loanshark manager can easily see the details of his Customers and Runners at a quick glance, enhancing productivity."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Highlights: This feature makes use of the same BrowserPanel which displays the GoogleMaps."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Credits: https://www.w3schools.com/html/ for to introduction to html syntax."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "* *Minor enhancement*: Modify the color scheme of the new application."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-F12-B4/main/blob/master/collated/functional/Der-Erlkonig.md[functional]] [https://github.com/CS2103JAN2018-F12-B4/main/blob/master/collated/test/Der-Erlkonig.md[test]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "*** Managed and reviewed pull requests"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "*** Tweaked the defaultpage to show a summary of keyboard shortcuts instead of a blank page."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "*** Added a section on manual testing in the Developer Guide."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "*** Reported bugs for other teams in the class (examples:  https://github.com/CS2103JAN2018-T16-B2/main/issues/156[#156], https://github.com/CS2103JAN2018-T16-B2/main/issues/158[#158])"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dBrowserPanel]"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 1,
      "-": 6,
      "Der-Erlkonig": 45
    }
  },
  {
    "path": "docs/team/ZhangRuiqi.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d Zhang Ruiqi - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d PROJECT: HuatAh!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "HuatAh! is a desktop loan shark manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* *Major enhancement*: added the feature of locating a person on Google Map"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** What it does: allows the user to locate a person using any fields of a person (e.g, name/phone/email...) on Google Map, and it perfectly helps the user to keep track of the person."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** Justification: Allowing the target users of this app - loan shark managers, to know where their customers are is very important because it\u0027s both cost-efficient and time-efficient to assign the customers to the nearest runners if the managers can see the location of the customers on a map."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** Highlights: This enhancement includes the use Google Map which allows for much more future possibilities to integrate with Google. It makes integrating with other Google functions in the future easier."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** Credits: Google Maps URLs"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* *Minor enhancement*: added alias for command that allows the user to use a command more easily, minor change to ui-app logo"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-F12-B4/main/blob/master/collated/functional/zhangriqi.md[Functional code]] [https://github.com/CS2103JAN2018-F12-B4/main/blob/master/collated/test/zhangriqi.md[Test code]]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*** Managed release `v1.4 - v1.5rc` on GitHub"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*** Collated code for \u0027v1.4\u0027 on Github"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*** Updated the GUI: removed the redundancy (Pull requests https://github.com/CS2103JAN2018-F12-B4/main/pull/76, https://github.com/CS2103JAN2018-F12-B4/main/pull/6)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*** Updated User Guide and Developer Guide to stay up to date"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*** PRs reviewed (with non-trivial review comments): https://github.com[#74], https://github.com[#76], https://github.com[#9]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*** PRs approved of: https://github.com/CS2103JAN2018-F12-B4/main/pull/136"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*** Contributed to forum discussions: https://github.com/CS2103JAN2018-F12-B4/main/issues/96"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "https://github.com/CS2103JAN2018-W13-B2/main/issues/129,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pull/183"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "*** Integrated Google Map to the project (https://github.com[#42])"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlocatecommand]"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dlocatecommand]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dalias]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003duserstories]"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "---"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 68,
      "jonleeyz": 1
    }
  },
  {
    "path": "docs/team/jonleeyz.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d Jonathan Lee - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d PROJECT: HuatAh!"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "---"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "HuatAh! is a desktop loan shark manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *Major enhancement*: implemented keyboard shortcuts to complement all commands that can be entered into the CommandBox."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** What it does: This feature allows the User to press certain keyboard shortcuts to execute a command immediately,"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "populate the CommandBox with the necessary prefixes and specifiers required for the input of the Command, or reposition"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "the cursor within the CommandBox."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Justification: This feature improves the product significantly because a typical user of this CLI application will"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "input many commands throughout the course of his usage and it is easy to make a syntax error or typo if all commands"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "are manually typed. Some commands such as the AddCommand might require many prefixes and having the prefixes already in"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "the CommandBox also helps remind the User which values he / she needs or wants to input. Typing commands in full also"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "consume much time and the time savings add up more and more as the User uses the application more and more."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Highlights: This enhancement required substantial time to implement as I had to understand how to enable the"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "keyboard shortcuts and how the other UI elements interacted or interfered with their behaviour. Numerous tweaks had to"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "be made to past implementations so that the keyboard shortcuts would work regardless of where the application focus was."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Another challenging aspect of this enhancement was devising the cases to parse input in the CommandBox so the navigation"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "shortcuts would work as expected."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Pull Requests (functional):"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/79[#79], https://github.com/CS2103JAN2018-F12-B4/main/pulls/100[#100],"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/107[#107], https://github.com/CS2103JAN2018-F12-B4/main/pulls/125[#125],"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/146[#146]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Pull Requests (tests): https://github.com/CS2103JAN2018-F12-B4/main/pulls09[#109]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *Minor enhancement*: improved usability by tweaking the ResultDisplay UI element [[minorenhancement]]"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** What it does:"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Tweaked ResultDisplay to style its output red if invalid commands are entered: https://github.com/CS2103JAN2018-F12-B4/main/pulls/67[#67]"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Tweaked ResultDisplay to make it big enough to display 5 lines: https://github.com/CS2103JAN2018-F12-B4/main/pulls/143[#143]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Tweaked structure of all command messages for readability: https://github.com/CS2103JAN2018-F12-B4/main/pulls/143[#143]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Fix inconsistencies in command messages: https://github.com/CS2103JAN2018-F12-B4/main/pulls/149[#149]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Justification: This feature improves the usability of the ResultDisplay UI element, allowing the UI to obtain more"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                  information about available commands as well as information about executed commands, whether"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                  successful or not."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** The previous ResultDisplay did not change the text style when an invalid command was entered. Tweaking this"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "behaviour so that invalid commands would yield red ResultDisplay text helps the User tell easily when something"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "goes wrong."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** The previous ResultDisplay could only display 5 lines of text, making it difficult for the User to obtain"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "information should the result message be too long or formatted poorly. Tweaking the size of the ResultDisplay"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "assists the User in obtaining more information about commands executed without needing to scroll using a mouse."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** The previous messages fed to the ResultDisplay were inconsistently and poorly formatted. Tweaking these messages"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "by formatting them with whitespaces and newline characters enhances readability and usability for the User."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Highlights: One aspect of this enhancement that was challenging to implement due to the required interaction and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "modification of CSS files. Another aspect that required substantial time commitment was the constant revision of the"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "command messages (at least 5 rounds of checks done) to ensure that consistency was maintained across the messages"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "displayed to the User as well as the User Guide and Developer Guide."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *Code contributed*:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[https://github.com/CS2103JAN2018-F12-B4/main/tree/master/collated/functional/jonleeyz.md[Functional code]]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[https://github.com/CS2103JAN2018-F12-B4/main/tree/master/collated/functional/jonleeyz-reused.md[Functional code: reused from other sources]]"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[https://github.com/CS2103JAN2018-F12-B4/main/tree/master/collated/test/jonleeyz.md[Test code]]"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "[https://github.com/CS2103JAN2018-F12-B4/main/tree/master/collated/test/jonleeyz.md[Test code: reused from other sources]]"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Managed release `v1.4` on GitHub"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Managed the rebrand of the application from LoanShark Manager to HuatAh!: https://github.com/CS2103JAN2018-F12-B4/main/pulls/152[#152]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Created user story issues:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/23[#23], https://github.com/CS2103JAN2018-F12-B4/main/issues/24[#24],"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/25[#25], https://github.com/CS2103JAN2018-F12-B4/main/issues/26[#26],"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/27[#27], https://github.com/CS2103JAN2018-F12-B4/main/issues/28[#28],"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/29[#29], https://github.com/CS2103JAN2018-F12-B4/main/issues/30[#30],"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/31[#31], https://github.com/CS2103JAN2018-F12-B4/main/issues/32[#32],"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/33[#33], https://github.com/CS2103JAN2018-F12-B4/main/issues/34[#34],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/35[#35], https://github.com/CS2103JAN2018-F12-B4/main/issues/36[#36],"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/37[#37], https://github.com/CS2103JAN2018-F12-B4/main/issues/38[#38]"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Enhancements to existing features:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** \u003c\u003cminorenhancement, Minor enhancement\u003e\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Tweaked CommandBox to ignore empty input: https://github.com/CS2103JAN2018-F12-B4/main/pulls/3[#3]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Edited prefixes for AddCommand and EditCommand to use \":\" instead of \"/\": https://github.com/CS2103JAN2018-F12-B4/main/pulls/45[#45]"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Added colours to tags: https://github.com/CS2103JAN2018-F12-B4/main/pulls/64[#64]"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Added 15 sample `Runners` and `Customers` to the sample data: https://github.com/CS2103JAN2018-F12-B4/main/pulls/151[#151]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Overhauled structure and cosmetic style of the User Guide:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/81[#81],"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/112[#112],"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/122[#122],"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/143[#143]"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Fix inconsistencies in the User and Developer Guides:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/149[#149],"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/172[#172],"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/195[#195]"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Removed unused photos from `docs` folder:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/66[#66],"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pulls/195[#195]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Replied issues created by other teams in the class: https://github.com/CS2103JAN2018-F12-B4/main/issues/133[#133], https://github.com/CS2103JAN2018-F12-B4/main/issues/135[#135],"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/138[#138], https://github.com/CS2103JAN2018-F12-B4/main/issues/139[#139], https://github.com/CS2103JAN2018-F12-B4/main/issues/141[#141]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Reported a bug for another team in the class: https://github.com/CS2103JAN2018-W14-B3/main/issues/96[#96]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Enabled branch protection for `master` and established guidelines for merging PRs and creating issues (with http://github.com[@melvintzw])"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "*** Integrated 4 new Github plugins to the team repo:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Travis CI (https://github.com/CS2103JAN2018-F12-B4/main/pulls/1[#1]),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "AppVeyor (https://github.com/CS2103JAN2018-F12-B4/main/pulls/2[#2]),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Coveralls (https://github.com/CS2103JAN2018-F12-B4/main/pulls/149[#149]),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "Netlify"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "include::../UserGuide.adoc[tag\u003dcommandsummary]"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "include::../UserGuide.adoc[tag\u003dnavigationshortcuts]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "include::../UserGuide.adoc[tag\u003dhome]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtagcolours]"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dkeyboardshortcuts]"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dnavigationshortcuts]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 135,
      "-": 3
    }
  },
  {
    "path": "docs/team/melvintzw.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "\u003d Melvin Tan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "\u003d\u003d PROJECT: HuatAh!"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Overview"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "HuatAh! is a desktop loan shark manager application. It has a GUI but most of the user interactions happen using a CLI (Command Line Interface)."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Summary of contributions"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* *Major enhancement*: implemented the critical backend infrastructure required for the user, a loan shark syndicate boss, to be able to manage Customers and Runners. Also ensured that all commands are functional with respect to the new model. In addition, I implemented a new command `Assign` to provide basic functionality for the user to delegate his subordinates (Runners) to be in charge of one or more Customers."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** What it does: allows developers to develop new functionality and users to benefit from new functionality pertaining specifically to two subtypes of `Person`, namely `Customer` and `Runner`. This allows for proper delineation or separation of certain attributes and behaviours specific to each subclass."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Justification: Implementation of this feature was necessary for ensuring that features specific to our target-user could be developed and enjoyed."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Highlights: This enhancement affects existing commands and commands to be added in future. It required an in-depth understanding of the entire code-base from the early development stages. The implementation was extremely challenging as it required significant updates to many commands (`Add`, `Edit, `Delete`) and touched all components (Model, Logic, Storage, UI)."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* *Minor enhancement*: Improved the `Find` command to allow the user to search through more fields like Name, Phone, Email, Address, Tags. I also added the capability to specify a _particular_ field to search. This enhancement was necessary to enable the user (the syndicate boss) to easily find relevant personnel from a large number of contacts stored in the application. This would help the user to manage his data and his syndicate operations better."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "* *Code contributed*: [https://github.com/CS2103JAN2018-F12-B4/main/blob/master/collated/functional/melvintzw.md[functional]][https://github.com/CS2103JAN2018-F12-B4/main/blob/master/collated/test/melvintzw.md[test]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* *Other contributions*:"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "** Project management:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Managed releases `v1.3` - `v1.4` (2 releases) on GitHub"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Managed pull requests from teammates"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Scheduled Meetings"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Assigned issues to teammates"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Used Projects features in Github to better organize the development of major features and other aspects of the development"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "** Enhancements to other existing features:"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Improved `Add` command by letting it accept optional fields. This is useful for situations whereby not all personal details are available or when the user would like to quickly create a new contact. \u003cinclude links\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Modified various command messages to improve readability."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Modified commands such as `Add` and `Edit`, to accept new parameters relevant to Customer and Runner."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Modified \u0027Delete` command to exhibit proper behaviour (update the data corretly) with respect to the new functionality of assigning customers ro runners."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Fixed various bugs. Examples: ("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/pull/155[1]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "https://github.com/CS2103JAN2018-F12-B4/main/issues/188[2]"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ")"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "** Documentation:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Ensured that documentation was up-to-date with current implementations: https://github.com/CS2103JAN2018-F12-B4/main/pull/50[#50], https://github.com/CS2103JAN2018-F12-B4/main/pull/47[#47], https://github.com/CS2103JAN2018-F12-B4/main/pull/95[#95], https://github.com/CS2103JAN2018-F12-B4/main/pull/118[#118], https://github.com/CS2103JAN2018-F12-B4/main/pull/164[#164]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "** Community:"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103JAN2018-W14-B3/main/issues/107[1],"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " https://github.com/CS2103JAN2018-W14-B3/main/issues/106[2],"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " https://github.com/CS2103JAN2018-W14-B3/main/issues/98[3],"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " https://github.com/CS2103JAN2018-W14-B3/main/issues/94[4])"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Wrote code that was eventually reused in the implementation of another teammate\u0027s feature (my enhanced `Find` command used in the new `Locate` command)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "** Tools:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*** Integrated a third party library (Natty) to the project (https://github.com/CS2103JAN2018-F12-B4/main/pull/80[#42])"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the User Guide"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dAssignCommand]"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "---"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "include::../UserGuide.adoc[tag\u003dFindCommand]"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Contributions to the Developer Guide"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "|\u003d\u003d\u003d"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dFindCommandEnhancement]"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "---"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dModelTwo]"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "---"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dManualTestDelete]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "---"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dModelTwoImplementation]"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 1,
      "melvintzw": 56,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 5, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(getApplicationParameter(\"config\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getApplicationParameter(String parameterName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return applicationParameters.get(parameterName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(String configFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String configFilePathUsed;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stop();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 1,
      "-": 211
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private String appTitle \u003d \"HuatAh!\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String userPrefsFilePath \u003d \"preferences.json\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(String userPrefsFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ExecuteCommandRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.ImmediatelyExecutableCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Indicates that a new request to execute a Command is available."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class ExecuteCommandRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final String commandWord;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public ExecuteCommandRequestEvent(ImmediatelyExecutableCommand command) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandWord \u003d command.getCommandWord();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this.getClass().getSimpleName() + \": \" + commandWord;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/FieldsChangedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Represents a selection change in the Person List Panel"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class FieldsChangedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public FieldsChangedEvent(Person person) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Person getPerson() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/HomeRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Indicates a request to execute the home command"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class HomeRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_HOME \u003d"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \"Home view displayed. \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Utilise one of the keyboard shortcuts below to get started!\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Alternatively, press \\\"F12\\\" or type \\\"help\\\" to view the User Guide!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/LocateRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author zhangriqi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " * Indicates a request to locate the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "public class LocateRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public final int target;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public LocateRequestEvent(int target) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        this.target \u003d target;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final boolean isSuccessful;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public NewResultAvailableEvent(String message, boolean isSuccessful) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        this.isSuccessful \u003d isSuccessful;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean isSuccessful() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return isSuccessful;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 7,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PopulatePrefixesRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.PopulatableCommand;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * Indicates that a new request to populate the CommandBox is available."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class PopulatePrefixesRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final String commandUsageMessage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final String commandTemplate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final int caretIndex;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final String commandWord;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public PopulatePrefixesRequestEvent(PopulatableCommand command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandUsageMessage \u003d command.getUsageMessage();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTemplate \u003d command.getTemplate();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        caretIndex \u003d command.getCaretIndex();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandWord \u003d command.getCommandWord();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this.getClass().getSimpleName() + \": \" + commandWord;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY_BORROWED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWEDUEDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWESTARTDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class AddCommand extends UndoableCommand implements PopulatableCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"i\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String COMMAND_TEMPLATE \u003d COMMAND_WORD + \" \" + PREFIX_TYPE + \"  \" + PREFIX_NAME + \"  \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_PHONE + \"  \" + PREFIX_EMAIL + \"  \" + PREFIX_ADDRESS + \"  \" + PREFIX_OWESTARTDATE + \"  \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_OWEDUEDATE + \"  \" + PREFIX_MONEY_BORROWED + \"  \" + PREFIX_INTEREST + \"  \" + PREFIX_TAG + \" \";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            COMMAND_WORD + \" | Adds a Customer or Runner with the specified details. \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Parameters:\\t\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + PREFIX_TYPE + \" r(or c) \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_NAME + \" NAME \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \" PHONE] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \" EMAIL] \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \" ADDRESS] \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"[\" + PREFIX_OWESTARTDATE + \" OWE_START_DATE] \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"[\" + PREFIX_OWEDUEDATE + \" OWE_DUE_DATE] \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"[\" + PREFIX_MONEY_BORROWED + \" MONEY_OWED] \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"[\" + PREFIX_INTEREST + \" INTEREST_RATE] \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"[\" + PREFIX_TAG + \" TAG] ...\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\t\\t\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"1. The start and due dates can be specified in natural language (eg. \\\"today\\\", \\\"this Friday\\\", etc).\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\t\\t\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"2. Interest will be compounded weekly.\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Example:\\t\\t\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + PREFIX_TYPE + \" c \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_NAME + \" Xiao Ming \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_PHONE + \" 88888888 \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_EMAIL + \" xiao@ming.com \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_ADDRESS + \" The Fullerton \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + PREFIX_OWESTARTDATE + \" today \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_OWEDUEDATE + \" 7 June 2018 \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_MONEY_BORROWED + \" 314159265 \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_INTEREST + \" 9.71 \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_TAG + \" richxiaoming \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_TAG + \" HighSES \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_TAG + \" mingdynasty\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_INVALID_PREFIX \u003d \"You have entered a prefix applicable only to Customers\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \" (ty: c)\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added!\\n%1$s\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code Person}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(Person person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(person);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d person;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public AddCommand() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        toAdd \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return (COMMAND_WORD + \" \" + PREFIX_TYPE + \" \").length();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 63,
      "zhangriqi": 3,
      "melvintzw": 15,
      "-": 51
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AssignCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.MESSAGE_DUPLICATE_PERSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.events.ui.FieldsChangedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.LateInterest;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Adds customers to a runner\u0027s customer list , list must contain unique elements"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class AssignCommand extends UndoableCommand implements PopulatableCommand {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"assign\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            COMMAND_WORD + \" | assigns customers to a runner associated with the index number used in the last \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"person listing.\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Parameters:\\t\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"RUNNER-INDEX (positive integer) \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + PREFIX_CUSTOMERS + \" CUSTOMER-INDEX (positive integer) \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"[ CUSTOMER-INDEX] ...\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Example:\\t\\t\""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + COMMAND_WORD + \" 1 \" + PREFIX_CUSTOMERS + \" 2\""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"Example:\\t\\t\""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + COMMAND_WORD + \" 1 \" + PREFIX_CUSTOMERS + \" 2 5 8\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_ASSIGN_PERSON_SUCCESS \u003d \"Successfully assigned!\\nUpdated Runner Info:\\n%1$s\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_PERSON_NOT_FOUND \u003d \"The target person cannot be missing\";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_INVALID_CUSTOMER_INDEX \u003d \"invalid customer index\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_NOT_A_RUNNER \u003d \"Person at index %d is not a Runner\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    // message"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final Index runnerIndex;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final Index[] customerIndex;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private List\u003cPerson\u003e oldCustomers \u003d new ArrayList\u003c\u003e(); //customers already in runner\u0027s list of customers"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private List\u003cPerson\u003e newCustomers \u003d new ArrayList\u003c\u003e(); //customers to be added to runner\u0027s list of customers"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private List\u003cPerson\u003e updatedCustomers \u003d new ArrayList\u003c\u003e(); //new customers that have been been updated with runner"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private List\u003cEditPersonDescriptor\u003e listOfEditedCustDesc \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private EditPersonDescriptor editRunnerDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @param runnerIndex   of the Runner in the filtered person list to edit"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @param customerIndex ... of the customers to add to Runner\u0027s customer list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public AssignCommand(Index runnerIndex, Index... customerIndex) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(runnerIndex);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(customerIndex);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.runnerIndex \u003d runnerIndex;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.customerIndex \u003d customerIndex;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public AssignCommand() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        runnerIndex \u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        customerIndex \u003d null;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            deletePrevRunnerCustomer();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            int i \u003d 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            for (Person c : newCustomers) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                model.updatePerson(c, updatedCustomers.get(i));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                i++;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EventsCenter.getInstance().post(new JumpToListRequestEvent(runnerIndex));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EventsCenter.getInstance().post(new FieldsChangedEvent(editedPerson));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new AssertionError(MESSAGE_PERSON_NOT_FOUND);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_ASSIGN_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (runnerIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        personToEdit \u003d lastShownList.get(runnerIndex.getZeroBased());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!(personToEdit instanceof Runner)) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NOT_A_RUNNER, runnerIndex.getOneBased()));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //NOTE: it is important to call these methods in this order so that the appropriate resources are generated"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        generateNewCustomerList();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        generateCustDescWithAssignedRunner();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        generateUpdatedCustomerList();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        makeEditRunnerDescriptorFromUpdatedCustList(); //modifies editRunnerDescriptor"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editRunnerDescriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Since each Customer should only have 1 Runner, if the customer had a runner previously assigned, then that"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * previous runner should have its association with this customer removed. The customer will now only be associated"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * with the newly assigned runner."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void deletePrevRunnerCustomer() throws CommandException, PersonNotFoundException,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            DuplicatePersonException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e pl \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //List\u003cPerson\u003e allCustomers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //allCustomers.addAll(oldCustomers);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //allCustomers.addAll(newCustomers);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Person c : newCustomers) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person r \u003d ((Customer) c).getRunner(); //not getting a runner from pl but an incomplete copy"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            int indexOfActualPerson \u003d pl.indexOf(r);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (indexOfActualPerson \u003e\u003d 0) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                //the conditional check is necessary so that I\u0027m only modifying valid existing runners"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Person actualRunner \u003d pl.get(indexOfActualPerson); //getting the actual complete runner from pl"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                //generate editPersonDescriptor with c removed from runner\u0027s customer list"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                EditPersonDescriptor runnerDescWCustRemoved \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setName(actualRunner.getName());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setPhone(actualRunner.getPhone());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setEmail(actualRunner.getEmail());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setAddress(actualRunner.getAddress());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setTags(actualRunner.getTags());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                List\u003cPerson\u003e newList \u003d ((Runner) actualRunner).getCustomers();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                newList.remove(c);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                runnerDescWCustRemoved.setCustomers(newList);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Person editedPrevRunner \u003d createEditedPerson((Runner) actualRunner, runnerDescWCustRemoved);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                model.updatePerson(actualRunner, editedPrevRunner);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Edit each new customer with the runner to be assigned."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * \u003cp\u003e"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Requires an accompanying list of customer descriptors describing these new customers and reflecting the assigned"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * runner."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void generateUpdatedCustomerList() throws CommandException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int i \u003d 0;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Person c : newCustomers) {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            updatedCustomers.add(createEditedPerson(c, listOfEditedCustDesc.get(i)));"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            i++;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Creates and returns an {@code EditPersonDescriptor} with new customers from customerIndex..."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * the created EditPersonDescriptor is to be used to create editedPerson."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void makeEditRunnerDescriptorFromUpdatedCustList() throws CommandException {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person runnerToBeEdited \u003d lastShownList.get(runnerIndex.getZeroBased());"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assert (runnerToBeEdited instanceof Runner);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editRunnerDescriptor.setName(runnerToBeEdited.getName());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editRunnerDescriptor.setPhone(runnerToBeEdited.getPhone());"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editRunnerDescriptor.setEmail(runnerToBeEdited.getEmail());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editRunnerDescriptor.setAddress(runnerToBeEdited.getAddress());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editRunnerDescriptor.setTags(runnerToBeEdited.getTags());"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e allCustomers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        allCustomers.addAll(oldCustomers);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        allCustomers.addAll(updatedCustomers);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editRunnerDescriptor.setCustomers(allCustomers);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * generates a list of new and unique customers to be assigned to the runner."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws CommandException"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void generateNewCustomerList() throws CommandException {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person runnerToBeEdited \u003d lastShownList.get(runnerIndex.getZeroBased());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        oldCustomers.addAll(((Runner) runnerToBeEdited).getCustomers());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Index index : customerIndex) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person p \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (!(p instanceof Customer)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(MESSAGE_INVALID_CUSTOMER_INDEX);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (oldCustomers.indexOf(p) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(String.format(\"customer at %d already assigned to runner\","
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        index.getOneBased()));"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (newCustomers.indexOf(p) \u003e\u003d 0) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(\"cannot assign same customer twice\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            newCustomers.add((Customer) p);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Generates a list of EditPersonDescriptors for the purpose of updating each customer with the assigned runner"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * This helper method is meant to be called in executeUndoableCommand()."
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * references to each other."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void generateCustDescWithAssignedRunner() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person runnerToBeEdited \u003d lastShownList.get(runnerIndex.getZeroBased());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assert (runnerToBeEdited instanceof Runner);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Person c : newCustomers) {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EditPersonDescriptor custDesc \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setRunner((Runner) runnerToBeEdited);"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setName(c.getName());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setPhone(c.getPhone());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setEmail(c.getEmail());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setAddress(c.getAddress());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setTags(c.getTags());"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setMoneyBorrowed(((Customer) c).getMoneyBorrowed());"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setOweStartDate(((Customer) c).getOweStartDate());"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setOweDueDate(((Customer) c).getOweDueDate());"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setStandardInterest(((Customer) c).getStandardInterest());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setLateInterest(((Customer) c).getLateInterest());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            listOfEditedCustDesc.add(custDesc);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * edited with {@code editRunnerDescriptor}."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * This method is borrowed from EditCommand"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) throws"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            CommandException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (personToEdit instanceof Customer) {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            MoneyBorrowed moneyBorrowed \u003d editPersonDescriptor.getMoneyBorrowed().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getMoneyBorrowed());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Date oweStartDate \u003d editPersonDescriptor.getOweStartDate().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getOweStartDate());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Date oweDueDate \u003d editPersonDescriptor.getOweDueDate().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getOweDueDate());"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            StandardInterest standardInterest \u003d editPersonDescriptor.getStandardInterest()"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .orElse(((Customer) personToEdit).getStandardInterest());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            LateInterest lateInterest \u003d editPersonDescriptor.getLateInterest().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getLateInterest());"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person runner \u003d editPersonDescriptor.getRunner().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getRunner());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Customer(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, moneyBorrowed,"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    oweStartDate, oweDueDate, standardInterest, lateInterest, runner);"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else if (personToEdit instanceof Runner) {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            List\u003cPerson\u003e customers \u003d editPersonDescriptor.getCustomers().orElse(((Runner) personToEdit)"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getCustomers());"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Runner(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, customers);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new CommandException(\"Error: Invalid Person\");"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object o) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (this \u003d\u003d o) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!(o instanceof AssignCommand)) {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AssignCommand that \u003d (AssignCommand) o;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return Objects.equals(runnerIndex, that.runnerIndex)"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Arrays.equals(customerIndex, that.customerIndex)"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(oldCustomers, that.oldCustomers)"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(newCustomers, that.newCustomers)"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(updatedCustomers, that.updatedCustomers)"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(listOfEditedCustDesc, that.listOfEditedCustDesc)"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, that.personToEdit)"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(editedPerson, that.editedPerson)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(editRunnerDescriptor, that.editRunnerDescriptor);"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int result \u003d Objects.hash(runnerIndex, oldCustomers, newCustomers, updatedCustomers, listOfEditedCustDesc,"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                personToEdit, editedPerson, editRunnerDescriptor);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        result \u003d 31 * result + Arrays.hashCode(customerIndex);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return result;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return COMMAND_WORD + \"  \" + PREFIX_CUSTOMERS + \" \";"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return (COMMAND_WORD + \" \").length();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //Customer fields"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Date oweStartDate;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Date oweDueDate;"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private StandardInterest standardInterest;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private LateInterest lateInterest;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Person runner;"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //Runner fields"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private List\u003cPerson\u003e customers;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setMoneyBorrowed(toCopy.moneyBorrowed);"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setOweStartDate(toCopy.oweStartDate);"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setOweDueDate(toCopy.oweDueDate);"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setStandardInterest(toCopy.standardInterest);"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setLateInterest(toCopy.lateInterest);"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setRunner(toCopy.runner);"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setCustomers(toCopy.customers);"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags,"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    this.moneyBorrowed, this.oweStartDate, this.oweDueDate, this.standardInterest, this.lateInterest,"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    this.runner);"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setMoneyBorrowed(MoneyBorrowed moneyBorrowed) {"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.moneyBorrowed \u003d moneyBorrowed;"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cMoneyBorrowed\u003e getMoneyBorrowed() {"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(moneyBorrowed);"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setOweStartDate(Date oweStartDate) {"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.oweStartDate \u003d oweStartDate;"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cDate\u003e getOweStartDate() {"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(oweStartDate);"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setOweDueDate(Date oweDueDate) {"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.oweDueDate \u003d oweDueDate;"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cDate\u003e getOweDueDate() {"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(oweDueDate);"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setStandardInterest(StandardInterest standardInterest) {"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.standardInterest \u003d standardInterest;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cStandardInterest\u003e getStandardInterest() {"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(standardInterest);"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setLateInterest(LateInterest lateInterest) {"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.lateInterest \u003d lateInterest;"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cLateInterest\u003e getLateInterest() {"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(lateInterest);"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setRunner(Person runner) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.runner \u003d runner;"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cPerson\u003e getRunner() {"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(runner);"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setCustomers(List\u003cPerson\u003e customers) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.customers \u003d customers;"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cList\u003cPerson\u003e\u003e getCustomers() {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(customers);"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getMoneyBorrowed().equals(e.getMoneyBorrowed())"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getOweDueDate().equals(e.getOweDueDate())"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getOweStartDate().equals(e.getOweStartDate())"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getStandardInterest().equals(e.getStandardInterest())"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getLateInterest().equals(e.getLateInterest())"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getRunner().equals(e.getRunner())"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    \u0026\u0026 getCustomers().equals(e.getCustomers());"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 569
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class ClearCommand extends UndoableCommand implements ImmediatelyExecutableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \"Database cleared!\""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Press Ctrl + Z or type \\\"undo\\\" to restore the cleared entries.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 13,
      "zhangriqi": 1,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.createEditedPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Deletes a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class DeleteCommand extends UndoableCommand implements PopulatableCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String COMMAND_TEMPLATE \u003d COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            COMMAND_WORD + \" | Deletes the person associated with the index number used in the last person listing. \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Parameters:\\t\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Example:\\t\\t\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_DELETE_PERSON_SUCCESS \u003d \"Deleted Person:\\n\\n%1$s\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToDelete;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public DeleteCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        targetIndex \u003d null;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(personToDelete);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //if personToDelete is customer, delete his associated runner\u0027s customer"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (personToDelete instanceof Customer) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                deleteAssocRunnersCustomer();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //if personToDelete is runner, delete all his customer\u0027s runner"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (personToDelete instanceof Runner) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                deleteAssocCustomersRunner();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new AssertionError(\"duplicate person found\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS, personToDelete));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        personToDelete \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Pre-condition: personToDelete is a Runner."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * This method finds associated customers from the addressbook and deletes those customer\u0027s runner"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void deleteAssocCustomersRunner() throws CommandException, DuplicatePersonException,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            PersonNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assert personToDelete instanceof Runner;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e customers \u003d ((Runner) personToDelete).getCustomers();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Person c : customers) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EditCommand.EditPersonDescriptor custDesc \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setRunner(new Runner());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setName(c.getName());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setPhone(c.getPhone());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setEmail(c.getEmail());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setAddress(c.getAddress());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setTags(c.getTags());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setMoneyBorrowed(((Customer) c).getMoneyBorrowed());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setOweStartDate(((Customer) c).getOweStartDate());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setOweDueDate(((Customer) c).getOweDueDate());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setStandardInterest(((Customer) c).getStandardInterest());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            custDesc.setLateInterest(((Customer) c).getLateInterest());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedCust \u003d createEditedPerson(c, custDesc);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            model.updatePerson(c, editedCust);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Pre-condition: personToDelete is a Customer."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * This method finds this customer\u0027s associated Runner from the addressbook and deletes this customer from that"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * runner."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void deleteAssocRunnersCustomer() throws CommandException, DuplicatePersonException,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            PersonNotFoundException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assert personToDelete instanceof Customer;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e pl \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person r \u003d ((Customer) personToDelete).getRunner(); //not getting a runner from pl but an incomplete copy"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int indexOfActualRunner \u003d pl.indexOf(r);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (indexOfActualRunner \u003e\u003d 0) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //the conditional check is necessary so that I\u0027m only modifying valid existing runners"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person actualRunner \u003d pl.get(indexOfActualRunner); //getting the actual complete runner from pl"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //generate editPersonDescriptor with customer removed from runner\u0027s customer list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EditCommand.EditPersonDescriptor runnerDescWCustRemoved \u003d new EditCommand.EditPersonDescriptor();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runnerDescWCustRemoved.setName(actualRunner.getName());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runnerDescWCustRemoved.setPhone(actualRunner.getPhone());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runnerDescWCustRemoved.setEmail(actualRunner.getEmail());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runnerDescWCustRemoved.setAddress(actualRunner.getAddress());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runnerDescWCustRemoved.setTags(actualRunner.getTags());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            List\u003cPerson\u003e customers \u003d new ArrayList\u003c\u003e(); //defensive copy of runner\u0027s customer list"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers.addAll(((Runner) actualRunner).getCustomers());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers.remove(personToDelete);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runnerDescWCustRemoved.setCustomers(customers);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedRunner \u003d createEditedPerson((Runner) actualRunner, runnerDescWCustRemoved);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            model.updatePerson(actualRunner, editedRunner);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((DeleteCommand) other).targetIndex) // state check"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(this.personToDelete, ((DeleteCommand) other).personToDelete));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getTemplate().length();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 43,
      "zhangriqi": 1,
      "melvintzw": 87,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY_BORROWED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWEDUEDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWESTARTDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.events.ui.FieldsChangedEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.LateInterest;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class EditCommand extends UndoableCommand implements PopulatableCommand {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String COMMAND_TEMPLATE \u003d COMMAND_WORD + \"  \" + PREFIX_NAME + \"  \" + PREFIX_PHONE + \"  \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_EMAIL + \"  \" + PREFIX_ADDRESS + \"  \" + PREFIX_OWESTARTDATE + \"  \" + PREFIX_OWEDUEDATE + \"  \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_MONEY_BORROWED + \"  \" + PREFIX_INTEREST + \"  \" + PREFIX_TAG + \" \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            COMMAND_WORD + \" | Edits the details of the person identified \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"Parameters:\\t\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"INDEX \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"[\" + PREFIX_NAME + \" NAME] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"[\" + PREFIX_PHONE + \" PHONE] \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"[\" + PREFIX_EMAIL + \" EMAIL] \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"[\" + PREFIX_ADDRESS + \" ADDRESS] \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"[\" + PREFIX_MONEY_BORROWED + \" MONEY_BORROWED] \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"[\" + PREFIX_INTEREST + \" WEEKLY_INTEREST] \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"[\" + PREFIX_OWESTARTDATE + \" OWE_START_DATE] \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    + \"[\" + PREFIX_OWEDUEDATE + \" OWE_DUE_DATE] \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"[\" + PREFIX_TAG + \" TAG] ...\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"\\n\\t\\t\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"1. Existing values will be overwritten by the input values.\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"\\n\""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"2. At least one of the optional fields must be provided.\""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + \"Example:\\t\\t\""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + PREFIX_PHONE + \" 999 \""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    + PREFIX_EMAIL + \" ahlong@houseofhuat.com\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person:\\n\\n%1$s\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person personToEdit;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person editedPerson;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index                of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public EditCommand() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        index \u003d null;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        editPersonDescriptor \u003d null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EventsCenter.getInstance().post(new JumpToListRequestEvent(index));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            EventsCenter.getInstance().post(new FieldsChangedEvent(editedPerson));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void preprocessUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Person createEditedPerson(Person personToEdit, EditPersonDescriptor editPersonDescriptor) throws"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            CommandException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //@@author melvintzw"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (personToEdit instanceof Customer) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            MoneyBorrowed moneyBorrowed \u003d editPersonDescriptor.getMoneyBorrowed().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getMoneyBorrowed());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Date oweStartDate \u003d editPersonDescriptor.getOweStartDate().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getOweStartDate());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Date oweDueDate \u003d editPersonDescriptor.getOweDueDate().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getOweDueDate());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            StandardInterest standardInterest \u003d editPersonDescriptor.getStandardInterest()"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .orElse(((Customer) personToEdit).getStandardInterest());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            LateInterest lateInterest \u003d editPersonDescriptor.getLateInterest().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getLateInterest());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person runner \u003d editPersonDescriptor.getRunner().orElse(((Customer) personToEdit)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getRunner());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (oweDueDate.compareTo(oweStartDate) \u003c 0) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(\"OWE_DUE_DATE cannot be before OWE_START_DATE\");"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Customer(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, moneyBorrowed,"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    oweStartDate, oweDueDate, standardInterest, lateInterest, runner);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else if (personToEdit instanceof Runner) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (editPersonDescriptor.getStandardInterest().isPresent()"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    || editPersonDescriptor.getMoneyBorrowed().isPresent()"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    || editPersonDescriptor.getOweStartDate().isPresent()"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    || editPersonDescriptor.getOweDueDate().isPresent()) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new CommandException(\"Cannot edit Runner using Customer-only fields\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            List\u003cPerson\u003e customers \u003d editPersonDescriptor.getCustomers().orElse(((Runner) personToEdit)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .getCustomers());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Runner(updatedName, updatedPhone, updatedEmail, updatedAddress, updatedTags, customers);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new CommandException(\"Error: Invalid Person\");"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return index.equals(e.index)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(personToEdit, e.personToEdit);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return (COMMAND_WORD + \" \").length();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "content": "    //@@author melvintzw-reused"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //Customer fields"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Date oweStartDate;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Date oweDueDate;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private StandardInterest standardInterest;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private LateInterest lateInterest;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private Person runner;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //Runner fields"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        private List\u003cPerson\u003e customers;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public EditPersonDescriptor() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "         * Copy constructor."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            setName(toCopy.name);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "            setPhone(toCopy.phone);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "            setEmail(toCopy.email);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "            setAddress(toCopy.address);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            setTags(toCopy.tags);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setMoneyBorrowed(toCopy.moneyBorrowed);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setOweStartDate(toCopy.oweStartDate);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setOweDueDate(toCopy.oweDueDate);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setStandardInterest(toCopy.standardInterest);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setLateInterest(toCopy.lateInterest);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setRunner(toCopy.runner);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            setCustomers(toCopy.customers);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.phone, this.email, this.address, this.tags,"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    this.moneyBorrowed, this.oweStartDate, this.oweDueDate, this.standardInterest, this.lateInterest,"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    this.runner);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setMoneyBorrowed(MoneyBorrowed moneyBorrowed) {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.moneyBorrowed \u003d moneyBorrowed;"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cMoneyBorrowed\u003e getMoneyBorrowed() {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(moneyBorrowed);"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setOweStartDate(Date oweStartDate) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.oweStartDate \u003d oweStartDate;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cDate\u003e getOweStartDate() {"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(oweStartDate);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setOweDueDate(Date oweDueDate) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.oweDueDate \u003d oweDueDate;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cDate\u003e getOweDueDate() {"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(oweDueDate);"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setStandardInterest(StandardInterest standardInterest) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.standardInterest \u003d standardInterest;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cStandardInterest\u003e getStandardInterest() {"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(standardInterest);"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setLateInterest(LateInterest lateInterest) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.lateInterest \u003d lateInterest;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cLateInterest\u003e getLateInterest() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(lateInterest);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setRunner(Person runner) {"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.runner \u003d runner;"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cPerson\u003e getRunner() {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(runner);"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public void setCustomers(List\u003cPerson\u003e customers) {"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.customers \u003d customers;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        public Optional\u003cList\u003cPerson\u003e\u003e getCustomers() {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return Optional.ofNullable(customers);"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "         * Sets {@code tags} to this object\u0027s {@code tags}."
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "         * A defensive copy of {@code tags} is used internally."
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d (tags !\u003d null) ? new HashSet\u003c\u003e(tags) : null;"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns an unmodifiable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "         * if modification is attempted."
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns {@code Optional#empty()} if {@code tags} is null."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "            return (tags !\u003d null) ? Optional.of(Collections.unmodifiableSet(tags)) : Optional.empty();"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags());"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //TODO: add .equals for Runner and Customer"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "content": "    //@@author"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 58,
      "zhangriqi": 1,
      "melvintzw": 168,
      "-": 198
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class FindCommand extends Command implements PopulatableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String COMMAND_TEMPLATE \u003d COMMAND_WORD + \" -\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            COMMAND_WORD + \" | Finds all persons whose fields contain any of the specified keywords (case-insensitive) \""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"and displays them as a list with index numbers.\""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Parameters:\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"[SPECIFIER] KEYWORD [KEYWORD] ...\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Specifiers:\\t\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"-all, -n, -p, -e, -a, -t : ALL, NAME, PHONE, EMAIL, ADDRESS and TAGS respectively.\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"Example:\\t\\t\" + COMMAND_WORD + \" -n alice bob charlie\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public FindCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public FindCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        predicate \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getTemplate().length();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 21,
      "melvintzw": 58,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \" | Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class HistoryCommand extends Command implements ImmediatelyExecutableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 8,
      "zhangriqi": 1,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ImmediatelyExecutableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * This interface is utilised in the {@code ExecuteCommandRequestEvent} class, where it is used"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * to provide a handle to {@code Commands} that immediately execute on press of their respective"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * keyboard shortcuts."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public interface ImmediatelyExecutableCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the command word of the Command */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    String getCommandWord();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class ListCommand extends Command implements ImmediatelyExecutableCommand {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons.\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 9,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/LocateCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author zhangriqi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.commons.events.ui.LocateRequestEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.ui.MainWindow;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " * Locate the address of a person by keywords on Google Map."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "public class LocateCommand extends Command implements PopulatableCommand {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"locate\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            COMMAND_WORD + \" | Locates all persons whose fields contain any of the specified keywords \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"(case-insensitive) and displays them as a list with index numbers.\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"Parameters:\\t\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"[SPECIFIER] KEYWORD [KEYWORD] ...\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"Specifiers:\\t\\t\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"-all, -n, -p, -e, -a, -t : ALL, NAME, PHONE, EMAIL, ADDRESS and TAGS respectively.\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"\\n\\t\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    + \"Example:\\t\\t\" + COMMAND_WORD + \" -n alice bob charlie\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String MESSAGE_LOCATE_SUCCESS \u003d \"Locate successful\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String MESSAGE_NO_PERSON \u003d \"Locate Command unsuccessful: \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            + \"No such person with those keyword(s) found!\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String MESSAGE_LOCATE_SELECT \u003d \"More than one person found! \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String MESSAGE_NOADDRESS_PERSON \u003d \"This person has no address!\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private final int target \u003d 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private final int targetOne \u003d 1;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private final Predicate\u003cPerson\u003e predicate;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public LocateCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public LocateCommand() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        predicate \u003d null;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        if (model.getFilteredPersonList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_NO_PERSON));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        } else if (model.getFilteredPersonList().size() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            Person person \u003d lastShownList.get(target);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            String address \u003d person.getAddress().toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            if (address.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NOADDRESS_PERSON));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                // Open Google Map on BrowserPanel"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                MainWindow.loadUrl(\"https://www.google.com.sg/maps/place/\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                        + address);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                EventsCenter.getInstance().post(new LocateRequestEvent(target));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_LOCATE_SUCCESS));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            Person person \u003d lastShownList.get(target);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            String address \u003d person.getAddress().toString();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            if (address.length() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                throw new CommandException(String.format(MESSAGE_NOADDRESS_PERSON));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                // Open Google Map on BrowserPanel"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                MainWindow.loadUrl(\"https://www.google.com.sg/maps/place/\""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                        + address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                EventsCenter.getInstance().post(new LocateRequestEvent(target));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                return new CommandResult(String.format(MESSAGE_LOCATE_SELECT, targetOne));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((LocateCommand) other).predicate));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD + \" -\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getTemplate().length();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 112,
      "jonleeyz": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PopulatableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * This interface is utilised in the {@code ExecuteCommandRequestEvent} class, where it is used"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * to provide a handle to {@code Commands} that immediately execute on press of their respective"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " * keyboard shortcuts."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public interface PopulatableCommand {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the command word of the Command */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    String getCommandWord();"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the complete template (command word + all prefixes) of the Command */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    String getTemplate();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the index where the cursor should be after population of the Command */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    int getCaretIndex();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /** Returns the usage message of the Command */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    String getUsageMessage();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Redo the previously undone command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class RedoCommand extends Command implements ImmediatelyExecutableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \"Redo success! Press Ctrl + Z or type \\\"undo\\\" to reverse the last redo command.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canRedo()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popRedo().redo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 10,
      "zhangriqi": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class SelectCommand extends Command implements PopulatableCommand {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String COMMAND_TEMPLATE \u003d COMMAND_WORD + \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            COMMAND_WORD + \" | Selects the person identified by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Refer to the User Guide (press \\\"F1\\\") for detailed information about this command!\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Parameters:\\t\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"INDEX (must be a positive integer)\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"\\n\\t\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + \"Example:\\t\\t\" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * For call in PopulatePrefixRequestEvent class, to assign string values."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public SelectCommand() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        targetIndex \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getTemplate() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_TEMPLATE;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretIndex() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getTemplate().length();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getUsageMessage() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return MESSAGE_USAGE;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 43,
      "zhangriqi": 1,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Undo the previous {@code UndoableCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class UndoCommand extends Command implements ImmediatelyExecutableCommand {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \"Undo success!  Press Ctrl + Y or type \\\"redo\\\" to reverse the last undo command.\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canUndo()) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popUndo().undo();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public String getCommandWord() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 10,
      "zhangriqi": 1,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY_BORROWED;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWEDUEDATE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWESTARTDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.LateInterest;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_TYPE, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_MONEY_BORROWED, PREFIX_OWESTARTDATE, PREFIX_OWEDUEDATE,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        PREFIX_INTEREST);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //TODO: add test case"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //@@author melvintzw"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_TYPE)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || !argMultimap.getPreamble().isEmpty()"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || !argMultimap.getValue(PREFIX_TYPE).get().matches(\"[cCrR]\")) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).orElse(new Phone());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).orElse(new Email());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).orElse(new Address());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_TYPE).get().matches(\"[cC]\")) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Date oweStartDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_OWESTARTDATE)).orElse(new Date(0));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Date oweDueDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_OWEDUEDATE)).orElse(new Date(0));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                if (oweDueDate.compareTo(oweStartDate) \u003c 0) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    throw new ParseException(\"OWE_DUE_DATE cannot be before OWE_START_DATE\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                MoneyBorrowed moneyBorrowed \u003d ParserUtil.parseMoneyBorrowed(argMultimap.getValue(PREFIX_MONEY_BORROWED))"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .orElse(new MoneyBorrowed());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                StandardInterest standardInterest \u003d ParserUtil.parseStandardInterest(argMultimap"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .getValue(PREFIX_INTEREST)).orElse(new StandardInterest());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Customer customer \u003d new Customer(name, phone, email, address, tagList, moneyBorrowed,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        oweStartDate, oweDueDate, standardInterest, new LateInterest(), new Runner());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                return new AddCommand(customer);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            } else if (argMultimap.getValue(PREFIX_TYPE).get().matches(\"[rR]\")) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                if (argMultimap.getValue(PREFIX_MONEY_BORROWED).isPresent()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        || argMultimap.getValue(PREFIX_OWEDUEDATE).isPresent()"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        || argMultimap.getValue(PREFIX_OWESTARTDATE).isPresent()"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        || argMultimap.getValue(PREFIX_INTEREST).isPresent()) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            AddCommand.MESSAGE_INVALID_PREFIX));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Runner runner \u003d new Runner(name, phone, email, address, tagList, new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                return new AddCommand(runner);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 1,
      "melvintzw": 88,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.logic.commands.LocateCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        final String commandWord \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        //@@author zhangriqi"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case LocateCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case LocateCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            return new LocateCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case AssignCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case AssignCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new AssignCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 15,
      "melvintzw": 5,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AssignCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.core.index.Index.fromOneBased;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMERS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class AssignCommandParser implements Parser\u003cAssignCommand\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public AssignCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_CUSTOMERS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Index runnerIndex; //parameter for AssignCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Index[] customerIndexArray; //parameter for AssignCommand"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runnerIndex \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            String customers \u003d argMultimap.getValue(PREFIX_CUSTOMERS).get();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            List\u003cIndex\u003e customerIndexList \u003d parseCustIndex(customers);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customerIndexArray \u003d customerIndexList.toArray(new Index[customerIndexList.size()]);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new AssignCommand(runnerIndex, customerIndexArray);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a string of customer numbers (representing indices) into a list of Index objects"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @param customers a string of numbers presenting indices"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private static List\u003cIndex\u003e parseCustIndex(String customers) throws IllegalValueException, NumberFormatException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String[] splitIndices \u003d customers.split(\"\\\\s\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (String s : splitIndices) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            int index \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            indexList.add(fromOneBased(index));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (indexList.size() \u003c 1) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(\"no customer index has been specified\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return indexList;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 75
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final Prefix PREFIX_TYPE \u003d new Prefix(\"ty:\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n:\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p:\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e:\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a:\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t:\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final Prefix PREFIX_MONEY_BORROWED \u003d new Prefix(\"m:\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final Prefix PREFIX_OWESTARTDATE \u003d new Prefix(\"s:\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final Prefix PREFIX_OWEDUEDATE \u003d new Prefix(\"d:\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final Prefix PREFIX_INTEREST \u003d new Prefix(\"i:\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final Prefix PREFIX_CUSTOMERS \u003d new Prefix(\"c:\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 6,
      "melvintzw": 6,
      "-": 9
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY_BORROWED;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWEDUEDATE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWESTARTDATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TAG,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        PREFIX_MONEY_BORROWED, PREFIX_INTEREST, PREFIX_OWEDUEDATE, PREFIX_OWESTARTDATE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).ifPresent(editPersonDescriptor::setAddress);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            parseTagsForEdit(argMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //@@author melvintzw"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_OWESTARTDATE).isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Date oweStartDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_OWESTARTDATE).get());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                editPersonDescriptor.setOweStartDate(oweStartDate);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_OWEDUEDATE).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Date oweDueDate \u003d ParserUtil.parseDate(argMultimap.getValue(PREFIX_OWEDUEDATE).get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                editPersonDescriptor.setOweDueDate(oweDueDate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_MONEY_BORROWED).isPresent()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                MoneyBorrowed moneyBorrowed \u003d ParserUtil.parseMoneyBorrowed(argMultimap.getValue(PREFIX_MONEY_BORROWED)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .get());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                editPersonDescriptor.setMoneyBorrowed(moneyBorrowed);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (argMultimap.getValue(PREFIX_INTEREST).isPresent()) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                StandardInterest standardInterest \u003d ParserUtil.parseStandardInterest(argMultimap.getValue"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        (PREFIX_INTEREST).get());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                editPersonDescriptor.setStandardInterest(standardInterest);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 1,
      "melvintzw": 64,
      "-": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //@@author melvintzw"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String[] arguments \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String[] keywords;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //check arguments[0] for specifier"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (arguments[0].matches(\"\\\\p{Alnum}+.*+\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(arguments)));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        switch (arguments[0]) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-all\":"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-n\":"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-p\":"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-e\":"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-a\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        case \"-t\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new FindCommand(new TagsContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 41,
      "-": 26
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/LocateCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author zhangriqi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.logic.commands.LocateCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " * Parse input arguments and create a new LocateCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "public class LocateCommandParser implements Parser\u003cLocateCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public LocateCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        String[] arguments \u003d trimmedArgs.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        String[] keywords;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        //check arguments[0] for specifier"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        if (arguments[0].matches(\"\\\\p{Alnum}+.++\")) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            return new LocateCommand(new PersonContainsKeywordsPredicate(Arrays.asList(arguments)));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        switch (arguments[0]) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case \"-n\":"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            return new LocateCommand(new NameContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case \"-p\":"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            return new LocateCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case \"-e\":"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            return new LocateCommand(new EmailContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case \"-a\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            return new LocateCommand(new AddressContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        case \"-t\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            keywords \u003d Arrays.copyOfRange(arguments, 1, arguments.length);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            return new LocateCommand(new TagsContainsKeywordsPredicate(Arrays.asList(keywords)));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, LocateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "}"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/Parser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Parser that is able to parse user input into a {@code Command} of type {@code T}."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Parser\u003cT extends Command\u003e {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a command and returns it."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if {@code userInput} does not conform the expected format"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    T parse(String userInput) throws ParseException, ParseException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 1,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import com.joestelmach.natty.DateGroup;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import com.joestelmach.natty.Parser;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.LateInterest;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String name} into a {@code Name}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code name} is invalid."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Name parseName(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Name.isValidName(trimmedName)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Name(trimmedName);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String phone} into a {@code Phone}."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code phone} is invalid."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Phone parsePhone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Phone.isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Phone(trimmedPhone);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(parsePhone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String address} into an {@code Address}."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code address} is invalid."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Address parseAddress(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedAddress \u003d address.trim();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Address.isValidAddress(trimmedAddress)) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Address(trimmedAddress);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String email} into an {@code Email}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code email} is invalid."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Email parseEmail(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Email.isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Email(trimmedEmail);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code String tag} into a {@code Tag}."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given {@code tag} is invalid."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Tag parseTag(String tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedTag \u003d tag.trim();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!Tag.isValidTagName(trimmedTag)) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Tag(trimmedTag);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(parseTag(tagName));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //@@author melvintzw"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code String date} into an {@code Date}."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws IllegalValueException if the given {@code date} is invalid."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Date parseDate(String date) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String trimmedDate \u003d date.trim();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        com.joestelmach.natty.Parser dateParser \u003d new Parser();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cDateGroup\u003e dateGroups \u003d dateParser.parse(trimmedDate);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return dateGroups.get(0).getDates().get(0);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e date} into an {@code Optional\u003cDate\u003e} if {@code date} is present."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Optional\u003cDate\u003e parseDate(Optional\u003cString\u003e date) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(date);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return date.isPresent() ? Optional.of(parseDate(date.get())) : Optional.empty();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //TODO: add methods to parse Customer fields and Runner fields"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code string double} into an {@code MoneyBorrowed}."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws IllegalValueException if the given {@code MoneyBorrowed} is invalid."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static MoneyBorrowed parseMoneyBorrowed(String moneyBorrowed) throws IllegalValueException {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(moneyBorrowed);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new MoneyBorrowed(Double.parseDouble(moneyBorrowed));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(MoneyBorrowed.MESSAGE_MONEY_BORROWED_DOUBLE_ONLY);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(MoneyBorrowed.MESSAGE_MONEY_BORROWED_NO_NEGATIVE);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e moneyBorrowed} into an {@code Optional\u003cMoneyBorrowed\u003e} if {@code moneyBorrowed}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * is present."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Optional\u003cMoneyBorrowed\u003e parseMoneyBorrowed(Optional\u003cString\u003e moneyBorrowed) throws"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            IllegalValueException {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(moneyBorrowed);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return moneyBorrowed.isPresent() ? Optional.of(parseMoneyBorrowed(moneyBorrowed.get())) : Optional.empty();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code string double} into an {@code StandardInterest}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws IllegalValueException if the given {@code StandardInterest} is invalid."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static StandardInterest parseStandardInterest(String value) throws IllegalValueException {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d value.trim();"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new StandardInterest(Double.parseDouble(value));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(StandardInterest.MESSAGE_STANDARD_INTEREST_DOUBLE_ONLY);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(StandardInterest.MESSAGE_STANDARD_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e standardInterest} into an {@code Optional\u003cStandardInterest\u003e} if {@code"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * value} is present."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Optional\u003cStandardInterest\u003e parseStandardInterest(Optional\u003cString\u003e value) throws"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            IllegalValueException {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return value.isPresent() ? Optional.of(parseStandardInterest(value.get())) : Optional.empty();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code string double} into an {@code LateInterest}."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws IllegalValueException if the given {@code LateInterest} is invalid."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static LateInterest parseLateInterest(String value) throws IllegalValueException {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d value.trim();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new LateInterest(Double.parseDouble(value));"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(LateInterest.MESSAGE_LATE_INTEREST_DOUBLE_ONLY);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (IllegalArgumentException iae) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(LateInterest.MESSAGE_LATE_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e lateInterest} into an {@code Optional\u003cLateInterest\u003e} if {@code"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * value} is present."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static Optional\u003cLateInterest\u003e parseLateInterest(Optional\u003cString\u003e value) throws IllegalValueException {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        requireNonNull(value);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return value.isPresent() ? Optional.of(parseLateInterest(value.get())) : Optional.empty();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 2,
      "melvintzw": 127,
      "-": 167
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003cPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e syncedPersonList \u003d newData.getPersonList().stream()"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(this::syncWithMasterTagList)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(syncedPersonList);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"AddressBooks should not have duplicate persons\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the person to point to those in {@link #tags}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(Person p) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d syncWithMasterTagList(p);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(person);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedPerson}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedPerson}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncWithMasterTagList(Person)"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedPerson);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        Person syncedEditedPerson \u003d syncWithMasterTagList(editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, syncedEditedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     *  Updates the master tag list to include tags in {@code person} that are not in the list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @return a copy of this {@code person} such that every tag in this person points to a Tag object in the master"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *  list."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person syncWithMasterTagList(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking person tag references"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // Rebuild the list of person, customer or runner tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (person instanceof Customer) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Customer(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    correctTagReferences, ((Customer) person).getMoneyBorrowed(), ((Customer) person).getOweStartDate"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    (), ((Customer) person).getOweDueDate(), ((Customer) person).getStandardInterest(), ((Customer)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    person).getLateInterest(), ((Customer) person).getRunner());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else if (person instanceof Runner) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Runner(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    correctTagReferences, ((Runner) person).getCustomers());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Person(person.getName(), person.getPhone(), person.getEmail(), person.getAddress(),"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    correctTagReferences);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removePerson(Person key) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (persons.remove(key)) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new PersonNotFoundException();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(persons, tags);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 19,
      "-": 184
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given person. */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(Person target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given person */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(Person person) throws DuplicatePersonException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    ObservableList\u003cPerson\u003e getFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 3,
      "-": 47
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code Person} backed by the internal list of"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public ObservableList\u003cPerson\u003e getFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 14,
      "-": 113
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Person addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * empty string is a valid input"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"^$|[^\\\\s].*\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Address() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Address}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param address A valid address."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d address;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person email."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 7,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/AddressContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class AddressContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public AddressContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //test existence of keywords in person\u0027s address."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof AddressContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((AddressContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d \"Person emails should be of this format: local-part@domain \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"2. The domain name must:\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - be at least 2 characters long\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"    - start and end with alphanumeric characters\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"    - be alphanumeric with the exception that dashes and periods can be used to seperate words\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    // alphanumeric and special characters"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"^$|\" + LOCAL_PART_REGEX + \"@\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Email() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an {@code Email}."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param email A valid email address."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d email;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid person email."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 9,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/EmailContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class EmailContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public EmailContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //test existence of keywords in person\u0027s full name and tags."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //TODO: write helper method here or in Email class to extract values before \u0027@\u0027 symbol in email address."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof EmailContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((EmailContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/NameContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class NameContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public NameContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //test existence of keywords in person\u0027s full name and tags."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof NameContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((NameContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Name name;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Phone phone;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Email email;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Address address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private PersonType type;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Person() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.name \u003d new Name(\"Not Assigned\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.phone \u003d new Phone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.email \u003d new Email();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.address \u003d new Address();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        type \u003d PersonType.PERSON;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new UniqueTagList(tags);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        type \u003d PersonType.PERSON;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonType getType() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return type;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void setType(PersonType type) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.type \u003d type;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Person)) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person otherPerson \u003d (Person) other;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getName())"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * enum to distinguish whether a given Person is a Customer or Runner"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public enum PersonType {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        PERSON, CUSTOMER, RUNNER;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "melvintzw": 33,
      "-": 99
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PersonContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class PersonContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //test existence of keywords in person\u0027s full name, address and tags."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String stringOfTags \u003d getStringOfTags(person);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getName().fullName, keyword))"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(stringOfTags, keyword))"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getAddress().value, keyword))"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getEmail().value, keyword))"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || keywords.stream()"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private String getStringOfTags(Person person) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String stringOfTags \u003d \"\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Tag x : person.getTags()) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            stringOfTags \u003d stringOfTags + \" \" + x.tagName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return stringOfTags.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof PersonContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((PersonContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 46,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"Phone numbers can be empty but if it contains something then it should only contain numbers, \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            + \"and should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"^$|\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Phone() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d \"\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param phone A valid phone number."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(isValidPhone(phone), MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d phone;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person phone number."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 7,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/PhoneContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class PhoneContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PhoneContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //test existence of keywords in person\u0027s phone."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(person.getPhone().value, keyword));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof PhoneContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((PhoneContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/TagsContainsKeywordsPredicate.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Tests that a {@code Person}\u0027s {@code Name} matches any of the keywords given."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class TagsContainsKeywordsPredicate implements Predicate\u003cPerson\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final List\u003cString\u003e keywords;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public TagsContainsKeywordsPredicate(List\u003cString\u003e keywords) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.keywords \u003d keywords;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //test existence of keywords in person\u0027s full name and tags."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean test(Person person) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String stringOfTags \u003d getStringOfTags(person);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return keywords.stream()"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    .anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase(stringOfTags, keyword));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private String getStringOfTags(Person person) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String stringOfTags \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Tag x : person.getTags()) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            stringOfTags \u003d stringOfTags + \" \" + x.tagName;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return stringOfTags.trim();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof TagsContainsKeywordsPredicate // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.keywords.equals(((TagsContainsKeywordsPredicate) other).keywords)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 46
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/customer/Customer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Represents a customer in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Guarantees: details are present and not null, field values are validated, immutable."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class Customer extends Person {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final Date oweStartDate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final Date oweDueDate;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final StandardInterest standardInterest; //in percent"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final LateInterest lateInterest; //in percent"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final Person runner;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * customer constructor"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Customer() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.setType(PersonType.CUSTOMER);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.moneyBorrowed \u003d new MoneyBorrowed();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweStartDate \u003d new Date(0);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweDueDate \u003d new Date(0);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.standardInterest \u003d new StandardInterest();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.lateInterest \u003d new LateInterest();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.runner \u003d new Runner();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Customer(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    MoneyBorrowed moneyBorrowed, Date oweStartDate, Date oweDueDate, StandardInterest"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            standardInterest, LateInterest lateInterest, Person runner) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.setType(PersonType.CUSTOMER);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.moneyBorrowed \u003d moneyBorrowed;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.standardInterest \u003d standardInterest;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.lateInterest \u003d lateInterest;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweStartDate \u003d oweStartDate;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweDueDate \u003d oweDueDate;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.runner \u003d runner;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public MoneyBorrowed getMoneyBorrowed() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return moneyBorrowed;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public StandardInterest getStandardInterest() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return standardInterest;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Date getOweStartDate() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return oweStartDate;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Date getOweDueDate() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return oweDueDate;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public LateInterest getLateInterest() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return lateInterest;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Person getRunner() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return runner;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @return amount of money owed, after compounded standardInterest, based on num of weeks that has passed since"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * oweStartDate"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public double getMoneyCurrentlyOwed() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final int numOfMsPerWeek \u003d 60 * 60 * 24 * 7 * 1000; //10080 seconds per week; 1000 ms per second"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Date currentDate \u003d new Date();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        long elapsedTime \u003d currentDate.getTime() - oweStartDate.getTime();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (elapsedTime \u003c 0) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return moneyBorrowed.value;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        long elapsedWeeks \u003d elapsedTime / numOfMsPerWeek;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return moneyBorrowed.value * Math.pow(1 + standardInterest.value / 100, (double) elapsedWeeks);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!(other instanceof Customer)) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Customer otherPerson \u003d (Customer) other;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getName() + \";\")"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getPhone() + \";\")"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getEmail() + \";\")"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getAddress() + \";\")"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        SimpleDateFormat simpledate \u003d new SimpleDateFormat(\"EEE, d MMM yyyy\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String oweStartDate \u003d simpledate.format(getOweStartDate());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String oweDueDate \u003d simpledate.format(getOweDueDate());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        builder.append(\"\\nMoney Owed: \")"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(String.format(\"$%.2f\", getMoneyCurrentlyOwed()))"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Weekly Interest Rate: \")"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getStandardInterest() + \"%\" + \";\")"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Start Date: \")"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(oweStartDate + \";\")"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Due Date: \")"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(oweDueDate)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\"\\nRunner Assigned: \")"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(runner.getName());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 143
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/customer/LateInterest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Represents a customer\u0027s late interest rate."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class LateInterest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_LATE_INTEREST_DOUBLE_ONLY \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED can only contain numbers\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_LATE_INTEREST_NO_NEGATIVE \u003d"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED cannot be negative\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public LateInterest() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @param value an amount borrowed form the loanshark"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public LateInterest(double value) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        checkArgument(isValidInterest(value), MESSAGE_LATE_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Returns true if a give value is zero or positive, returns false otherwise"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static boolean isValidInterest(double test) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return (!(test \u003c 0));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof LateInterest // instanceof handles nulls"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.value \u003d\u003d ((LateInterest) other).value); // state check"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new Double(value).hashCode();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 66
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/customer/MoneyBorrowed.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Represents a customer\u0027s amount of money that he/she borrowed."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class MoneyBorrowed {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_MONEY_BORROWED_DOUBLE_ONLY \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED can only contain numbers\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_MONEY_BORROWED_NO_NEGATIVE \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED cannot be negative\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public MoneyBorrowed() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @param value an amount borrowed form the loanshark"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public MoneyBorrowed(double value) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        checkArgument(isValidMoneyBorrowed(value), MESSAGE_MONEY_BORROWED_NO_NEGATIVE);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Returns true if a given value is zero or positive, returns false otherwise"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static boolean isValidMoneyBorrowed(double test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return (!(test \u003c 0));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof MoneyBorrowed // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.value \u003d\u003d ((MoneyBorrowed) other).value); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new Double(value).hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/customer/StandardInterest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Represents a customer\u0027s standard interest rate."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Guarantees: immutable;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class StandardInterest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_STANDARD_INTEREST_DOUBLE_ONLY \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED can only contain numbers\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MESSAGE_STANDARD_INTEREST_NO_NEGATIVE \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            \"MONEY_BORROWED cannot be negative\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public final double value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public StandardInterest() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        value \u003d 0;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Constructs a {@code Phone}."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @param value an amount borrowed form the loanshark"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public StandardInterest(double value) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        checkArgument(isValidInterest(value), MESSAGE_STANDARD_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.value \u003d value;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Returns true if a give value is zero or positive, returns false otherwise"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static boolean isValidInterest(double test) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return (!(test \u003c 0));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return Double.toString(value);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                || (other instanceof StandardInterest // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 this.value \u003d\u003d ((StandardInterest) other).value); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new Double(value).hashCode();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/runner/Runner.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.model.person.runner;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Represents a runner in the address book."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class Runner extends Person {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private final List\u003cPerson\u003e customers;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Runner() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.setType(PersonType.RUNNER);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Runner(Name name, Phone phone, Email email, Address address, Set\u003cTag\u003e tags, List\u003cPerson\u003e customers) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        super(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.setType(PersonType.RUNNER);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.customers \u003d customers;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public List\u003cPerson\u003e getCustomers() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return customers;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!(other instanceof Runner)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Runner otherPerson \u003d (Runner) other;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return otherPerson.getName().equals(this.getName())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 otherPerson.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 otherPerson.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 otherPerson.getAddress().equals(this.getAddress());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        builder.append(\"Name: \")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getName() + \";\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getPhone() + \";\")"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getEmail() + \";\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(getAddress() + \";\")"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        builder.append(\"\\n\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        builder.append(\"Customers: \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (customers.size() \u003e 0) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            builder.append(customers.get(0).getName());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (customers.size() \u003e 1) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            for (int i \u003d 1; i \u003c customers.size(); i++) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                builder.append(\", \");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                builder.append(customers.get(i).getName());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 82
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.GregorianCalendar;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.LateInterest;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return new Person[]{"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new Customer(new Name(\"Xiao Ming\"), new Phone(\"88888888\"), new Email(\"xiao@ming.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new Address(\"The Fullerton\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    getTagSet(\"richxiaoming\", \"mingdynasty\", \"HighSES\"), new MoneyBorrowed(314159265),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    createDate(2017, 5, 7), createDate(2018, 5, 7),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new StandardInterest(9.71), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new Customer(new Name(\"Korean Defender\"), new Phone(\"99994321\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new Email(\"kalbitanglover@tourism.korea.com\"), new Address(\"The Hwang\u0027s\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    getTagSet(\"defenderOfTheFree\", \"defenderOfKalbiTang\", \"yummeh\", \"UTownHeritage\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new MoneyBorrowed(413255),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    createDate(2010, 10, 3), createDate(2019, 1, 1),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new StandardInterest(5.4), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new Customer(new Name(\"Bob the Builder\"), new Phone(\"92334532\"), new Email(\"bob@bobthebuilder.com\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new Address(\"IKEA Alexandra\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    getTagSet(\"FatherOfHDB\", \"InBobWeTrust\"), new MoneyBorrowed(0.24),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    createDate(1965, 8, 9), createDate(2015, 8, 9),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new StandardInterest(0.0005), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new Runner(new Name(\"Ah Seng\"), new Phone(\"90011009\"), new Email(\"quick_and_easy_money@hotmail.com\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new Address(\"Marina Bay Sands\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    getTagSet(\"EmployeeOfTheMonth\", \"InvestorFirstGrade\", \"HighSES\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new Runner(new Name(\"Mas Selamat Kastari\"), new Phone(\"999\"), new Email(\"kastari@johorbahru.my\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new Address(\"Internal Security Department\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    getTagSet(\"BeatTheSystem\", \"BeatByTheSystem\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new Customer(new Name(\"Aunty Kim\"), new Phone(\"99994321\"), new Email(\"hotkorean1905@hotmail.com\"),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new Address(\"I\u0027m Kim Korean BBQ\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    getTagSet(\"RichAunty\", \"KBBQBossLady\", \"Aunty\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new MoneyBorrowed(413255),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    createDate(2010, 10, 3), createDate(2019, 1, 1),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new StandardInterest(5.4), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new Runner(new Name(\"Leon Tay\"), new Phone(\"93498349\"), new Email(\"laoda@leontay349.com\"),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new Address(\"Bao Mei Boneless Chicken Rice\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    getTagSet(\"LaoDa\", \"349\", \"Joker\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new Runner(new Name(\"Ping An\"), new Phone(\"93698369\"), new Email(\"pingan@houseofahlong.com\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new Address(\"Ang Mo Kio Police Divison HQ\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    getTagSet(\"UndercoverRunner\", \"TripleAgent\", \"Joker\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new Customer(new Name(\"Da Ming\"), new Phone(\"83699369\"), new Email(\"da@ming.com\"),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new Address(\"Fountain of Wealth\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    getTagSet(\"RicherDaMing\", \"BigMing\", \"MingSuperior\", \"mingdynasty\"), new MoneyBorrowed(98789060),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    createDate(2017, 3, 1), createDate(2020, 12, 5),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                    new StandardInterest(3.14), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //@@author melvintzw"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"The Terminator\"), new Phone(\"84444448\"), new Email(\"protection@money.com\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Fountain of Wealth\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"Arnold\", \"HealthIsWealth\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"Donny J\"), new Phone(\"0013451945\"), new Email(\"protection@money.com\"),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Changi Prison Complex\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"Inactive\", \"Disavowed\", \"Joker\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Zhong Ming\"), new Phone(\"91121345\"), new Email(\"important@ming.com\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Merlion\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"ImportantMing\", \"ZhongMing\", \"MingGreatest\", \"mingdynasty\", \"HighSES\"),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new MoneyBorrowed(98789060),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2014, 6, 7), createDate(2016, 11, 9),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(1.75), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Runner(new Name(\"Wu Lui\"), new Phone(\"90011009\"), new Email(\"nigerian_prince@bankofchina.com\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"The LINQ Hotel \u0026 Casino\"),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"OnTheStrip\", \"HighRoller\"), new ArrayList\u003c\u003e()),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Queen Samsung\"), new Phone(\"000\"), new Email(\"king@kim.com\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Samsung Innovation Museum\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"Korean\", \"Royalty\", \"Untouchable\", \"HighSES\"), new MoneyBorrowed(999999999),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2000, 1, 1), createDate(2112, 12, 12),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(0.01), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Ma Qing Da Wen\"), new Phone(\"764543543123\"), new Email(\"important@ming.com\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Town Green\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"ForeignContact\", \"Code49\"), new MoneyBorrowed(1124),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2003, 4, 11), createDate(2028, 5, 29),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(5.76), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Lim Tin Ken\"), new Phone(\"81140976\"), new Email(\"limtincan@u.nus.edu\"),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Cinnamon College\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"USP\", \"Cinnamonster\"), new MoneyBorrowed(0.1),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2018, 4, 1), createDate(2018, 11, 11),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(1000), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Master Wu Gui\"), new Phone(\"94523112\"), new Email(\"turtle@dojo.net\"),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"The Singapore Island Country Club\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"MOJO\", \"HighSES\"), new MoneyBorrowed(645644),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2012, 3, 17), createDate(2015, 7, 30),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(0.9), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            new Customer(new Name(\"Hilarious Kleiny\"), new Phone(\"91208888\"), new Email(\"turtle@dojo.net\"),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new Address(\"Institute of Mental Health\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    getTagSet(\"SiaoLiao\", \"Joker\"), new MoneyBorrowed(12064543),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    createDate(2010, 10, 10), createDate(2022, 9, 22),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    new StandardInterest(2.309), new LateInterest(), new Runner()),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        };"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * helper method to generate a custom meaningful date."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private static Date createDate(int year, int month, int dayOfMonth) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return createDate(year, month, dayOfMonth, 0, 0, 0);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * helper method to generate a custom meaningful date."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private static Date createDate(int year, int month, int dayOfMonth, int hourOfDay, int minute, int second) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        GregorianCalendar calendar \u003d new GregorianCalendar(year, month, dayOfMonth, hourOfDay, minute, second);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return calendar.getTime();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 43,
      "melvintzw": 71,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/HtmlWriter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "//@@author Der-Erlkonig"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": " * Writes Person Data to a HTML file"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "public class HtmlWriter {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public static final String OPENING_LINE \u003d \"\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003chead\u003e\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            + \"\u003cbody style\u003d\\\"background-color:#CEDBFB;\\\"\\n\u003e\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            + \"\u003cfont face\u003d\\\"Segoe UI\\\" size\u003d\\\"5\\\" color\u003d\\\"black\\\"\u003e\""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            + \"\u003ctable\u003e\u003ctr\u003e\u003cth align\u003d\\\"left\\\" colspan\u003d\\\"2\\\"\u003e\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String email;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String address;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String amountBorrowed;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String interestRate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String amountCurrentlyOwed;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String oweStartDate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String oweDueDate;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final String runnerAssigned;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final List\u003cPerson\u003e customerList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private final SimpleDateFormat simpledate \u003d new SimpleDateFormat(\"EEE, d MMM yyyy\");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public HtmlWriter() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.name \u003d null;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.phone \u003d null;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.address \u003d null;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.email \u003d null;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.amountBorrowed \u003d null;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.interestRate \u003d null;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.amountCurrentlyOwed \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.oweStartDate \u003d null;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.oweDueDate \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.runnerAssigned \u003d null;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.customerList \u003d null;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * Constructs HtmlWriter with Customer\u0027s details"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * @param customer"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public HtmlWriter(Customer customer) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.name \u003d customer.getName().fullName;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.phone \u003d customer.getPhone().value;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.address \u003d customer.getAddress().value;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.email \u003d customer.getEmail().value;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.amountBorrowed \u003d String.format(\"%,.2f\", customer.getMoneyBorrowed().value);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.interestRate \u003d customer.getStandardInterest().toString();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.amountCurrentlyOwed \u003d String.format(\"%,.2f\", customer.getMoneyCurrentlyOwed());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.oweStartDate \u003d simpledate.format(customer.getOweStartDate());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.oweDueDate \u003d simpledate.format(customer.getOweDueDate());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.runnerAssigned \u003d customer.getRunner().getName().fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.customerList \u003d null;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * Constructs HtmlWriter with Runner\u0027s Details"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * @param runner"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public HtmlWriter(Runner runner) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.name \u003d runner.getName().fullName;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.phone \u003d runner.getPhone().value;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.email \u003d runner.getEmail().value;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.address \u003d runner.getAddress().value;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.amountBorrowed \u003d \"\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.interestRate \u003d \"\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.amountCurrentlyOwed \u003d \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.oweStartDate \u003d \"\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.oweDueDate \u003d \"\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.runnerAssigned \u003d \"\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        this.customerList \u003d runner.getCustomers();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * Writes Customer\u0027s data to a HTML file and returns the file location"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String writeCustomer() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        String filepath \u003d System.getProperty(\"user.dir\") + File.separator + \"PersonPage.html\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        String absoluteFilepath;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            PrintWriter printWriter \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.print(OPENING_LINE);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(name + \"\u003c/th\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd style\u003d\\\"width: 240px;\\\"\u003ephone: \u003c/td\u003e\u003ctd\u003e\" + phone + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eaddress: \u003c/td\u003e\u003ctd\u003e\" + address + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eemail: \u003c/td\u003e\u003ctd\u003e\" + email + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eamount borrowed: \u003c/td\u003e\u003ctd\u003e$\" + amountBorrowed + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003einterest (weekly): \u003c/td\u003e\u003ctd\u003e\" + interestRate + \"%\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eamount owed: \u003c/td\u003e\u003ctd\u003e$\" + amountCurrentlyOwed + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003estart date: \u003c/td\u003e\u003ctd\u003e\" + oweStartDate + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003edue date: \u003c/td\u003e\u003ctd\u003e\" + oweDueDate + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003erunner assigned: \u003c/td\u003e\u003ctd\u003e\" + runnerAssigned + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003c/table\u003e\u003c/body\u003e\u003c/html\u003e\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.close();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        absoluteFilepath \u003d file.getAbsolutePath();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        absoluteFilepath \u003d absoluteFilepath.replaceAll(\"\\\"\", \"/\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return absoluteFilepath;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * Writes Runner\u0027s data to HTML file and returns the file location"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * @return"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String writeRunner() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        String filepath \u003d System.getProperty(\"user.dir\") + File.separator + \"PersonPage.html\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        String absoluteFilepath;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        File file \u003d new File(filepath);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        int customerListSize \u003d customerList.size();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            PrintWriter printWriter \u003d new PrintWriter(file);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.print(OPENING_LINE);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(name + \"\u003c/th\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd style\u003d\\\"width: 120px;\\\"\u003ephone: \u003c/td\u003e\u003ctd\u003e\" + phone + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eemail: \u003c/td\u003e\u003ctd\u003e\" + email + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003ctr\u003e\u003ctd\u003eaddress: \u003c/td\u003e\u003ctd\u003e\" + address + \"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003c/table\u003e\u003cbr\u003e\u003cbr\u003e\u003ctable\u003e\u003ctr\u003e\u003cth align\u003d\\\"left\\\"\u003e\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"Customers Assigned [\" + customerListSize + \"]\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003c/th\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            for (Person eachCustomer: customerList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                printWriter.println(\"\u003ctr\u003e\u003ctd\u003e\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                printWriter.println(\"- \" + eachCustomer.getName().fullName);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                printWriter.println(\"\u003c/td\u003e\u003c/tr\u003e\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.println(\"\u003c/table\u003e\u003c/body\u003e\u003c/html\u003e\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            printWriter.close();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        } catch (FileNotFoundException e) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        absoluteFilepath \u003d file.getAbsolutePath();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        absoluteFilepath \u003d absoluteFilepath.replaceAll(\"\\\"\", \"/\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return absoluteFilepath;"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getAmountBorrowed() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return amountBorrowed;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getInterestRate() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return interestRate;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getAmountCurrentlyOwed() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return amountCurrentlyOwed;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getOweStartDate() {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return oweStartDate;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getOweDueDate() {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return oweDueDate;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public String getRunnerAssigned() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return runnerAssigned;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public List getCustomerList() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        return customerList;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 1,
      "Der-Erlkonig": 195
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.LateInterest;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Person\u0027s %s field is missing!\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Person.PersonType personType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Customer fields"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private StandardInterest standardInterest;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private LateInterest lateInterest;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Date oweStartDate;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Date oweDueDate;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private XmlAdaptedPerson runner;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Runner fields"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Constructs an {@code XmlAdaptedPerson} with the given person details."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public XmlAdaptedPerson(String name, String phone, String email, String address, List\u003cXmlAdaptedTag\u003e tagged) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.name \u003d name;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.phone \u003d phone;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.email \u003d email;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (tagged !\u003d null) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.personType \u003d Person.PersonType.PERSON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public XmlAdaptedPerson(Person source) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        personType \u003d source.getType();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (source instanceof Customer) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            moneyBorrowed \u003d ((Customer) source).getMoneyBorrowed();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            standardInterest \u003d ((Customer) source).getStandardInterest();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            lateInterest \u003d ((Customer) source).getLateInterest();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            oweStartDate \u003d ((Customer) source).getOweStartDate();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            oweDueDate \u003d ((Customer) source).getOweDueDate();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runner \u003d new XmlAdaptedPerson(((Customer) source).getRunner());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (source instanceof Runner) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            for (Person person : ((Runner) source).getCustomers()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                customers.add(new XmlAdaptedPerson(person));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (this.name \u003d\u003d null) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!Name.isValidName(this.name)) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (this.phone \u003d\u003d null) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Phone.class.getSimpleName()));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!Phone.isValidPhone(this.phone)) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (this.email \u003d\u003d null) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!Email.isValidEmail(this.email)) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (this.address \u003d\u003d null) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!Address.isValidAddress(this.address)) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (this.personType \u003d\u003d Person.PersonType.CUSTOMER) {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //moneyBorrowed"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (this.moneyBorrowed \u003d\u003d null) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, MoneyBorrowed.class"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (!MoneyBorrowed.isValidMoneyBorrowed(this.moneyBorrowed.value)) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(MoneyBorrowed.MESSAGE_MONEY_BORROWED_NO_NEGATIVE);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            final MoneyBorrowed moneyBorrowed \u003d new MoneyBorrowed(this.moneyBorrowed.value);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //oweStartDate"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (this.oweStartDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        ()));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            final Date oweStartDate \u003d this.oweStartDate;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //oweDueDate"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (this.oweDueDate \u003d\u003d null) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Date.class.getSimpleName"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        ()));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            final Date oweDueDate \u003d this.oweDueDate;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //standardInterest"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (this.standardInterest \u003d\u003d null) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, StandardInterest.class"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (!standardInterest.isValidInterest(this.standardInterest.value)) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(standardInterest.MESSAGE_STANDARD_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            final StandardInterest standardInterest \u003d this.standardInterest;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //lateInterest"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (this.lateInterest \u003d\u003d null) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, LateInterest.class"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (!standardInterest.isValidInterest(this.lateInterest.value)) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(standardInterest.MESSAGE_STANDARD_INTEREST_NO_NEGATIVE);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            final LateInterest lateInterest \u003d this.lateInterest;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //runner"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (this.runner \u003d\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, LateInterest.class"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            final Person runner \u003d this.runner.toModelType();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Customer(name, phone, email, address, tags, moneyBorrowed, oweStartDate, oweDueDate,"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    standardInterest, lateInterest, runner);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else if (this.personType \u003d\u003d Person.PersonType.RUNNER) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (this.customers \u003d\u003d null) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, StandardInterest.class"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .getSimpleName()));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            final List\u003cPerson\u003e customerList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            for (XmlAdaptedPerson person : customers) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                customerList.add(person.toModelType());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Runner(name, phone, email, address, tags, customerList);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (!(other instanceof XmlAdaptedPerson)) {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        XmlAdaptedPerson otherPerson \u003d (XmlAdaptedPerson) other;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return Objects.equals(name, otherPerson.name)"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(phone, otherPerson.phone)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(email, otherPerson.email)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 Objects.equals(address, otherPerson.address)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \u0026\u0026 tagged.equals(otherPerson.tagged);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 240,
      "-": 18
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.events.ui.FieldsChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.HomeRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import seedu.address.storage.HtmlWriter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SEARCH_PAGE_URL \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            \"https://se-edu.github.io/addressbook-level4/DummySearchPage.html?name\u003d\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public static final String PERSON_PAGE \u003d \"PersonPage.html\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private static HtmlWriter htmlWriter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    //@@author Der-Erlkonig"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * Loads a HTML file with person details"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private void loadPersonPage(Person person) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        String personfilepath;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        if (person instanceof Customer) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            htmlWriter \u003d new HtmlWriter((Customer) person);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            personfilepath \u003d htmlWriter.writeCustomer();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        } else if (person instanceof Runner) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            htmlWriter \u003d new HtmlWriter((Runner) person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            personfilepath \u003d htmlWriter.writeRunner();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            personfilepath \u003d \"\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        loadPage(\"file:///\" + personfilepath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handlePersonPanelSelectionChangedEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPersonPage(event.getNewSelection().person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where the Esc key is pressed or \"home\" is input to the CommandBox."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code HomeRequestEvent}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //@@author melvintzw"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void handleFieldsChangedEvent(FieldsChangedEvent event) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        loadPersonPage(event.person);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 13,
      "melvintzw": 9,
      "-": 61,
      "Der-Erlkonig": 30
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.ExecuteCommandRequestEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.HomeRequestEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.PopulatePrefixesRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case TAB:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (keyEvent.isShiftDown()) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                moveToPreviousPrefix();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                moveToNextPrefix();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case BACK_SPACE:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (keyEvent.isShiftDown()) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                keyEvent.consume();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                clearCurrentFieldOrPrefix();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * positions the caret to the specified index."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void replaceText(String text, int caretPosition) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.positionCaret(caretPosition);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        replaceText(text, text.length());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandInputChanged() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (commandTextField.getText().equals(\"\")) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, true));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage(), false));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Removes the current {@code field} or {@code prefix}."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void clearCurrentFieldOrPrefix() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int currentCaretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int lastPrefixPosition \u003d getPreviousPrefixPosition(currentCaretPosition);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // clearing the current field or prefix"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String stringLiteralUpToPrefix \u003d commandTextField.getText().substring(0, lastPrefixPosition);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String stringLiteralAfterCaret \u003d commandTextField.getText().substring(currentCaretPosition);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String newCommandBoxText \u003d stringLiteralUpToPrefix + stringLiteralAfterCaret;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.setText(newCommandBoxText);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.positionCaret(lastPrefixPosition);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Positions the caret after the last {@code prefix}."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void moveToPreviousPrefix() {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int currentCaretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int newCaretPosition \u003d getPreviousPrefixPosition(currentCaretPosition);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.positionCaret(newCaretPosition);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Positions the caret after the next {@code prefix}."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void moveToNextPrefix() {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int currentCaretPosition \u003d commandTextField.getCaretPosition();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int newCaretPosition \u003d getNextPrefixPosition(currentCaretPosition);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.positionCaret(newCaretPosition);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private int getPreviousPrefixPosition(int currentCaretPosition) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // find last prefix position"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int previousPrefixPosition \u003d commandTextField.getText().lastIndexOf(\":\", currentCaretPosition);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // if last prefix is too close to caret, find the second last prefix position"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (currentCaretPosition - previousPrefixPosition \u003c 3) {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            previousPrefixPosition \u003d commandTextField.getText().lastIndexOf(\":\", previousPrefixPosition - 1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // set new caret position to be in front of chosen prefix. If prefix not found, then set at index 0."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int newCaretPosition \u003d previousPrefixPosition !\u003d -1 ? previousPrefixPosition + 1 : 0;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // check for space in front of last prefix. If present, move forward one more index."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (commandTextField.getText().substring(newCaretPosition, newCaretPosition + 1).equals(\" \")) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            newCaretPosition +\u003d 1;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return newCaretPosition;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private int getNextPrefixPosition(int currentCaretPosition) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // find next prefix position"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int nextPrefixPosition \u003d commandTextField.getText().indexOf(\":\", currentCaretPosition);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int newCaretPosition;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // set new caret position to be in front of chosen prefix. If prefix not found, then set at last index."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (nextPrefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            newCaretPosition \u003d nextPrefixPosition + 1;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            // check for space in front of last prefix. If present, move forward one more index."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (commandTextField.getText().substring(newCaretPosition, newCaretPosition + 1).equals(\" \")) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                newCaretPosition +\u003d 1;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            newCaretPosition \u003d commandTextField.getText().length();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return newCaretPosition;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where a valid keyboard shortcut is pressed"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * to populate the CommandBox with command prefixes,"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code PopulatePrefixesRequestEvent}."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handlePopulatePrefixesRequestEvent(PopulatePrefixesRequestEvent event) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        replaceText(event.commandTemplate, event.caretIndex);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where a valid keyboard shortcut is pressed"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * to execute a command immediately"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code ExecuteCommandRequestEvent}."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleExecuteCommandRequestEvent(ExecuteCommandRequestEvent event) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        replaceText(event.commandWord);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        handleCommandInputChanged();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where the Esc key is pressed or \"home\" is input to the CommandBox."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code HomeRequestEvent}."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        replaceText(\"\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandTextField.requestFocus();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 143,
      "-": 141
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.ExecuteCommandRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.HomeRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.PopulatePrefixesRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.LocateCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cStage\u003e {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private static BrowserPanel browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem homeMenuItem;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem exitMenuItem;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem undoMenuItem;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem redoMenuItem;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem clearMenuItem;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem historyMenuItem;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem listMenuItem;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem findMenuItem;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem addMenuItem;"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem deleteMenuItem;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem editMenuItem;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem locateMenuItem;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem selectMenuItem;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem assignMenuItem;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML, primaryStage);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(homeMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(exitMenuItem, KeyCombination.valueOf(\"Alt + Q\"));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(undoMenuItem, KeyCombination.valueOf(\"Ctrl + Z\"));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(redoMenuItem, KeyCombination.valueOf(\"Ctrl + Y\"));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(clearMenuItem, KeyCombination.valueOf(\"Ctrl + Shift + C\"));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(historyMenuItem, KeyCombination.valueOf(\"F3\"));"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(listMenuItem, KeyCombination.valueOf(\"F2\"));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(findMenuItem, KeyCombination.valueOf(\"Ctrl + F\"));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(addMenuItem, KeyCombination.valueOf(\"Ctrl + I\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(deleteMenuItem, KeyCombination.valueOf(\"Ctrl + D\"));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(editMenuItem, KeyCombination.valueOf(\"Ctrl + E\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(locateMenuItem, KeyCombination.valueOf(\"Ctrl + L\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(selectMenuItem, KeyCombination.valueOf(\"Ctrl + S\"));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(assignMenuItem, KeyCombination.valueOf(\"Ctrl + Shift + A\"));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F12\"));"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHelp() {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.show();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code home} operation"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHome() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new HomeRequestEvent());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code undo} operation"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleUndo() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new UndoCommand()));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code redo} operation"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleRedo() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new RedoCommand()));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code clear} operation"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleClear() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new ClearCommand()));"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code history} operation"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHistory() {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new HistoryCommand()));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the {@code list} operation"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleList() {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new ExecuteCommandRequestEvent(new ListCommand()));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code FindCommand} prefixes."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleFind() {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new FindCommand()));"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code AddCommand} prefixes."
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleAdd() {"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new AddCommand()));"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code DeleteCommand} prefixes."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleDelete() {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new DeleteCommand()));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code EditCommand} prefixes."
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleEdit() {"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new EditCommand()));"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code LocateCommand} prefixes."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleLocate() {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new LocateCommand()));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code SelectCommand} prefixes."
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleSelect() {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new SelectCommand()));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the {@code AssignCommand} prefixes."
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleAssign() {"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        raise(new PopulatePrefixesRequestEvent(new AssignCommand()));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.personListPanel;"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static void loadUrl(String url) {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        browserPanel.loadPage(url);"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 194,
      "zhangriqi": 7,
      "-": 188
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 16,
        "content": "    //@@author jonleeyz-reused"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String[] TAG_COLOUR_STYLES \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        {\"teal\", \"red\", \"yellow\", \"blue\", \"orange\", \"brown\", \"green\", \"pink\", \"black\", \"grey\"};"
      },
      {
        "lineNumber": 19,
        "content": "    //@@author"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public final Person person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Label personType;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(Person person, int displayedIndex) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        name.setText(person.getName().fullName);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.setText(person.getPhone().value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        address.setText(person.getAddress().value);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        email.setText(person.getEmail().value);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        personType.setText(person.getType().name());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "content": "    //@@author jonleeyz-reused"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    // given a tagName, returns the String representation of a colour style"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private String getTagColourStyleFor(String tagName) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // hash code of tag name used to generate random colour"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // colour of tags changes between different runs of the application"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // might want to tweak this behaviour in the LoanShark Tycoon context"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return TAG_COLOUR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOUR_STYLES.length];"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Creates the Labels fot a given {@code Person}."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * 1. Creates a new Label object for each tag, initialised with the respective tag."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * 2. Adds a style colour attribute to each Label based on its tag."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * 3. Adds each properly initialised Label to the containing FlowPane object."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void initTags(Person person) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            tagLabel.getStyleClass().add(getTagColourStyleFor(tag.tagName));    // getStyleClass(): Node class method"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "content": "    //@@author"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 4,
      "jonleeyz": 25,
      "melvintzw": 3,
      "-": 68
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.fxmisc.easybind.EasyBind;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.HomeRequestEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.commons.events.ui.LocateRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPersonCard\u003e personListView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cPerson\u003e personList) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(mappedList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                        raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and display the location on Google Map."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private void locate(int index) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        Platform.runLater(()-\u003e {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        });"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private void handleLocateRequestEvent(LocateRequestEvent event) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        locate(event.target);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where the Esc key is pressed or \"home\" is input to the CommandBox."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code HomeRequestEvent}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@TODO to be implemented"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(PersonCard person, boolean empty) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //@@author melvintzw"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                setStyle(\"    -fx-label-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + \"    -fx-graphic-text-gap : 0;\""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + \"    -fx-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + \"    -fx-background-color: derive(-main-colour, 0%);\");"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                if (person.person instanceof Customer) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    setGraphic(person.getRoot());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    setStyle(\"    -fx-label-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-graphic-text-gap : 0;\""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-background-color: derive(-main-colour, 0%);\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                } else {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    setGraphic(person.getRoot());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    setStyle(\"    -fx-label-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-graphic-text-gap : 0;\""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-padding: 0 0 0 0;\""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                            + \"    -fx-background-color: derive(-main-colour, 50%);\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //@@author"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 21,
      "jonleeyz": 13,
      "melvintzw": 26,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.HomeRequestEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.PopulatePrefixesRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "content": "    //@@author jonleeyz-reused"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            displayed.setValue(event.message);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            if (event.isSuccessful()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                setStyleToIndicateCommandSuccess();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "content": "    //@@author"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where a valid keyboard shortcut is pressed"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * to populate the CommandBox with command prefixes,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code PopulatePrefixesRequestEvent}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handlePopulatePrefixesRequestEvent(PopulatePrefixesRequestEvent event) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setStyleToIndicateCommandSuccess();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            displayed.setValue(event.commandUsageMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Handles the event where the Esc key is pressed or \"home\" is input to the CommandBox."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code HomeRequestEvent}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void handleHomeRequestEvent(HomeRequestEvent event) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        setStyleToIndicateCommandSuccess();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            displayed.setValue(event.MESSAGE_HOME);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        });"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "content": "    //@@author jonleeyz-reused"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void setStyleToIndicateCommandSuccess() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        resultDisplay.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "content": "    //@@author"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 4,
      "jonleeyz": 50,
      "-": 40
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \" \";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooter(String saveLocation) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(\"./\" + saveLocation);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e this.syncStatus.setText(status));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/loanshark_logo.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 1,
      "-": 119
    }
  },
  {
    "path": "src/main/resources/view/DarkTheme.css",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "* {"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -main-colour: #CEDBFB;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -contrast-colour: #000000;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -borders-colour: #DEE7FB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -thematic-colour: #DEE7FB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "}"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ".background {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 0%);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    background-color: #CEDBFB; /* Used in the default.html file */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ".label {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #555555;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ".label-bright {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ".label-header {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 32pt;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ".text-field {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 1;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ".tab-pane .tab-header-area {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-min-height: 0;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-max-height: 0;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-base: -borders-colour;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-control-inner-background: -borders-colour;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: -borders-colour;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-cell-border-color: transparent;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-table-header-border-color: transparent;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header-background {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header, .table-view .filler {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-size: 35;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 0 0 1 0;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        derive(-borders-colour, -10%)"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        transparent;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0 10 1 0;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view .column-header .label {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 20pt;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-alignment: center-left;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 1;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ".table-view:focused .table-row-cell:filled:focused:selected {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane:horizontal .split-pane-divider {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 20%);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-border-color: transparent transparent transparent -borders-colour;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ".split-pane {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 1;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-borders-colour, 20%);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ".list-view {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 0%);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-background-color: derive(-main-colour, 0%);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*-fx-border-color: -borders-colour;*/"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/*"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ".customerCard {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-background-color: derive(-main-colour, 0%);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ".runnerCard {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-label-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-graphic-text-gap : 0;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-background-color: derive(-main-colour, 50%);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*/"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/*"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:even {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 0%);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:odd {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 50%);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "*/"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, -25%);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-border-color: yellow;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell:filled:selected #cardPane {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-border-color: yellow;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ".list-cell .label {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-text-fill: -contrast-colour;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_big_label {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Semibold\";"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 16px;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ".cell_small_label {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13px;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #010504;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ".anchor-pane {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     -fx-background-color: derive(-main-colour, 10%);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ".pane-with-border {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     -fx-background-color: derive(-main-colour, 10%);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     -fx-border-color: derive(-borders-colour, 10%);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     -fx-border-top-width: 1px;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(#1d1d1d, 20%);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-text-fill: black;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ".result-display .label {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: black !important;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar .label {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-text-fill: -contrast-colour;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(#FFFFFF, 30%);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 25%);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ".status-bar-with-border .label {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-text-fill: -contrast-colour;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(#FFFFFF, 30%);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-border-color: derive(#1d1d1d, 0%);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1px;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ".grid-pane .anchor-pane {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 30%);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 50%);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ".context-menu .label {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-text-fill: -contrast-colour;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 20%);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ".menu-bar .label {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-font-size: 12pt;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-text-fill: -contrast-colour;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.9;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ".menu .left-container {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: black;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "/*"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": " * Metro style Push Button"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": " * Author: Pedro Duque Vieira"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": " * http://pixelduke.wordpress.com/2012/10/23/jmetro-windows-8-controls-on-java/"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ".button {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 5 22 5 22;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: #e2e2e2;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 2;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI\", Helvetica, Arial, sans-serif;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11pt;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #d8d8d8;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0 0 0 0, 0, 1, 2;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ".button:hover {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3a3a3a;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ".button:pressed, .button:default:hover:pressed {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-background-color: white;"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "  -fx-text-fill: #1d1d1d;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ".button:focused {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-color: white, white;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1, 1;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-style: solid, segments(1, 1);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 0, 0;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 1 1 1 1, 0;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ".button:disabled, .button:default:disabled {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-opacity: 0.4;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #1d1d1d;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: -fx-focus-color;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: #ffffff;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ".button:default:hover {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: derive(-fx-focus-color, 30%);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.button-bar \u003e *.container {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: #FFFFFF;"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane \u003e *.label.content {"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 14px;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-weight: bold;"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-text-fill: -contrast-colour;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(#FFFFFF, 25%);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ".dialog-pane:header *.header-panel *.label {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 18px;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-style: italic;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-fill: white;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-text-fill: -contrast-colour;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 0%);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .thumb {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, -30%);"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 3;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-button, .scroll-bar .decrement-button {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 0 0 0 0;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar .increment-arrow, .scroll-bar .decrement-arrow {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-shape: \" \";"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:vertical .increment-arrow, .scroll-bar:vertical .decrement-arrow {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 8 1 8;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ".scroll-bar:horizontal .increment-arrow, .scroll-bar:horizontal .decrement-arrow {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 8 1 8 1;"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "#cardPane {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: transparent;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    -fx-border-color: -borders-colour;"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTypeLabel {"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11px;"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-text-fill: -contrast-colour;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "#commandTextField {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: transparent #FFFFFF transparent #FFFFFF;"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-insets: 0;"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-border-color: -borders-colour -borders-colour -main-colour -borders-colour;"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-insets: 0;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-width: 1;"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-family: \"Segoe UI Light\";"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 13pt;"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-text-fill: -contrast-colour;"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "#filterField, #personListPanel, #personWebpage {"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-effect: innershadow(gaussian, black, 10, 0, 0, 0);"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "#resultDisplay .content {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    -fx-background-color: derive(-main-colour, 0%);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 0;"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "#tags {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-hgap: 7;"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-vgap: 3;"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "#tags .label {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-text-fill: white;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-padding: 1 3 1 3;"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-border-radius: 2;"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-background-radius: 2;"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "    -fx-font-size: 11;"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "content": "//@@author jonleeyz-reused"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "#tags .teal {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: #3e7b91;"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .red {"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: red;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .yellow {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: yellow;"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .blue {"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: blue;"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .orange {"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: orange;"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .brown {"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: brown;"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .green {"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: green;"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .pink {"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: pink;"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .black {"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: white;"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: black;"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " #tags .grey {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-text-fill: black;"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     -fx-background-color: grey;"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": " }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "//@@author Der-Erlkonig"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": " th {"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     background-color: ;"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     border-bottom: 1px solid white;"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     padding: 5px;"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     text-align: left;"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": " }"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": " td {"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "     height: 28px;"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": " }"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "jonleeyz": 50,
      "melvintzw": 25,
      "-": 308,
      "Der-Erlkonig": 59
    }
  },
  {
    "path": "src/main/resources/view/MainWindow.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import java.net.URL?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.Scene?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Menu?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuBar?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.MenuItem?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.SplitPane?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.image.Image?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.StackPane?\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cfx:root type\u003d\"javafx.stage.Stage\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "         minWidth\u003d\"450\" minHeight\u003d\"600\"\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cicons\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    \u003c!--@@author zhangriqi --\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    \u003cImage url\u003d\"@/images/loanshark_logo.png\" /\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    \u003c!--@@author --\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/icons\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cscene\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cScene\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cstylesheets\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@DarkTheme.css\" /\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cURL value\u003d\"@Extensions.css\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/stylesheets\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cVBox\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cMenuBar fx:id\u003d\"menuBar\" VBox.vgrow\u003d\"NEVER\"\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"File\"\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"homeMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHome\" text\u003d\"Home\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"exitMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleExit\" text\u003d\"Exit\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003c!--@@author jonleeyz --\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Edit\"\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"undoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUndo\" text\u003d\"Undo\" /\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"redoMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleRedo\" text\u003d\"Redo\" /\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"clearMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleClear\" text\u003d\"Clear the Database\" /\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"View\"\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"historyMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHistory\" text\u003d\"History\" /\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"listMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleList\" text\u003d\"List all\" /\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"findMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleFind\" text\u003d\"Find...\" /\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Actions\"\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"addMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleAdd\" text\u003d\"Add a Person...\" /\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"deleteMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleDelete\" text\u003d\"Delete a Person...\" /\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"editMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleEdit\" text\u003d\"Edit a Person...\" /\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"locateMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleLocate\" text\u003d\"Locate a Person...\" /\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"selectMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleSelect\" text\u003d\"Select a Person...\" /\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"assignMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleAssign\" text\u003d\"Assign Customers to a Runner...\" /\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "          \u003c!--@@author --\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cMenu mnemonicParsing\u003d\"false\" text\u003d\"Help\"\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \u003cMenuItem fx:id\u003d\"helpMenuItem\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleHelp\" text\u003d\"User Guide\" /\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/Menu\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/MenuBar\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"commandBoxPlaceholder\" styleClass\u003d\"pane-with-border\"\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane VBox.vgrow\u003d\"NEVER\" fx:id\u003d\"resultDisplayPlaceholder\" styleClass\u003d\"pane-with-border\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                   minHeight\u003d\"156\" prefHeight\u003d\"156\" maxHeight\u003d\"156\"\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cpadding\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cInsets top\u003d\"5\" right\u003d\"10\" bottom\u003d\"5\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/padding\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cSplitPane id\u003d\"splitPane\" fx:id\u003d\"splitPane\" dividerPositions\u003d\"0.4\" VBox.vgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cVBox fx:id\u003d\"personList\" minWidth\u003d\"340\" prefWidth\u003d\"340\" SplitPane.resizableWithParent\u003d\"false\"\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cStackPane fx:id\u003d\"personListPanelPlaceholder\" VBox.vgrow\u003d\"ALWAYS\"/\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/VBox\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cStackPane fx:id\u003d\"browserPlaceholder\" prefWidth\u003d\"340\" \u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cpadding\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "              \u003cInsets top\u003d\"10\" right\u003d\"10\" bottom\u003d\"10\" left\u003d\"10\" /\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c/padding\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/StackPane\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/SplitPane\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cStackPane fx:id\u003d\"statusbarPlaceholder\" VBox.vgrow\u003d\"NEVER\" /\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/VBox\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/Scene\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/scene\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/fx:root\u003e"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 3,
      "jonleeyz": 24,
      "-": 64
    }
  },
  {
    "path": "src/main/resources/view/PersonListCard.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.geometry.Insets?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.control.Label?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.FlowPane?\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.HBox?\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.Region?\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.VBox?\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "\u003cHBox id\u003d\"cardPane\" fx:id\u003d\"cardPane\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cGridPane HBox.hgrow\u003d\"ALWAYS\"\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"150\" /\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cVBox alignment\u003d\"CENTER_LEFT\" minHeight\u003d\"105\" GridPane.columnIndex\u003d\"0\"\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cpadding\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cInsets top\u003d\"5\" right\u003d\"5\" bottom\u003d\"5\" left\u003d\"15\" /\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/padding\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cHBox spacing\u003d\"5\" alignment\u003d\"CENTER_LEFT\"\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"id\" styleClass\u003d\"cell_big_label\"\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003cminWidth\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003c!-- Ensures that the label text is never truncated --\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            \u003cRegion fx:constant\u003d\"USE_PREF_SIZE\" /\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "          \u003c/minWidth\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003c/Label\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        \u003cLabel fx:id\u003d\"name\" text\u003d\"\\$first\" styleClass\u003d\"cell_big_label\" /\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003c/HBox\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cFlowPane fx:id\u003d\"tags\" /\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"phone\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$phone\" /\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"address\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$address\" /\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "      \u003cLabel fx:id\u003d\"email\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$email\" /\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "      \u003cLabel fx:id\u003d\"personType\" styleClass\u003d\"cell_small_label\" text\u003d\"\\$type\" /\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003c/VBox\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/GridPane\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/HBox\u003e"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/resources/view/StatusBarFooter.fxml",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import org.controlsfx.control.StatusBar?\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.ColumnConstraints?\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c?import javafx.scene.layout.GridPane?\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003c!--@@author zhangriqi --\u003e"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003cGridPane styleClass\u003d\"grid-pane\" minHeight\u003d\"10\" maxHeight\u003d\"10\" xmlns\u003d\"http://javafx.com/javafx/8\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "\u003c!--@@author --\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003ccolumnConstraints\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003cColumnConstraints hgrow\u003d\"SOMETIMES\" minWidth\u003d\"10\" prefWidth\u003d\"100\" /\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003c/columnConstraints\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"anchor-pane\" fx:id\u003d\"syncStatus\" /\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "  \u003cStatusBar styleClass\u003d\"anchor-pane\" fx:id\u003d\"saveLocationStatus\" GridPane.columnIndex\u003d\"1\" nodeOrientation\u003d\"RIGHT_TO_LEFT\" /\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/GridPane\u003e"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 3,
      "-": 12
    }
  },
  {
    "path": "src/main/resources/view/default.html",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c!DOCTYPE html\u003e"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chtml\u003e"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "\u003chead\u003e"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "    \u003clink rel\u003d\"stylesheet\" href\u003d\"DarkTheme.css\"\u003e"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/head\u003e"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "\u003cbody class\u003d\"background\"\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    \u003cfont face\u003d\"Segoe UI\" size\u003d\"4\" color\u003d\"black\"\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    \u003ctable\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003cth\u003eCommand |\u003c/th\u003e"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003cth\u003eKeyboard Shortcut |\u003c/th\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003cth\u003eAlias\u003c/th\u003e"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eadd\u003c/td\u003e"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + I\u003c/td\u003e"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003ei\u003c/td\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eassign\u003c/td\u003e"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + Shift + A\u003c/td\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003ea\u003c/td\u003e"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eclear\u003c/td\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + Shift + C\u003c/td\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003ec\u003c/td\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003edelete\u003c/td\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + D\u003c/td\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003ed\u003c/td\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eedit\u003c/td\u003e"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + E\u003c/td\u003e"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003ee\u003c/td\u003e"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eexit\u003c/td\u003e"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eAlt + Q\u003c/td\u003e"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003efind\u003c/td\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + F\u003c/td\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003ef\u003c/td\u003e"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003ehelp\u003c/td\u003e"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eF12\u003c/td\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003ehistory\u003c/td\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eF3\u003c/td\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003ehome\u003c/td\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eF1\u003c/td\u003e"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003elist\u003c/td\u003e"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eF2\u003c/td\u003e"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003elocate\u003c/td\u003e"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + L\u003c/td\u003e"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003el\u003c/td\u003e"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eredo\u003c/td\u003e"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + Y\u003c/td\u003e"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003er\u003c/td\u003e"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eselect\u003c/td\u003e"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + S\u003c/td\u003e"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003es\u003c/td\u003e"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003ctr\u003e"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eundo\u003c/td\u003e"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eCtrl + Z\u003c/td\u003e"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "            \u003ctd\u003eu\u003c/td\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        \u003c/tr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    \u003c/table\u003e\u003c/font\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/body\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "\u003c/html\u003e"
      }
    ],
    "authorContributionMap": {
      "-": 8,
      "Der-Erlkonig": 79
    }
  },
  {
    "path": "src/test/java/guitests/GuiRobot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.BooleanSupplier;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.testfx.api.FxRobot;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.exceptions.StageNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Robot used to simulate user actions on the GUI."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Extends {@link FxRobot} by adding some customized functionality and workarounds."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiRobot extends FxRobot {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 5000;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final boolean isHeadlessMode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiRobot() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * unnecessary delays."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public void pauseForHuman() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        if (isHeadlessMode) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * milliseconds."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Waits for {@code event} to be true."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param timeOut in milliseconds"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void waitForEvent(BooleanSupplier event, int timeOut) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        int timePassed \u003d 0;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        final int retryInterval \u003d 50;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        while (!event.getAsBoolean()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            sleep(retryInterval);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            timePassed +\u003d retryInterval;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            if (timePassed \u003e\u003d timeOut) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new EventTimeoutException();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        pauseForHuman();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the window with {@code stageTitle} is currently open."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isWindowShown(String stageTitle) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return listTargetWindows().stream()"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                .count() \u003e\u003d 1;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the first stage, ordered by proximity to the current target window, with the stage title."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The order that the windows are searched are as follows (proximity): current target window,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * children of the target window, rest of the windows."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws StageNotFoundException if the stage is not found."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getStage(String stageTitle) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Stage.class::cast)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetStage.orElseThrow(StageNotFoundException::new);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents an error which occurs when a timeout occurs when waiting for an event."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private class EventTimeoutException extends RuntimeException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 1,
      "-": 104
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/CommandBoxHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle to the {@code CommandBox} in the GUI."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxHandle extends NodeHandle\u003cTextField\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_INPUT_FIELD_ID \u003d \"#commandTextField\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle(TextField commandBoxNode) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        super(commandBoxNode);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the command box."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getInput() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enters the given command in the Command Box and presses enter."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if the command succeeded, false otherwise."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean run(String command) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(command));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.type(KeyCode.ENTER);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets text in the command box"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean setInput(String text) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().setText(text));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return !getStyleClass().contains(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Clears all text in the command box."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @return true if the command succeeded, false otherwise."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public boolean clear() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().clear());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getRootNode().getText().equals(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Gets caret position in the command box"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public int getCaretPosition() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getRootNode().getCaretPosition();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets caret position in the command box"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void setCaretPosition(int index) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        click();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.interact(() -\u003e getRootNode().positionCaret(index));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the list of style classes present in the command box."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 36,
      "-": 46
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/MainMenuHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to the main menu of the app."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainMenuHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MENU_BAR_ID \u003d \"#menuBar\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle(Node mainMenuNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(mainMenuNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Clicks on {@code menuItems} in order."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void clickOnMenuItemsSequentially(String... menuItems) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Arrays.stream(menuItems).forEach(guiRobot::clickOn);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Simulates press of given keyboard shortcut"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void useAccelerator(KeyCode... combination) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.push(combination);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 15,
      "-": 18
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "content": "    //@@author jonleeyz-reused"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Gets the style class for a given tag"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * IllegalArgumentException is thrown if tag cannot be found"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Every Label with the same tag content should have the same style class"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    **/"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public List\u003cString\u003e getTagStyleClasses(String tag) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .filter(label -\u003e label.getText().equals(tag))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .map(Label::getStyleClass)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .findFirst()"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .orElseThrow(() -\u003e new IllegalArgumentException(\"No such tag\"));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "content": "    //@@author"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 15,
      "-": 71
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/ResultDisplayHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handler for the {@code ResultDisplay} of the UI"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayHandle extends NodeHandle\u003cTextArea\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String RESULT_DISPLAY_ID \u003d \"#resultDisplay\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle(TextArea resultDisplayNode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        super(resultDisplayNode);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text in the result display."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getText() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getText();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Returns the list of style clases in the result display."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public List\u003cString\u003e getStyleClass() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return getRootNode().getStyleClass();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 9,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : HuatAh!\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/AppUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class AppUtilTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void getImage_exitingImage() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertNotNull(AppUtil.getImage(\"/images/loanshark_logo.png\"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getImage_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.getImage(null);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_true_nothingHappens() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(true, \"\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithoutErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void checkArgument_falseWithErrorMessage_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String errorMessage \u003d \"error message\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalArgumentException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(errorMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AppUtil.checkArgument(false,  errorMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 6,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new AddCommand with the details of the given person."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommand getAddCommandForPerson(Person person, Model model) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d new AddCommand(person);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(Person target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(Person target, Person editedPerson)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                throws DuplicatePersonException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        public ObservableList\u003cPerson\u003e getFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        //@@author zhangriqi"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always throw a DuplicatePersonException when trying to add a person."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(Person person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            requireNonNull(person);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(person);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 11,
      "-": 167
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AssignCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * AssignCommand."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class AssignCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //refer to TypicalPersons.java for the list of default Persons initialized in the model"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_assignOneValidRunnerAndOneValidCustomer_success() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int runnerIndex \u003d 5;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int customerIndex \u003d 2;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //produce AssignCommand(runner index, customer index...)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AssignCommand assignCommand \u003d prepareCommand(Index.fromZeroBased(runnerIndex),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Index.fromZeroBased(customerIndex));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //get runner"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person runner \u003d model.getFilteredPersonList().get(runnerIndex);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //get customer"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person customer \u003d model.getFilteredPersonList().get(customerIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        customers.add(customer);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //build editedRunner (assigned with customer)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedRunner \u003d new PersonBuilder(runner).withCustomers(customers).buildRunner();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //build editedCustomer (assigned with runner)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedCustomer \u003d new PersonBuilder(customer).withRunner((Runner) runner).buildCustomer();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_ASSIGN_PERSON_SUCCESS, editedRunner);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(runnerIndex), editedRunner);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(customerIndex), editedCustomer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_assignOneValidRunnerAndTwoValidCustomers_success() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int runnerIndex \u003d 5;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int customerIndex1 \u003d 2;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int customerIndex2 \u003d 3;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //produce AssignCommand(runner index, customer index...)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AssignCommand assignCommand \u003d prepareCommand(Index.fromZeroBased(runnerIndex),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Index.fromZeroBased(customerIndex1), Index.fromZeroBased(customerIndex2));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //get runner"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person runner \u003d model.getFilteredPersonList().get(runnerIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //get customer"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person customer1 \u003d model.getFilteredPersonList().get(customerIndex1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person customer2 \u003d model.getFilteredPersonList().get(customerIndex2);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        customers.add(customer1);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        customers.add(customer2);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //build editedRunner (assigned with customers)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedRunner \u003d new PersonBuilder(runner).withCustomers(customers).buildRunner();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //build editedCustomer (assigned with runner)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedCustomer1 \u003d new PersonBuilder(customer1).withRunner((Runner) runner).buildCustomer();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedCustomer2 \u003d new PersonBuilder(customer2).withRunner((Runner) runner).buildCustomer();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String expectedMessage \u003d String.format(AssignCommand.MESSAGE_ASSIGN_PERSON_SUCCESS, editedRunner);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(runnerIndex), editedRunner);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(customerIndex1), editedCustomer1);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(customerIndex2), editedCustomer2);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(assignCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Test_assertFailure: Assign from empty filtered list"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_assignInvalidRunnerIndexAndTwoValidCustomers_failure() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int runnerIndex \u003d 20;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int customerIndex1 \u003d 2;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int customerIndex2 \u003d 3;"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //produce AssignCommand(runner index, customer index...)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AssignCommand assignCommand \u003d prepareCommand(Index.fromZeroBased(runnerIndex),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Index.fromZeroBased(customerIndex1), Index.fromZeroBased(customerIndex2));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //get runner"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person runner \u003d model.getFilteredPersonList().get(runnerIndex);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //get customer"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person customer1 \u003d model.getFilteredPersonList().get(customerIndex1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person customer2 \u003d model.getFilteredPersonList().get(customerIndex2);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            List\u003cPerson\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers.add(customer1);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers.add(customer2);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //build editedRunner (assigned with customers)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedRunner \u003d new PersonBuilder(runner).withCustomers(customers).buildRunner();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //build editedCustomer (assigned with runner)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedCustomer1 \u003d new PersonBuilder(customer1).withRunner((Runner) runner).buildCustomer();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedCustomer2 \u003d new PersonBuilder(customer2).withRunner((Runner) runner).buildCustomer();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            String expectedMessage \u003d String.format(AssignCommand.MESSAGE_ASSIGN_PERSON_SUCCESS, editedRunner);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            expectedModel.updatePerson(model.getFilteredPersonList().get(runnerIndex), editedRunner);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            expectedModel.updatePerson(model.getFilteredPersonList().get(customerIndex1), editedCustomer1);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            expectedModel.updatePerson(model.getFilteredPersonList().get(customerIndex2), editedCustomer2);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            assertCommandFailure(assignCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Test_assertFailure: Assign runner to runner"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_assignRunnerToRunner_failure() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int runnerIndex \u003d 5;"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int customerIndex1 \u003d 6;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //produce AssignCommand(runner index, customer index...)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AssignCommand assignCommand \u003d prepareCommand(Index.fromZeroBased(runnerIndex));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //get runner"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person runner \u003d model.getFilteredPersonList().get(runnerIndex);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //get customer"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person customer1 \u003d model.getFilteredPersonList().get(customerIndex1);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            List\u003cPerson\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers.add(customer1);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //build editedRunner (assigned with customers)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedRunner \u003d new PersonBuilder(runner).withCustomers(customers).buildRunner();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //build editedCustomer (assigned with runner)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedCustomer1 \u003d new PersonBuilder(customer1).withRunner((Runner) runner).buildCustomer();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            String expectedMessage \u003d String.format(AssignCommand.MESSAGE_ASSIGN_PERSON_SUCCESS, editedRunner);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            expectedModel.updatePerson(model.getFilteredPersonList().get(runnerIndex), editedRunner);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            expectedModel.updatePerson(model.getFilteredPersonList().get(customerIndex1), editedCustomer1);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            assertCommandFailure(assignCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Test_assertFailure: Assign runner to customer"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_assignRunnerToCustomer_failure() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int runnerIndex \u003d 2;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        int customerIndex1 \u003d 5;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //produce AssignCommand(runner index, customer index...)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AssignCommand assignCommand \u003d prepareCommand(Index.fromZeroBased(runnerIndex));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //get runner"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person runner \u003d model.getFilteredPersonList().get(runnerIndex);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //get customer"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person customer1 \u003d model.getFilteredPersonList().get(customerIndex1);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            List\u003cPerson\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers.add(customer1);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //build editedRunner (assigned with customers)"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedRunner \u003d new PersonBuilder(runner).withCustomers(customers).buildRunner();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            //build editedCustomer (assigned with runner)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedCustomer1 \u003d new PersonBuilder(customer1).withRunner((Runner) runner).buildCustomer();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            String expectedMessage \u003d String.format(AssignCommand.MESSAGE_ASSIGN_PERSON_SUCCESS, editedRunner);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            expectedModel.updatePerson(model.getFilteredPersonList().get(runnerIndex), editedRunner);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            expectedModel.updatePerson(model.getFilteredPersonList().get(customerIndex1), editedCustomer1);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            assertCommandFailure(assignCommand, model, String.format(AssignCommand.MESSAGE_NOT_A_RUNNER,"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                    runnerIndex + 1));"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //TODO: implement the test cases below!"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Test_assertSuccess: Undo"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Test_assertSuccess: Redo"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editCommand.execute();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        undoRedoStack.push(editCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // execution failed -\u003e editCommand not pushed into undoRedoStack"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editCommand.execute();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        undoRedoStack.push(editCommand);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // one command preprocessed when previously equal -\u003e returns false"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        commandWithSameValues.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets up AssignCommand object with the correct model, CommandHistory and UndoRedoStack"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Returns an {@code AssignCommand} with parameters {@code runnerIndex} and {@code customerIndex...}"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private AssignCommand prepareCommand(Index runnerIndex, Index... customerIndex) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AssignCommand assignCommand \u003d new AssignCommand(runnerIndex, customerIndex);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assignCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return assignCommand;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 354
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ClearCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_emptyAddressBook_success() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_nonEmptyAddressBook_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(prepareCommand(model), model, ClearCommand.MESSAGE_SUCCESS, model);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new {@code ClearCommand} which upon execution, clears the contents in {@code model}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ClearCommand prepareCommand(Model model) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        ClearCommand command \u003d new ClearCommand();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new ClearCommand().getCommandWord(), ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 8,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_INTEREST;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MONEY_BORROWED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWEDUEDATE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OWESTARTDATE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String VALID_MONEY_BORROWED_314159265 \u003d \"314159265\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String VALID_MONEY_BORROWED_20481028 \u003d \"20481028\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String VALID_STANDARD_INTEREST_971 \u003d \"9.71\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String VALID_STANDARD_INTEREST_314 \u003d \"3.14\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String VALID_OWE_START_DATE_070518 \u003d \"7 May 2018\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String VALID_OWE_START_DATE_121221 \u003d \"12 December 2021\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String VALID_OWE_DUE_DATE_121221 \u003d \"12 December 2021\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String VALID_OWE_DUE_DATE_070528 \u003d \"7 May 2028\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String VALID_TYPE_CUSTOMER \u003d \"c\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String VALID_TYPE_RUNNER \u003d \"r\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final String TYPE_DESC_CUSTOMER \u003d \" \" + PREFIX_TYPE + VALID_TYPE_CUSTOMER;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MONEY_BORROWED_314159265 \u003d \" \" + PREFIX_MONEY_BORROWED + VALID_MONEY_BORROWED_314159265;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String MONEY_BORROWED_20481028 \u003d \" \" + PREFIX_MONEY_BORROWED + VALID_MONEY_BORROWED_20481028;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String OWE_START_DATE_070518 \u003d \" \" + PREFIX_OWEDUEDATE + VALID_OWE_START_DATE_070518;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String OWE_START_DATE_121221 \u003d \" \" + PREFIX_OWEDUEDATE + VALID_OWE_START_DATE_121221;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String OWE_DUE_DATE_121221 \u003d \" \" + PREFIX_OWEDUEDATE + VALID_OWE_DUE_DATE_121221;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String OWE_DUE_DATE_070528 \u003d \" \" + PREFIX_OWEDUEDATE + VALID_OWE_DUE_DATE_070528;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String STANDARD_INTEREST_971 \u003d \" \" + PREFIX_INTEREST + VALID_STANDARD_INTEREST_971;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String STANDARD_INTEREST_314 \u003d \" \" + PREFIX_INTEREST + VALID_STANDARD_INTEREST_314;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String INVALID_MONEY_BORROWED_NOT_DOUBLE \u003d"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \" \" + PREFIX_MONEY_BORROWED + \"34.0d985\"; // non-numeric characters not allowed"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String INVALID_MONEY_BORROWED_NEGATIVE \u003d"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \" \" + PREFIX_MONEY_BORROWED + \"-34.0985\"; // negative values not allowed"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String INVALID_OWE_START_DATE \u003d \" \" + PREFIX_OWESTARTDATE + \"invalid date\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String INVALID_OWE_DUE_DATE \u003d \" \" + PREFIX_OWEDUEDATE + \"invalid date\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String INVALID_STANDARD_INTEREST_NOT_DOUBLE \u003d"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \" \" + PREFIX_INTEREST + \"34.0d985\"; // non-numeric characters not allowed"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static final String INVALID_STANDARD_INTEREST_NEGATIVE \u003d"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            \" \" + PREFIX_INTEREST + \"-34.0985\"; // negative values not allowed"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_WHITESPACE \u003d \"\\t  \\r  \\n\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PREAMBLE_NON_EMPTY \u003d \"NonEmptyPreamble\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the person at the given {@code targetIndex} in the"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code model}\u0027s address book."
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showPersonAtIndex(Model model, Index targetIndex) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d model.getFilteredPersonList().get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new PersonContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        return undoCommand;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return redoCommand;"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 32,
      "melvintzw": 6,
      "-": 155
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for EditCommand."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().buildCustomer();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Person lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).buildRunner();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).buildCustomer();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e first person edited"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.push(editCommand);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e same first person edited again"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        // execution failed -\u003e editCommand not pushed into undoRedoStack"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Edits a {@code Person} from a filtered list."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Undo the edit."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. The unfiltered list should be shown now. Verify that the index of the previously edited person in the"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * unfiltered list is different from the index at the filtered list."
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Redo the edit. This ensures {@code RedoCommand} edits the person object regardless of indexing."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void executeUndoRedo_validIndexFilteredList_samePersonEdited() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit -\u003e edits second person in unfiltered person list / first person in filtered person list"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.execute();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.push(editCommand);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // undo -\u003e reverts addressbook back to previous state and filtered person list to show all persons"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), personToEdit);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        // redo -\u003e edits same second person in unfiltered person list"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d prepareCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d prepareCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command preprocessed when previously equal -\u003e returns false"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        commandWithSameValues.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditCommand} with parameters {@code index} and {@code descriptor}"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(index, descriptor);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        return editCommand;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 3,
      "-": 259
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String arguments \u003d \" \";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String[] splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        FindCommand command \u003d prepareCommand(new PersonContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //@@author melvintzw"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_multipleKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test FindCommand object that uses the PersonContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String arguments \u003d \"carl daniel elle\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String[] splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        FindCommand command \u003d prepareCommand(new PersonContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test FindCommand object that uses the NameContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        arguments \u003d \"carl daniel elle\";"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d prepareCommand(new NameContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test Command object that uses the PhoneContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        arguments \u003d \"95352563 87652533 9482224\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d prepareCommand(new PhoneContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test FindCommand object that uses the EmailContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        arguments \u003d \"heinz@example.com cornelia@example.com werner@example.com\";"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d prepareCommand(new EmailContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //test FindCommand object that uses the AddressContainsKeyWordsPredicate"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        arguments \u003d \"wall 10th michegan\";"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d prepareCommand(new AddressContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, DANIEL, ELLE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code userInput} into a {@code FindCommand}."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private FindCommand prepareCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new FindCommand(predicate);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedList, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddressBook, model.getAddressBook());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 59,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/HistoryCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommandTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private HistoryCommand historyCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandHistory history;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        historyCommand \u003d new HistoryCommand();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        historyCommand.setData(model, history, new UndoRedoStack());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandResult(historyCommand, HistoryCommand.MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command1 \u003d \"clear\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandResult(historyCommand, String.format(HistoryCommand.MESSAGE_SUCCESS, command1));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command2 \u003d \"randomCommand\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command3 \u003d \"select 1\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command2);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        history.add(command3);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(HistoryCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                String.join(\"\\n\", command3, command2, command1));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandResult(historyCommand, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the result message from the execution of {@code historyCommand} equals to {@code expectedMessage}"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandResult(HistoryCommand historyCommand, String expectedMessage) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedMessage, historyCommand.execute().feedbackToUser);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new HistoryCommand().getCommandWord(), HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 7,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/ListCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showPersonAtIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for ListCommand."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model expectedModel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListCommand listCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        listCommand \u003d new ListCommand();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsNotFiltered_showsSameList() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_listIsFiltered_showsEverything() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonAtIndex(model, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new ListCommand().getCommandWord(), ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 8,
      "-": 45
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/LocateCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "//@@author zhangriqi"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "public class LocateCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        LocateCommand locateFirstCommand \u003d new LocateCommand(firstPredicate);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        LocateCommand locateSecondCommand \u003d new LocateCommand(secondPredicate);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertTrue(locateFirstCommand.equals(locateFirstCommand));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertFalse(locateFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertFalse(locateFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertFalse(locateFirstCommand.equals(locateSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        String arguments \u003d \" \";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        String[] splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        LocateCommand command \u003d prepareCommand(new PersonContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * Parses {@code userInput} into a {@code LocateCommand}."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private LocateCommand prepareCommand(Predicate\u003cPerson\u003e predicate) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        LocateCommand command \u003d"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                new LocateCommand(predicate);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * Executes a {@code LocateCommand}"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * the {@code AddressBook} in model remains the same after executing the {@code command}"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private void assertExecutionFailure(LocateCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        String arguments \u003d \" \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        String[] splitArguments \u003d arguments.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        List\u003cString\u003e list \u003d Arrays.asList(splitArguments);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        LocateCommand locateCommand \u003d prepareCommand(new PersonContainsKeywordsPredicate(list));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            locateCommand.execute();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            assertEquals(expectedMessage, ce.getMessage());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    private void assertCommandSuccess(LocateCommand command, String expectedMessage, List\u003cPerson\u003e expectedList) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertEquals(expectedAddressBook, model.getAddressBook());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 116
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RedoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommandTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommandOne.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommandTwo.preprocessUndoableCommand();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d prepareStack("
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                Collections.emptyList(), Arrays.asList(deleteCommandTwo, deleteCommandOne));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        RedoCommand redoCommand \u003d new RedoCommand();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple commands in redoStack"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // single command in redoStack"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // no command in redoStack"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new RedoCommand().getCommandWord(), RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 8,
      "-": 58
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/UndoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.deleteFirstPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommandTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DeleteCommand deleteCommandOne \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final DeleteCommand deleteCommandTwo \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoRedoStack undoRedoStack \u003d prepareStack("
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "                Arrays.asList(deleteCommandOne, deleteCommandTwo), Collections.emptyList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        UndoCommand undoCommand \u003d new UndoCommand();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommandOne.execute();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommandTwo.execute();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple commands in undoStack"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteFirstPerson(expectedModel);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // single command in undoStack"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        // no command in undoStack"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void verifyGetCommandWordWorksCorrectly() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(new UndoCommand().getCommandWord(), UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 8,
      "-": 57
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_NON_EMPTY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.PREAMBLE_WHITESPACE;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_CUSTOMER;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).buildCustomer();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // whitespace only preamble"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_CUSTOMER + NAME_DESC_AMY + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).buildCustomer();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags().buildCustomer();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, TYPE_DESC_CUSTOMER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + ADDRESS_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_CUSTOMER + VALID_NAME_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + ADDRESS_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_CUSTOMER + VALID_NAME_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + VALID_ADDRESS_BOB, expectedMessage);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_CUSTOMER + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_CUSTOMER + NAME_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        + INVALID_ADDRESS_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, TYPE_DESC_CUSTOMER + INVALID_NAME_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + INVALID_ADDRESS_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // non-empty preamble"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, PREAMBLE_NON_EMPTY + TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND, String"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                        .format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 40,
      "-": 96
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_CUSTOMER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCustomerCommand(person));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void parseCommand_addAlias() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + TYPE_DESC_CUSTOMER + \" \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void parseCommand_clearAlias() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void parseCommand_deleteAlias() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void parseCommand_editAlias() throws Exception {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "            + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void parseCommand_findAlias() throws Exception {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertEquals(new FindCommand(new PersonContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void parseCommand_historyAlias() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void parseCommand_selectAlias() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void parseCommand_redoCommandAlias_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_ALIAS) instanceof RedoCommand);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author zhangriqi"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    public void parseCommand_undoCommandAlias_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_ALIAS) instanceof UndoCommand);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zhangriqi"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zhangriqi": 72,
      "jonleeyz": 1,
      "melvintzw": 3,
      "-": 132
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AssignCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class AssignCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private AssignCommandParser parser \u003d new AssignCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_validArgsAndOneCustomer_returnsAssignCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"1 c: 2\", new AssignCommand(Index.fromOneBased(1), Index.fromOneBased(2)));"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_validArgsAndTwoCustomers_returnsAssignCommand() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"1 c: 2 3\", new AssignCommand(Index.fromOneBased(1), Index.fromOneBased(2),"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                Index.fromOneBased(3)));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_alphabet_throwsParseException() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_negativeIndex_throwsParseException() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"-1 c: 2 3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                AssignCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 39
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MONEY_BORROWED_NEGATIVE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MONEY_BORROWED_NOT_DOUBLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STANDARD_INTEREST_NEGATIVE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_STANDARD_INTEREST_NOT_DOUBLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MONEY_BORROWED_20481028;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MONEY_BORROWED_314159265;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OWE_DUE_DATE_070528;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OWE_DUE_DATE_121221;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OWE_START_DATE_070518;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.OWE_START_DATE_121221;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STANDARD_INTEREST_314;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.STANDARD_INTEREST_971;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONEY_BORROWED_20481028;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MONEY_BORROWED_314159265;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OWE_DUE_DATE_070528;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OWE_DUE_DATE_121221;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_OWE_START_DATE_070518;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STANDARD_INTEREST_314;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_STANDARD_INTEREST_971;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author jonleeyz"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MONEY_BORROWED_NOT_DOUBLE,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                MoneyBorrowed.MESSAGE_MONEY_BORROWED_DOUBLE_ONLY); // invalid money borrowed: not a double"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MONEY_BORROWED_NEGATIVE,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                MoneyBorrowed.MESSAGE_MONEY_BORROWED_NO_NEGATIVE); // invalid money borrowed: negative"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STANDARD_INTEREST_NOT_DOUBLE,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                StandardInterest.MESSAGE_STANDARD_INTEREST_DOUBLE_ONLY); // invalid standard interest: not a double"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_STANDARD_INTEREST_NEGATIVE,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                StandardInterest.MESSAGE_STANDARD_INTEREST_NO_NEGATIVE); // invalid standard interest: negative"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY + VALID_PHONE_AMY,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parse_allFieldsSpecified_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND + MONEY_BORROWED_314159265 + STANDARD_INTEREST_314;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withMoneyBorrowed(VALID_MONEY_BORROWED_314159265)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .withOweStartDate(VALID_OWE_START_DATE_070518).withOweDueDate(VALID_OWE_DUE_DATE_121221)"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .withStandardInterest(VALID_STANDARD_INTEREST_314).build();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parse_oneFieldSpecified_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author jonleeyz"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // money borrowed"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MONEY_BORROWED_314159265;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withMoneyBorrowed(VALID_MONEY_BORROWED_314159265).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // owe start date"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OWE_START_DATE_070518;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withOweStartDate(VALID_OWE_START_DATE_070518).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // owe due date"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + OWE_DUE_DATE_121221;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withOweDueDate(VALID_OWE_DUE_DATE_121221).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // standard interest"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + STANDARD_INTEREST_971;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withStandardInterest(VALID_STANDARD_INTEREST_971).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() throws IllegalValueException {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author jonleeyz"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + TAG_DESC_FRIEND + MONEY_BORROWED_314159265"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + OWE_START_DATE_070518 + OWE_DUE_DATE_121221 + STANDARD_INTEREST_971"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND + MONEY_BORROWED_314159265"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + OWE_START_DATE_070518 + OWE_DUE_DATE_121221 + STANDARD_INTEREST_971"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + PHONE_DESC_BOB + ADDRESS_DESC_BOB + EMAIL_DESC_BOB + TAG_DESC_HUSBAND + MONEY_BORROWED_20481028"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + OWE_START_DATE_121221 + OWE_DUE_DATE_070528 + STANDARD_INTEREST_314;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .withMoneyBorrowed(VALID_MONEY_BORROWED_20481028).withOweStartDate(VALID_OWE_START_DATE_070518)"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .withOweDueDate(VALID_OWE_DUE_DATE_070528).withStandardInterest(VALID_STANDARD_INTEREST_314).build();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() throws IllegalValueException {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author jonleeyz"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_BOB + INVALID_PHONE_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + PHONE_DESC_BOB + MONEY_BORROWED_20481028 + OWE_START_DATE_070518 + OWE_DUE_DATE_121221"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                + STANDARD_INTEREST_314;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withMoneyBorrowed(VALID_MONEY_BORROWED_20481028)"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .withOweStartDate(OWE_DUE_DATE_070528).withOweDueDate(OWE_DUE_DATE_121221)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .withStandardInterest(VALID_STANDARD_INTEREST_314).build();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 88,
      "-": 192
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_invalidSpecifier_throwsParseException() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //\"-e\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseFailure(parser, \"-z Alice Bob\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //@@author melvintzw"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-all specifier"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-all Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-n specifier"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-n Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-p specifier"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-p Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-a specifier"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new AddressContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-a Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-t specifier"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new TagsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-t Alice Bob\", expectedFindCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-e specifier"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedFindCommand \u003d new FindCommand(new EmailContainsKeywordsPredicate(Arrays.asList(\"alice@example.com\","
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                \"bob@example.com\")));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertParseSuccess(parser, \"-e alice@example.com bob@example.com\", expectedFindCommand);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 51,
      "-": 22
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/LocateCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.LocateCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.AddressContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.EmailContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.PersonContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.PhoneContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.TagsContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class LocateCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "content": "    //@@author jonleeyz-reused"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private LocateCommandParser parser \u003d new LocateCommandParser();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                LocateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parse_invalidSpecifier_throwsParseException() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //\"-e\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseFailure(parser, \"-z Alice Bob\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                LocateCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    // @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * PLACEHOLDEER: to address checkstyle violation"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @TODO remove after test is fixed"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parse_validArgs_returnsLocateCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LocateCommand expectedLocateCommand \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new LocateCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, \"Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedLocateCommand);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //-all specifier"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, \"-all Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //-n specifier"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new NameContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, \"-n Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //-p specifier"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new PhoneContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, \"-p Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //-a specifier"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new AddressContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, \"-a Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //-t specifier"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new TagsContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, \"-t Alice Bob\", expectedLocateCommand);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //-e specifier"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedLocateCommand \u003d new LocateCommand(new EmailContainsKeywordsPredicate(Arrays.asList(\"alice@example.com\","
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \"bob@example.com\")));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertParseSuccess(parser, \"-e alice@example.com bob@example.com\", expectedLocateCommand);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "content": "    //@@author"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 75
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.customer.LateInterest;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String INVALID_MONEY_BORROWED_NEGATIVE \u003d \"-34.0985\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String INVALID_MONEY_BORROWED_NOT_DOUBLE \u003d \"34.0d985\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String INVALID_STANDARD_INTEREST_NEGATIVE \u003d \"-34.0985\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String INVALID_STANDARD_INTEREST_NOT_DOUBLE \u003d \"34.0d985\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String INVALID_LATE_INTEREST_NEGATIVE \u003d \"-34.0985\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String INVALID_LATE_INTEREST_NOT_DOUBLE \u003d \"34.0d985\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String VALID_MONEY_BORROWED \u003d \"34.0985\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String VALID_STANDARD_INTEREST \u003d \"34.0985\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String VALID_LATE_INTEREST \u003d \"34.0985\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((String) null));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parsePhone((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(INVALID_PHONE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parsePhone(Optional.of(INVALID_PHONE)));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithoutWhitespace_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(VALID_PHONE));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(VALID_PHONE)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValueWithWhitespace_returnsTrimmedPhone() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String phoneWithWhitespace \u003d WHITESPACE + VALID_PHONE + WHITESPACE;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, ParserUtil.parsePhone(phoneWithWhitespace));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Optional.of(expectedPhone), ParserUtil.parsePhone(Optional.of(phoneWithWhitespace)));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(null);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTag(INVALID_TAG);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Tag expectedTag \u003d new Tag(VALID_TAG_1);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseMoneyBorrowed_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMoneyBorrowed((String) null));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseMoneyBorrowed((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseMoneyBorrowed_invalidValueNotDouble_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(INVALID_MONEY_BORROWED_NOT_DOUBLE));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(Optional.of(INVALID_MONEY_BORROWED_NOT_DOUBLE)));"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseMoneyBorrowed_invalidValueNegative_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(INVALID_MONEY_BORROWED_NEGATIVE));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(Optional.of(INVALID_MONEY_BORROWED_NEGATIVE)));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseMoneyBorrowed_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(ParserUtil.parseMoneyBorrowed(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseMoneyBorrowed_validValueWithoutWhitespace_returnsMoneyBorrowed() throws Exception {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        MoneyBorrowed expectedMoneyBorrowed \u003d new MoneyBorrowed(Double.parseDouble(VALID_MONEY_BORROWED));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedMoneyBorrowed, ParserUtil.parseMoneyBorrowed(VALID_MONEY_BORROWED));"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(Optional.of(expectedMoneyBorrowed),"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(Optional.of(VALID_MONEY_BORROWED)));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseMoneyBorrowed_validValueWithWhitespace_returnsTrimmedMoneyBorrowed() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String moneyBorrowedWithWhitespace \u003d WHITESPACE + VALID_MONEY_BORROWED + WHITESPACE;"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        MoneyBorrowed expectedMoneyBorrowed \u003d new MoneyBorrowed(Double.parseDouble(moneyBorrowedWithWhitespace));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedMoneyBorrowed, ParserUtil.parseMoneyBorrowed(VALID_MONEY_BORROWED));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(Optional.of(expectedMoneyBorrowed),"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseMoneyBorrowed(Optional.of(VALID_MONEY_BORROWED)));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseStandardInterest_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseStandardInterest((String) null));"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseStandardInterest((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseStandardInterest_invalidValueNotDouble_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseStandardInterest(INVALID_STANDARD_INTEREST_NOT_DOUBLE));"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseStandardInterest(Optional.of(INVALID_STANDARD_INTEREST_NOT_DOUBLE)));"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseStandardInterest_invalidValueNegative_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseStandardInterest(INVALID_STANDARD_INTEREST_NEGATIVE));"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseStandardInterest(Optional.of(INVALID_STANDARD_INTEREST_NEGATIVE)));"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseStandardInterest_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(ParserUtil.parseStandardInterest(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseStandardInterest_validValueWithoutWhitespace_returnsStandardInterest() throws Exception {"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        StandardInterest expectedStandardInterest \u003d new StandardInterest(Double.parseDouble(VALID_STANDARD_INTEREST));"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedStandardInterest, ParserUtil.parseStandardInterest(VALID_STANDARD_INTEREST));"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(Optional.of(expectedStandardInterest),"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseStandardInterest(Optional.of(VALID_STANDARD_INTEREST)));"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseStandardInterest_validValueWithWhitespace_returnsTrimmedStandardInterest() throws Exception {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String standardInterestWithWhitespace \u003d WHITESPACE + VALID_STANDARD_INTEREST + WHITESPACE;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        StandardInterest expectedStandardInterest \u003d"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new StandardInterest(Double.parseDouble(standardInterestWithWhitespace));"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedStandardInterest, ParserUtil.parseStandardInterest(VALID_STANDARD_INTEREST));"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(Optional.of(expectedStandardInterest),"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseStandardInterest(Optional.of(VALID_STANDARD_INTEREST)));"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseLateInterest_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLateInterest((String) null));"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseLateInterest((Optional\u003cString\u003e) null));"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseLateInterest_invalidValueNotDouble_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseLateInterest(INVALID_LATE_INTEREST_NOT_DOUBLE));"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseLateInterest(Optional.of(INVALID_LATE_INTEREST_NOT_DOUBLE)));"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseLateInterest_invalidValueNegative_throwsIllegalValueException() {"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseLateInterest(INVALID_LATE_INTEREST_NEGATIVE));"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Assert.assertThrows(IllegalValueException.class, () -\u003e"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseLateInterest(Optional.of(INVALID_LATE_INTEREST_NEGATIVE)));"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseLateInterest_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(ParserUtil.parseLateInterest(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseLateInterest_validValueWithoutWhitespace_returnsLateInterest() throws Exception {"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LateInterest expectedLateInterest \u003d new LateInterest(Double.parseDouble(VALID_LATE_INTEREST));"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedLateInterest, ParserUtil.parseLateInterest(VALID_LATE_INTEREST));"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(Optional.of(expectedLateInterest),"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseLateInterest(Optional.of(VALID_LATE_INTEREST)));"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void parseLateInterest_validValueWithWhitespace_returnsTrimmedLateInterest() throws Exception {"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String lateInterestWithWhitespace \u003d WHITESPACE + VALID_LATE_INTEREST + WHITESPACE;"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LateInterest expectedLateInterest \u003d"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new LateInterest(Double.parseDouble(lateInterestWithWhitespace));"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedLateInterest, ParserUtil.parseLateInterest(VALID_LATE_INTEREST));"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(Optional.of(expectedLateInterest),"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ParserUtil.parseLateInterest(Optional.of(VALID_LATE_INTEREST)));"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 152,
      "-": 246
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTagList());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsAssertionError() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Repeat ALICE twice"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(ALICE, ALICE);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getTagList().remove(0);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void removeNonExistentPerson_throwsPersonNotFoundException() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Person personA \u003d new Person();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Person personB \u003d new Person(new Name(\"Aaron\"), new Phone(), new Email(), new Address(), new HashSet\u003c\u003e());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        addressBook.addPerson(personA);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        thrown.expect(PersonNotFoundException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        addressBook.removePerson(personB);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub(Collection\u003cPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() throws DuplicatePersonException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        AddressBook addressBookA \u003d new AddressBook();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        AddressBook addressBookB \u003d new AddressBook();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        AddressBook addressBookC \u003d new AddressBook();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        AddressBook addressBookD \u003d new AddressBook();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Person samplePerson \u003d new Person();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        addressBookC.addPerson(samplePerson);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        addressBookD.addPerson(samplePerson);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(addressBookA.hashCode(), addressBookB.hashCode());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(addressBookC.hashCode(), addressBookD.hashCode());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addressBookA.hashCode(), addressBookC.hashCode());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addressBookA.hashCode(), addressBookD.hashCode());"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addressBookB.hashCode(), addressBookC.hashCode());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addressBookB.hashCode(), addressBookD.hashCode());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 38,
      "-": 94
    }
  },
  {
    "path": "src/test/java/seedu/address/model/UserPrefsTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class UserPrefsTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testGetAddressBookName_success() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String sampleName \u003d \"book\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefs.setAddressBookName(sampleName);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(sampleName, userPrefs.getAddressBookName());"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testEquals_symmetric() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsA \u003d new UserPrefs();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsB \u003d new UserPrefs();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsC \u003d new UserPrefs();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsD \u003d new UserPrefs();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsE \u003d new UserPrefs();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsF \u003d new UserPrefs();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsG \u003d new UserPrefs();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String sampleName \u003d \"book\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String samplePath \u003d \"\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsC.setGuiSettings(1.0, 1.0, 1, 1);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsC.setAddressBookFilePath(samplePath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsC.setAddressBookName(sampleName);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsD.setGuiSettings(1.0, 1.0, 1, 1);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsD.setAddressBookFilePath(samplePath);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsD.setAddressBookName(sampleName);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsE.setGuiSettings(1.0, 1.0, 1, 1);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsF.setAddressBookFilePath(samplePath);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsG.setAddressBookName(sampleName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(userPrefsA.equals(userPrefsB));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(userPrefsC.equals(userPrefsD));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsA.equals(userPrefsC));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsA.equals(userPrefsD));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsA.equals(userPrefsE));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsA.equals(userPrefsF));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsA.equals(userPrefsG));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsC.equals(userPrefsE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsC.equals(userPrefsF));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsC.equals(userPrefsG));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsE.equals(userPrefsF));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsE.equals(userPrefsG));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(userPrefsF.equals(userPrefsG));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsA \u003d new UserPrefs();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsB \u003d new UserPrefs();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsC \u003d new UserPrefs();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsD \u003d new UserPrefs();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsE \u003d new UserPrefs();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsF \u003d new UserPrefs();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UserPrefs userPrefsG \u003d new UserPrefs();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String sampleName \u003d \"book\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String samplePath \u003d \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsC.setGuiSettings(1.0, 1.0, 1, 1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsC.setAddressBookFilePath(samplePath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsC.setAddressBookName(sampleName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsD.setGuiSettings(1.0, 1.0, 1, 1);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsD.setAddressBookFilePath(samplePath);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsD.setAddressBookName(sampleName);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsE.setGuiSettings(1.0, 1.0, 1, 1);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsF.setAddressBookFilePath(samplePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        userPrefsG.setAddressBookName(sampleName);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(userPrefsA.hashCode(), userPrefsB.hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(userPrefsC.hashCode(), userPrefsD.hashCode());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsA.hashCode(), userPrefsC.hashCode());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsA.hashCode(), userPrefsD.hashCode());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsA.hashCode(), userPrefsE.hashCode());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsA.hashCode(), userPrefsF.hashCode());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsA.hashCode(), userPrefsG.hashCode());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsC.hashCode(), userPrefsE.hashCode());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsC.hashCode(), userPrefsF.hashCode());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsC.hashCode(), userPrefsG.hashCode());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsE.hashCode(), userPrefsF.hashCode());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsE.hashCode(), userPrefsG.hashCode());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(userPrefsF.hashCode(), userPrefsG.hashCode());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 98
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //in current implementation, empty address argument is not invalid, it is needed for constructing optional fields"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    // as empty"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidAddress_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidAddress \u003d \"\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // null address"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid addresses"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Address addressA \u003d new Address();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Address addressB \u003d new Address();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Address addressC \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Address addressD \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(addressA.hashCode(), addressB.hashCode());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(addressC.hashCode(), addressD.hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addressA.hashCode(), addressC.hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addressA.hashCode(), addressD.hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addressB.hashCode(), addressC.hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addressB.hashCode(), addressD.hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 19,
      "melvintzw": 4,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* not invalid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidEmail_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidEmail \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null email"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //not invalid -- assertFalse(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid email"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Email emailA \u003d new Email();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Email emailB \u003d new Email();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Email emailC \u003d new Email(\"test@email.com\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Email emailD \u003d new Email(\"test@email.com\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(emailA.hashCode(), emailB.hashCode());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(emailC.hashCode(), emailD.hashCode());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(emailA.hashCode(), emailC.hashCode());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(emailA.hashCode(), emailD.hashCode());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(emailB.hashCode(), emailC.hashCode());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(emailB.hashCode(), emailD.hashCode());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 19,
      "melvintzw": 3,
      "-": 61
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidName_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidName \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidName() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // null name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"\")); // empty string"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\" \")); // spaces only"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"12345\")); // numbers only"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Name nameA \u003d new Name(\"Aron\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Name nameB \u003d new Name(\"Aron\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Name nameC \u003d new Name(\"Aaron\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Name nameD \u003d new Name(\"Aaron\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(nameA.hashCode(), nameB.hashCode());"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(nameC.hashCode(), nameD.hashCode());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(nameA.hashCode(), nameC.hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(nameA.hashCode(), nameD.hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(nameB.hashCode(), nameC.hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(nameB.hashCode(), nameD.hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 19,
      "-": 41
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PersonContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class PersonContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicate \u003d"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        PersonContainsKeywordsPredicate secondPredicate \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new PersonContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        PersonContainsKeywordsPredicate firstPredicateCopy \u003d"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new PersonContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void test_personContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                new PersonContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Street\").build()));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Charlie\").build()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // Multiple keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Bob Street\").build()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // Only one matching keyword"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Carol\").build()));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Carol Street\").build()));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Bob\").build()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withAddress(\"Alice Street\").build()));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withTags(\"Alice\", \"Charlie\").build()));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void test_personDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        PersonContainsKeywordsPredicate predicate \u003d new PersonContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        predicate \u003d new PersonContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 72,
      "-": 13
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.Assert;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e new Phone(null));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*not invalid"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_invalidPhone_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        String invalidPhone \u003d \"\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Phone(invalidPhone));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // null phone number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        Assert.assertThrows(NullPointerException.class, () -\u003e Phone.isValidPhone(null));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //not invalid -- assertFalse(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone numbers"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Phone phoneA \u003d new Phone();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Phone phoneB \u003d new Phone();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Phone phoneC \u003d new Phone(\"999\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Phone phoneD \u003d new Phone(\"999\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(phoneA.hashCode(), phoneB.hashCode());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(phoneC.hashCode(), phoneD.hashCode());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(phoneA.hashCode(), phoneC.hashCode());"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(phoneA.hashCode(), phoneD.hashCode());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(phoneB.hashCode(), phoneC.hashCode());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(phoneB.hashCode(), phoneD.hashCode());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 19,
      "melvintzw": 3,
      "-": 40
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/UniquePersonListTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class UniquePersonListTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() throws DuplicatePersonException {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UniquePersonList uniquePersonListA \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UniquePersonList uniquePersonListB \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UniquePersonList uniquePersonListC \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        UniquePersonList uniquePersonListD \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        Person samplePerson \u003d new Person();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        uniquePersonListC.add(samplePerson);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        uniquePersonListD.add(samplePerson);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(uniquePersonListA.hashCode(), uniquePersonListB.hashCode());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(uniquePersonListC.hashCode(), uniquePersonListD.hashCode());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(uniquePersonListA.hashCode(), uniquePersonListC.hashCode());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(uniquePersonListA.hashCode(), uniquePersonListD.hashCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(uniquePersonListB.hashCode(), uniquePersonListC.hashCode());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(uniquePersonListB.hashCode(), uniquePersonListD.hashCode());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/customer/LateInterestTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.model.person.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class LateInterestTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testToString_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(\"9.71\", new LateInterest(9.71).toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LateInterest lateInterestA \u003d new LateInterest();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LateInterest lateInterestB \u003d new LateInterest();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LateInterest lateInterestC \u003d new LateInterest(9.71);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        LateInterest lateInterestD \u003d new LateInterest(9.71);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(lateInterestA.hashCode(), lateInterestB.hashCode());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(lateInterestC.hashCode(), lateInterestD.hashCode());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(lateInterestA.hashCode(), lateInterestC.hashCode());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(lateInterestA.hashCode(), lateInterestD.hashCode());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(lateInterestB.hashCode(), lateInterestC.hashCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(lateInterestB.hashCode(), lateInterestD.hashCode());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/customer/MoneyBorrowedTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.model.person.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class MoneyBorrowedTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testToString_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(\"9.71\", new MoneyBorrowed(9.71).toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        MoneyBorrowed moneyBorrowedA \u003d new MoneyBorrowed();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        MoneyBorrowed moneyBorrowedB \u003d new MoneyBorrowed();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        MoneyBorrowed moneyBorrowedC \u003d new MoneyBorrowed(9.71);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        MoneyBorrowed moneyBorrowedD \u003d new MoneyBorrowed(9.71);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(moneyBorrowedA.hashCode(), moneyBorrowedB.hashCode());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(moneyBorrowedC.hashCode(), moneyBorrowedD.hashCode());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(moneyBorrowedA.hashCode(), moneyBorrowedC.hashCode());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(moneyBorrowedA.hashCode(), moneyBorrowedD.hashCode());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(moneyBorrowedB.hashCode(), moneyBorrowedC.hashCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(moneyBorrowedB.hashCode(), moneyBorrowedD.hashCode());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/customer/StandardInterestTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "package seedu.address.model.person.customer;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author jonleeyz"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "public class StandardInterestTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testToString_success() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(\"9.71\", new StandardInterest(9.71).toString());"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void testHashcode_symmetric() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        StandardInterest standardInterestA \u003d new StandardInterest();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        StandardInterest standardInterestB \u003d new StandardInterest();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        StandardInterest standardInterestC \u003d new StandardInterest(9.71);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        StandardInterest standardInterestD \u003d new StandardInterest(9.71);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(standardInterestA.hashCode(), standardInterestB.hashCode());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(standardInterestC.hashCode(), standardInterestD.hashCode());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(standardInterestA.hashCode(), standardInterestC.hashCode());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(standardInterestA.hashCode(), standardInterestD.hashCode());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(standardInterestB.hashCode(), standardInterestC.hashCode());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(standardInterestB.hashCode(), standardInterestD.hashCode());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "//@@author"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/storage/HtmlWriterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import static org.junit.Assert.assertNull;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "//@@author Der-Erlkonig"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "public class HtmlWriterTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private Customer customer;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private Runner runner;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private HtmlWriter htmlWriter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private HtmlWriter htmlWriterCustomer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    private HtmlWriter htmlWriterRunner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        customer \u003d new PersonBuilder().buildCustomer();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        runner \u003d new PersonBuilder().buildRunner();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        htmlWriter \u003d new HtmlWriter();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        htmlWriterCustomer \u003d new HtmlWriter(customer);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        htmlWriterRunner \u003d new HtmlWriter(runner);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public void checkOpeningLine() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        String testOpeningLine \u003d \"\u003c!DOCTYPE html\u003e\u003chtml\u003e\u003chead\u003e\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                + \"\u003cbody style\u003d\\\"background-color:#CEDBFB;\\\"\\n\u003e\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                + \"\u003cfont face\u003d\\\"Segoe UI\\\" size\u003d\\\"5\\\" color\u003d\\\"black\\\"\u003e\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "                + \"\u003ctable\u003e\u003ctr\u003e\u003cth align\u003d\\\"left\\\" colspan\u003d\\\"2\\\"\u003e\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(testOpeningLine, htmlWriter.OPENING_LINE);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public void checkCustomerFields() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getName(), \"Alice Pauline\");"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getPhone(), \"85355255\");"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getEmail(), \"alice@gmail.com\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getAddress(), \"123, Jurong West Ave 6, #08-111\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getAmountBorrowed(), \"0.00\");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getInterestRate(), \"0.0\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getAmountCurrentlyOwed(), \"0.00\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getOweStartDate(), \"Thu, 1 Jan 1970\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getOweDueDate(), \"Thu, 1 Jan 1970\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterCustomer.getRunnerAssigned(), \"Not Assigned\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertNull(htmlWriterCustomer.getCustomerList());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    public void checkRunnerFields() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getName(), \"Alice Pauline\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getPhone(), \"85355255\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getEmail(), \"alice@gmail.com\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getAddress(), \"123, Jurong West Ave 6, #08-111\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getAmountBorrowed(), \"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getInterestRate(), \"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getAmountCurrentlyOwed(), \"\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getOweStartDate(), \"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getOweDueDate(), \"\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertEquals(htmlWriterRunner.getRunnerAssigned(), \"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "        assertNotNull(htmlWriterRunner.getCustomerList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "Der-Erlkonig"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "Der-Erlkonig": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(Person person) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(new Name(name));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(new Email(email));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(new Address(address));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d Stream.of(tags).map(Tag::new).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(tagSet);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code MoneyBorrowed} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public EditPersonDescriptorBuilder withMoneyBorrowed(String moneyBorrowed) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        descriptor.setMoneyBorrowed(new MoneyBorrowed(Double.parseDouble(moneyBorrowed)));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code OweStartDate} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public EditPersonDescriptorBuilder withOweStartDate(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        descriptor.setOweStartDate(ParserUtil.parseDate(date));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code OweDueDate} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public EditPersonDescriptorBuilder withOweDueDate(String date) throws IllegalValueException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        descriptor.setOweDueDate(ParserUtil.parseDate(date));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Sets the {@code StandardInterest} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public EditPersonDescriptorBuilder withStandardInterest(String standardInterest) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        descriptor.setStandardInterest(new StandardInterest(Double.parseDouble(standardInterest)));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 36,
      "-": 87
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.Customer;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.LateInterest;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.MoneyBorrowed;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.customer.StandardInterest;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"friends\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private Name name;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Phone phone;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Email email;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Address address;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //@@author melvintzw"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Customer fields"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private MoneyBorrowed moneyBorrowed;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Date oweStartDate;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Date oweDueDate;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private StandardInterest standardInterest;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private LateInterest lateInterest;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private Person runner;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Runner fields:"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private List\u003cPerson\u003e customers;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        name \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        phone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        email \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        address \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        tags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //Customer fields"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        moneyBorrowed \u003d new MoneyBorrowed();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        oweStartDate \u003d new Date(0);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        oweDueDate \u003d new Date(0);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        standardInterest \u003d new StandardInterest();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        lateInterest \u003d new LateInterest();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        runner \u003d new Runner();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //Runner fields:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder(Person personToCopy) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        name \u003d personToCopy.getName();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        phone \u003d personToCopy.getPhone();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        email \u003d personToCopy.getEmail();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        address \u003d personToCopy.getAddress();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        tags \u003d new HashSet\u003c\u003e(personToCopy.getTags());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (personToCopy instanceof Customer) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            moneyBorrowed \u003d ((Customer) personToCopy).getMoneyBorrowed();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            oweStartDate \u003d ((Customer) personToCopy).getOweStartDate();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            oweDueDate \u003d ((Customer) personToCopy).getOweDueDate();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            standardInterest \u003d ((Customer) personToCopy).getStandardInterest();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            lateInterest \u003d ((Customer) personToCopy).getLateInterest();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            runner \u003d ((Customer) personToCopy).getRunner();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (personToCopy instanceof Runner) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.name \u003d new Name(name);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.tags \u003d SampleDataUtil.getTagSet(tags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.address \u003d new Address(address);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.phone \u003d new Phone(phone);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.email \u003d new Email(email);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code MoneyBorrowed} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withMoneyBorrowed(MoneyBorrowed moneyBorrowed) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.moneyBorrowed \u003d moneyBorrowed;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code OweStartDate} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withOweStartDate(Date date) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweStartDate \u003d date;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code OweDueDate} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withOweDueDate(Date date) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.oweDueDate \u003d date;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code StandardInterest} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withStandardInterest(StandardInterest interest) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.standardInterest \u003d interest;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code LateInterest} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withLateInterest(LateInterest interest) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.lateInterest \u003d interest;"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code Runner} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withRunner(Runner runner) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.runner \u003d runner;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Sets the {@code customers} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public PersonBuilder withCustomers(List\u003cPerson\u003e customers) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        this.customers \u003d customers;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Constructs a Person"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new Person(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Constructs a Customer"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Customer buildCustomer() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new Customer(name, phone, email, address, tags, moneyBorrowed,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                oweStartDate, oweDueDate, standardInterest, lateInterest, runner);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public Runner buildRunner() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return new Runner(name, phone, email, address, tags, customers);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "melvintzw": 180,
      "-": 30
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_CUSTOMER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static String getAddCustomerCommand(Person person) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        return AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(Person person) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 3,
      "-": 36
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalIndexes.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Index} objects to be used in tests."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalIndexes {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_FIRST_PERSON \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_SECOND_PERSON \u003d Index.fromOneBased(2);"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Index INDEX_THIRD_PERSON \u003d Index.fromOneBased(3);"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final Index INDEX_FOURTH_PERSON \u003d Index.fromOneBased(4);"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final Index INDEX_FIFTH_PERSON \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final Index INDEX_SIXTH_PERSON \u003d Index.fromOneBased(6);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public static final Index INDEX_SEVENTH_PERSON \u003d Index.fromOneBased(7);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 4,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * NOTE: Some tests are DEPENDENT on the Customers and Runners already initalized in this list"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": " * It is suggested to add elements rather than modify the elements."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Customers:"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"85355255\")"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withTags(\"friends\").buildCustomer();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").buildCustomer();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").buildCustomer();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").buildCustomer();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").buildCustomer();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //Runners:"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").buildRunner();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").buildRunner();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person HOON \u003d new PersonBuilder().withName(\"Hoon Meier\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").buildCustomer();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person IDA \u003d new PersonBuilder().withName(\"Ida Mueller\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").buildCustomer();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildCustomer();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Person BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            .buildCustomer();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Person person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addPerson(person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"not possible\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 17,
      "-": 70
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/CommandBoxTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TYPE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBoxTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String EXAMPLE_NAME \u003d \"Aaron\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String EXAMPLE_PHONE \u003d \"96781452\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String EXAMPLE_COMMAND_TEMPLATE \u003d AddCommand.COMMAND_WORD + \" \" + PREFIX_TYPE + \"  \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            + PREFIX_NAME + \" \" + EXAMPLE_NAME + \" \" + PREFIX_PHONE + EXAMPLE_PHONE + \" \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private CommandBoxHandle commandBoxHandle;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d new ModelManager();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Logic logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(commandBox);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithSuccessfulCommand() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_startingWithFailedCommand() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify that style is changed correctly even after multiple consecutive failed commands"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForSuccessfulCommand();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertBehaviorForFailedCommand();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void commandBox_handleKeyPress() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.ESCAPE);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.A);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithUp() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands (latest command is failure)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, thirdCommand);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleKeyPress_startingWithDown() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // empty history"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, \"\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // one command"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // two commands"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // insert command in the middle of retrieving previous commands"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(KeyCode.UP);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdCommand \u003d \"list\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(thirdCommand);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.DOWN, \"\");"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertInputHistory(KeyCode.UP, thirdCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void handleKeyPress_shiftTab_whenNoPrefixesPresent() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int expectedCaretPosition \u003d COMMAND_THAT_FAILS.length();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setCaretPosition(expectedCaretPosition);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertShiftTabPressBehaviour(expectedCaretPosition, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void handleKeyPress_shiftTab_whenPrefixesPresent() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // initialisation"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setInput(EXAMPLE_COMMAND_TEMPLATE);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int expectedCaretPosition \u003d EXAMPLE_COMMAND_TEMPLATE.length();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setCaretPosition(expectedCaretPosition);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test skipping past third prefix\u0027s argument and one trailing space"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                assertShiftTabPressBehaviour(expectedCaretPosition, EXAMPLE_PHONE + \" \");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test skipping past second prefix\u0027s argument and third prefix, with no trailing spaces"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                assertShiftTabPressBehaviour(expectedCaretPosition, EXAMPLE_NAME + \" \" + PREFIX_PHONE);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test skipping past second prefix, with one trailing space following second prefix\u0027s argument"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                assertShiftTabPressBehaviour(expectedCaretPosition, \" \" + PREFIX_NAME + \" \");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test skipping past command word and first prefix, to before the entire CommandBox input"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertShiftTabPressBehaviour(expectedCaretPosition, AddCommand.COMMAND_WORD + \" \" + PREFIX_TYPE + \" \");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void handleKeyPress_tab_whenNoPrefixesPresent() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int expectedCaretPosition \u003d 0;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setCaretPosition(expectedCaretPosition);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTabPressBehaviour(expectedCaretPosition, COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void handleKeyPress_tab_whenPrefixesPresent() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // initialisation"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setInput(EXAMPLE_COMMAND_TEMPLATE);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int expectedCaretPosition \u003d 0;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setCaretPosition(expectedCaretPosition);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test skipping past command word and first prefix"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                assertTabPressBehaviour(expectedCaretPosition, AddCommand.COMMAND_WORD + \" \" + PREFIX_TYPE + \" \");"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test skipping past second prefix, with one trailing space following second prefix"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                assertTabPressBehaviour(expectedCaretPosition, \" \" + PREFIX_NAME + \" \");"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test skipping past second prefix\u0027s argument and third prefix, without no trailing spaces"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCaretPosition \u003d"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                assertTabPressBehaviour(expectedCaretPosition, EXAMPLE_NAME + \" \" + PREFIX_PHONE);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test skipping past third prefix\u0027s argument and one trailing space, to after the entire CommandBox input"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTabPressBehaviour(expectedCaretPosition, EXAMPLE_PHONE + \" \");"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void handleKeyPress_shiftBackspace_whenNoPrefixesPresent() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setInput(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int initialCaretPosition \u003d COMMAND_THAT_FAILS.length();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setCaretPosition(initialCaretPosition);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertShiftBackspacePressBehaviour(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void handleKeyPress_shiftBackspace_whenPrefixesPresent() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // initialisation"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setInput(EXAMPLE_COMMAND_TEMPLATE);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int initialCaretPosition \u003d EXAMPLE_COMMAND_TEMPLATE.length();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        commandBoxHandle.setCaretPosition(initialCaretPosition);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test deleting third prefix\u0027s argument and one trailing space"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertShiftBackspacePressBehaviour(EXAMPLE_PHONE + \" \");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test deleting second prefix\u0027s argument and third prefix, with no trailing spaces"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertShiftBackspacePressBehaviour(EXAMPLE_NAME + \" \" + PREFIX_PHONE);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test deleting second prefix, with one trailing space following second prefix\u0027s argument"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertShiftBackspacePressBehaviour(\" \" + PREFIX_NAME + \" \");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // test deleting command word and first prefix"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertShiftBackspacePressBehaviour(AddCommand.COMMAND_WORD + \" \" + PREFIX_TYPE + \" \");"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Presses the keyboard shortcut Shift + Tab, then ensures \u003cbr\u003e"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the command box\u0027s caret position is expected."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private int assertShiftTabPressBehaviour(int lastCaretPosition, String stringLiteralSkipped) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.push(KeyCode.SHIFT, KeyCode.TAB);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int expectedCaretPosition \u003d lastCaretPosition - stringLiteralSkipped.length();"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedCaretPosition, commandBoxHandle.getCaretPosition());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return expectedCaretPosition;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Presses the keyboard shortcut Tab, then ensures \u003cbr\u003e"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the command box\u0027s caret position is expected."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private int assertTabPressBehaviour(int lastCaretPosition, String stringLiteralSkipped) {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.push(KeyCode.TAB);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        int expectedCaretPosition \u003d lastCaretPosition + stringLiteralSkipped.length();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedCaretPosition, commandBoxHandle.getCaretPosition());"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        return expectedCaretPosition;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Presses the keyboard shortcut Shift + Backspace, then ensures \u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the command box\u0027s input is updated as expected."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertShiftBackspacePressBehaviour(String stringLiteralDeleted) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String inputBeforePush \u003d commandBoxHandle.getInput();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.push(KeyCode.SHIFT, KeyCode.BACK_SPACE);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        String inputAfterPush \u003d"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                inputBeforePush.substring(0, inputBeforePush.length() - stringLiteralDeleted.length());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(inputAfterPush, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "content": "    //@@author jonleeyz-reused"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that fails, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - {@code NewResultAvailableEvent} is posted"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text remains \u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForFailedCommand() {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_FAILS);"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        eventsCollectorRule.eventsCollector.reset();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * Runs a command that succeeds, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - {@code NewResultAvailableEvent} is posted"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the text is cleared \u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertBehaviorForSuccessfulCommand() {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(((NewResultAvailableEvent) eventsCollectorRule.eventsCollector.getMostRecent()).isSuccessful());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        eventsCollectorRule.eventsCollector.reset();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 305,
        "content": "    //@@author"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.push(keycode);"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommand, commandBoxHandle.getInput());"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 155,
      "-": 157
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "content": "    //@@author jonleeyz-reused"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_SUCCESS_EVENT_STUB \u003d"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new NewResultAvailableEvent(\"Stub\", true);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_FAILURE_EVENT_STUB \u003d"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            new NewResultAvailableEvent(\"Stub\", false);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cString\u003e defaultStyleOfResultDisplay;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cString\u003e errorStyleOfResultDisplay;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 27,
        "content": "    //@@author"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        defaultStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        errorStyleOfResultDisplay \u003d new ArrayList\u003c\u003e(defaultStyleOfResultDisplay);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "content": "    //@@author jonleeyz-reused"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(defaultStyleOfResultDisplay, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // receiving new results"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertResultDisplay(NEW_RESULT_SUCCESS_EVENT_STUB);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertResultDisplay(NEW_RESULT_FAILURE_EVENT_STUB);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Posts the {@code event} to the {@code EventsCentre}, then verifies that \u003cbr\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the text on the result display matches the {@code event}\u0027s message \u003cbr\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - the result display\u0027s style is the same as {@code defaultStyleOfResultDisplay} if event is successful,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *      - {@code errorStyleOfResultDisplay} otherwise."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertResultDisplay(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        postNow(event);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cString\u003e expectedStyleClass \u003d event.isSuccessful()"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                ? defaultStyleOfResultDisplay"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                : errorStyleOfResultDisplay;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(event.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(expectedStyleClass, resultDisplayHandle.getStyleClass());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "content": "    //@@author"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 4,
      "jonleeyz": 35,
      "-": 34
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static final String LABEL_DEFAULT_STYLE \u003d \"label\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedCard.getTags().forEach(tag -\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //assertTagsEqual(expectedPerson, actualCard);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "content": "    //@@author jonleeyz-unused"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Returns the colour style for {@code tagName}\u0027s label. The tag colour is determined by looking up the colour in"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code PersonCard#TAG_COLOUR_STYLES}, using an index generated by {@code hashcode()} of the tag\u0027s content."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     *"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @see PersonCard#getTagColourStyleFor(String)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private static String getTagColourStyleFor(String tagName) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        switch (tagName) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"classmates\":"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"owesMoney\":"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return \"teal\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"colleagues\":"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"neighbours\":"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return \"yellow\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"family\":"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"friend\":"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return \"orange\";"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"friends\":"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return \"brown\";"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        case \"husband\":"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return \"grey\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            fail(tagName + \"does not have a colour assigned.\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that the tags in {@code actualCard} matches all tags in {@code expectedPerson} with correct colours."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public static void assertTagsEqual(Person expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        List\u003cString\u003e expectedTags \u003d expectedPerson.getTags()"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .map(tag -\u003e tag.tagName)"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        expectedTags.forEach(tag -\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColourStyleFor(tag)),  // why two args in asList?"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                        actualCard.getTagStyleClasses(tag)));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    */"
      },
      {
        "lineNumber": 88,
        "content": "    //@@author"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cPerson\u003e persons) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 42,
      "melvintzw": 8,
      "-": 70
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TYPE_DESC_CUSTOMER;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.PopulatePrefixesRequestEvent;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operations on the shown unfiltered list ----------------------------- */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person toAdd \u003d AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + TYPE_DESC_CUSTOMER + NAME_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildCustomer();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + NAME_DESC_BOB + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildCustomer();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + NAME_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withTags(VALID_TAG_FRIEND).buildCustomer();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND).buildCustomer();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + TAG_DESC_FRIEND + PHONE_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* -------------------------- Perform add operation on the shown filtered list ------------------------------ */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform add operation while a person card is selected --------------------------- */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid add operations --------------------------------------- */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d PersonUtil.getAddCustomerCommand(HOON);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // This test will fail if a new tag that is not in the model is used, see the bug documented in"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // AddressBook#addPerson(Person)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d PersonUtil.getAddCustomerCommand(HOON) + \" \" + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid keyword -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Messages.MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + INVALID_NAME_DESC + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + NAME_DESC_AMY + INVALID_PHONE_DESC + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + NAME_DESC_AMY + PHONE_DESC_AMY + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: invalid address -\u003e rejected"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        + INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TYPE_DESC_CUSTOMER + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + ADDRESS_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnCommandBox_populateAddCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingAccelerator();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnResultDisplay_populateAddCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingAccelerator();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnPersonListPanel_populateAddCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingAccelerator();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnBrowserPanel_populateAddCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingAccelerator();"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void populateAddCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateAddCommandUsingMenu();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing {@code AddCommand} with the details of"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * the current model added with {@code toAdd}.\u003cbr\u003e"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url and selected card remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Person toAdd) {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCustomerCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(Person)}. Executes {@code command}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(Person)"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Person toAdd) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Person)} except asserts that"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * the,\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. {@code Model}, {@code Storage} and {@code PersonListPanel} equal to the corresponding components in"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, Person)"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(AddCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(AddCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the AddCommand template"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateAddCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.I);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the AddCommand template"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateAddCommandUsingMenu() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"Actions\", \"Add a Person...\");"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "content": "    //@@author jonleeyz-unused"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        AddCommand addCommand \u003d new AddCommand();"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(addCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 344,
        "content": "    //@@author"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 93,
      "melvintzw": 33,
      "-": 218
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.ui.ResultDisplay;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cString\u003e defaultStyleOfResultDisplay;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private List\u003cString\u003e errorStyleOfResultDisplay;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initialize();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        defaultStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        errorStyleOfResultDisplay \u003d mainWindowHandle.getResultDisplay().getStyleClass();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        errorStyleOfResultDisplay.add(ResultDisplay.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() throws Exception {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    protected AddressBook getInitialData() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return TypicalPersons.getTypicalAddressBook();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the directory of the data file."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    protected String getDataFileLocation() {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        return TestApp.SAVE_LOCATION_FOR_TESTING;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindowHandle getMainWindowHandle() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes {@code command} associated with the given keyboard shortcut."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void executeUsingAccelerator(KeyCode... combination) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        mainWindowHandle.getMainMenu().useAccelerator(combination);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the appropriate {@code command} template in the application\u0027s"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code CommandBox} given a keyboard shortcut."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void populateUsingAccelerator(KeyCode... combination) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        mainWindowHandle.getMainMenu().useAccelerator(combination);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes {@code command} associated with the given menu item."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void executeUsingMenuItem(String... menuItems) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        mainWindowHandle.getMainMenu().clickOnMenuItemsSequentially(menuItems);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the appropriate {@code command} template in the application\u0027s"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * {@code CommandBox} given the appropriate menu item."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void populateUsingMenu(String... menuItems) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        mainWindowHandle.getMainMenu().clickOnMenuItemsSequentially(menuItems);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(getModel().getAddressBook().getPersonList().size(), getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes all persons in the address book."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void deleteAllPersons() {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, getModel().getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, getModel());"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //erroneous expected test output -- assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // ());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        String selectedCardName \u003d getPersonListPanel().getHandleToSelectedCard().getName();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that the command box and result display show the default style."
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void assertCommandBoxAndResultDisplayShowsDefaultStyle() {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(defaultStyleOfResultDisplay, getResultDisplay().getStyleClass());"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that the command box and result display show the error style."
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    protected void assertCommandBoxAndResultDisplayShowsErrorStyle() {"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(errorStyleOfResultDisplay, getResultDisplay().getStyleClass());"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Starting state is wrong.\", e);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 72,
      "melvintzw": 2,
      "-": 277
    }
  },
  {
    "path": "src/test/java/systemtests/AssignCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.commands.AssignCommand.MESSAGE_ASSIGN_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_CUSTOMERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SIXTH_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.logic.commands.AssignCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.model.person.runner.Runner;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class AssignCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private static final String MESSAGE_INVALID_ASSIGN_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, AssignCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* ----------------- Performing assign operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* Case: assign first person in the list to sixth person in the list, command with leading spaces and"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        trailing spaces -\u003e sixth person (customer) assigned to first person (runner)*/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void execute_assignOneCustomerToOneRunnerWithExtraWhiteSpaces_success() throws Exception {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Model expectedModel \u003d getModel(); //data is from TypicalPersons.java"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String command \u003d \"     \" + AssignCommand.COMMAND_WORD + \"      \" + INDEX_SIXTH_PERSON.getOneBased() + \" \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                + PREFIX_CUSTOMERS + \" \" + INDEX_FIRST_PERSON.getOneBased();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //get runner"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person runner \u003d expectedModel.getFilteredPersonList().get(INDEX_SIXTH_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Index[] customerIndexes \u003d {INDEX_FIRST_PERSON};"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //get customers"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e customers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Index index : customerIndexes) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person customer \u003d expectedModel.getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            customers.add(customer);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //build editedRunner (assigned with customers)"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Person editedRunner \u003d new PersonBuilder(runner).withCustomers(customers).buildRunner();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //update expected model"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updatePerson(runner, editedRunner);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //build editedCustomers (assigned with runner)"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cPerson\u003e editedCustomers \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        for (Person c : customers) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            Person editedCustomer \u003d new PersonBuilder(c).withRunner((Runner) runner).buildCustomer();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            editedCustomers.add(editedCustomer);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            expectedModel.updatePerson(c, editedCustomer);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_ASSIGN_PERSON_SUCCESS, editedRunner);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    //TODO:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /* Case: assign first person in the list to sixth person in the list, but first person already has a runner"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    assigned -\u003e sixth person (customer) assigned to first person (runner)*/"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* in v1.5rc, edit command should always select the card index of the person who was edited"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /TODO: the test cases are not yet modified to assert this - add/modify the tests for this new functionality"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //the UI is not updating fast enough resulting in failure?! UI displays correctly in manual testing!"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                                                     Model expectedModel) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertEquals(expectedModel, getModel());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //the UI is not updating fast enough resulting in failure?! UI displays correctly in manual testing!"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //the UI is not updating fast enough resulting in failure?! UI displays correctly in manual testing!"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //erroneous expected test output -- assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        // ());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "melvintzw": 157
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"ClEaR\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author jonleeyz"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: simulate press of Ctrl + Shift + C -\u003e cleared */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // undoes last clear command: address book still will be empty"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertKeyboardShortcutSuccess(ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new ModelManager(),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                KeyCode.CONTROL,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                KeyCode.SHIFT,"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                KeyCode.C);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        /* Case: simulate click of \"Clear the Database\" menu item -\u003e cleared */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertMenuItemSuccess(ClearCommand.MESSAGE_SUCCESS,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                new ModelManager(),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \"Edit\","
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                \"Clear the Database\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, String, Model)} except that the command"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * is executed using its keyboard shortcut."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertKeyboardShortcutSuccess(String expectedResultMessage,"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                                               Model expectedModel,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                                               KeyCode... combination) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeUsingAccelerator(combination);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, String, Model)} except that the command"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * is executed using its menu item."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String, String, Model)"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertMenuItemSuccess(String expectedResultMessage,"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                                               Model expectedModel,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "                                               String... menuItems) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeUsingMenuItem(menuItems);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "jonleeyz": 53,
      "-": 99
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.DeleteCommand.MESSAGE_DELETE_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.PopulatePrefixesRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"DelETE 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnCommandBox_populateDeleteCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingAccelerator();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnResultDisplay_populateDeleteCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingAccelerator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnPersonListPanel_populateDeleteCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingAccelerator();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnBrowserPanel_populateDeleteCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingAccelerator();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void populateDeleteCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateDeleteCommandUsingMenu();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code Person} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        Person targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"targetPerson is retrieved from model.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Person deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(MESSAGE_DELETE_PERSON_SUCCESS, deletedPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(DeleteCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(DeleteCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the DeleteCommand template"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateDeleteCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.D);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the DeleteCommand template"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateDeleteCommandUsingMenu() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"Actions\", \"Delete a Person...\");"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "content": "    //@@author jonleeyz-unused"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(deleteCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(deleteCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 287,
        "content": "    //@@author"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 89,
      "-": 197
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.PopulatePrefixesRequestEvent;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \" + ADDRESS_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_HUSBAND).buildCustomer();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit some fields -\u003e edited */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).buildCustomer();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        // Test fails when prefix is edited to \"t: \" from \"t:\"."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().buildCustomer();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).buildCustomer();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: invalid address -\u003e rejected"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeCommand(PersonUtil.getAddCustomerCommand(BOB));"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "                + ADDRESS_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnCommandBox_populateEditCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingAccelerator();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnResultDisplay_populateEditCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingAccelerator();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnPersonListPanel_populateEditCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingAccelerator();"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnBrowserPanel_populateEditCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingAccelerator();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void populateEditCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateEditCommandUsingMenu();"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, Person, Index)} except that"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, Person, Index)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, Person editedPerson,"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updatePerson("
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException | PersonNotFoundException e) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* in v1.5rc, edit command should always select the card index of the person who was edited"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /TODO: the test cases are not yet modified to assert this - add/modify the tests for this new functionality"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        */"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(EditCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(EditCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the EditCommand template"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateEditCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.E);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the EditCommand template"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateEditCommandUsingMenu() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"Actions\", \"Edit a Person...\");"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 362,
        "content": "    //@@author jonleeyz-unused"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand();"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(editCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(editCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 376,
        "content": "    //@@author"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 93,
      "melvintzw": 10,
      "-": 272
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.PopulatePrefixesRequestEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "//@@author melvintzw"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find multiple persons in address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "         */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //TODO: implement test cases for specifiers: -n -p -e -a -t"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //ModelHelper.setFilteredList()"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //refer to TypicalPersons.java and test.data.sandbox.sampleData.xml for fields to check"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        //-------------INVALID CASES---------------------------------------------------------------------------------\u003e"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(getModel().getAddressBook().getPersonList().contains(BENSON));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find address of person in address book -\u003e 3 persons found */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL, DANIEL, GEORGE);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find email of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 6 persons found */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, ALICE, CARL, DANIEL, ELLE, FIONA, GEORGE);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertFalse(getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "        assertCommandFailure(command, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "melvintzw"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnCommandBox_populateFindCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingAccelerator();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnResultDisplay_populateFindCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingAccelerator();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnPersonListPanel_populateFindCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingAccelerator();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnBrowserPanel_populateFindCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingAccelerator();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void populateFindCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateFindCommandUsingMenu();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "melvintzw"
        },
        "content": "     *"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(FindCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(FindCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the FindCommand template"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateFindCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.F);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the FindCommand template"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateFindCommandUsingMenu() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"View\", \"Find...\");"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "content": "    //@@author jonleeyz-unused"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        FindCommand findCommand \u003d new FindCommand();"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(findCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(findCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 303,
        "content": "    //@@author"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 92,
      "melvintzw": 154,
      "-": 56
    }
  },
  {
    "path": "src/test/java/systemtests/HelpCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.BrowserPanel;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.StatusBarFooter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for the help window, which contains interaction with other UI components."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // open help window and give it focus"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that while the help window is open the UI updates correctly for a command execution"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        // assert that the status bar too is updated correctly while the help window is open"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // note: the select command tested above does not update the status bar"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotEquals(StatusBarFooter.SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnCommandBox_executeHelpCommand_usingAccelerator() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeHelpCommandUsingAccelerator();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnResultDisplay_executeHelpCommand_usingAccelerator() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeHelpCommandUsingAccelerator();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnPersonListPanel_executeHelpCommand_usingAccelerator() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeHelpCommandUsingAccelerator();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnBrowserPanel_executeHelpCommand_usingAccelerator() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeHelpCommandUsingAccelerator();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void executeHelpCommand_usingMenuButton() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeHelpCommandUsingMenu();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainWindowHandle().focus();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the HelpCommand using its accelerator in {@code MainMenu}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void executeHelpCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeUsingAccelerator(KeyCode.F12);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Executes the HelpCommand using its menu bar item in {@code MainMenu}."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void executeHelpCommandUsingMenu() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeUsingMenuItem(\"Help\", \"F12\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "content": "    //@@author jonleeyz-unused"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 119,
        "content": "    //@@author"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 58,
      "-": 60
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import guitests.GuiRobot;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import javafx.scene.input.KeyCode;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "import seedu.address.commons.events.ui.PopulatePrefixesRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private final GuiRobot guiRobot \u003d new GuiRobot();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(\"SeLeCt 1\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteAllPersons();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnCommandBox_populateSelectCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingAccelerator();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnResultDisplay_populateSelectCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingAccelerator();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnPersonListPanel_populateSelectCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingAccelerator();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void focusOnBrowserPanel_populateSelectCommandTemplate_usingAccelerator() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingAccelerator();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    public void populateSelectCommandTemplate_usingMenuButton() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateSelectCommandUsingMenu();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertPopulationSuccess();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays the success message of executing select command with the"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} of the selected person.\u003cbr\u003e"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Status bar remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsDefaultStyle();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and asserts that the,\u003cbr\u003e"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Command box has the error style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. {@code Model}, {@code Storage} and {@code PersonListPanel} remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1, 3 and 4 are performed by"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertCommandBoxAndResultDisplayShowsErrorStyle();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author jonleeyz"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Asserts that population of the {@code CommandBox} with the AddCommand"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * template was successful."
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationSuccess() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(SelectCommand.COMMAND_TEMPLATE, getCommandBox().getInput());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(SelectCommand.MESSAGE_USAGE, getResultDisplay().getText());"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof PopulatePrefixesRequestEvent);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the SelectCommand template"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the associated accelerator in {@code MainWindow}."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateSelectCommandUsingAccelerator() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingAccelerator(KeyCode.CONTROL, KeyCode.S);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * Populates the {@code CommandBox} with the SelectCommand template"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     * using the menu bar in {@code MainWindow}."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void populateSelectCommandUsingMenu() {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        populateUsingMenu(\"Actions\", \"Select a Person...\");"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "content": "    //@@author jonleeyz-unused"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    /* Redundant, kept for legacy purposes"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    private void assertPopulationFailure() {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(selectCommand.getTemplate(), getCommandBox().getInput());"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertNotEquals(selectCommand.getUsageMessage(), getResultDisplay().getText());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        executeCommand(\"invalid command\");"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertTrue(getCommandBox().clear());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        assertEquals(MESSAGE_UNKNOWN_COMMAND, getResultDisplay().getText());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "jonleeyz"
        },
        "content": "    */"
      },
      {
        "lineNumber": 244,
        "content": "    //@@author"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "jonleeyz": 92,
      "-": 151
    }
  }
]
